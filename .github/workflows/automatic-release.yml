name: üöÄ Automatic Release Management

on:
  push:
    branches: [ main ]
    paths-ignore:
      - '**.MD'
      - 'docs/**'
      - '.github/**'      
  pull_request:
    types: [ closed ]
    branches: [ main ]
  workflow_dispatch:
    inputs:
      release-type:
        description: "Type of release"
        required: false
        default: 'simple'
        type: choice
        options:
          - simple
          - node
          - python
          - rust
          - java
          - go
          - docker
      force-release:
        description: "Force create release (skip conventional commit check)"
        type: boolean
        default: false
      security-scan-engine:
        description: "Security scanning engine"
        type: choice
        default: 'both'
        options:
          - gitleaks
          - gitguardian  
          - both
      license-check:
        description: "Enable license compliance check"
        type: boolean
        default: true
      artifact-generation:
        description: "Enable artifact generation"
        type: boolean
        default: true
      auto-merge-pr:
        description: "Auto-merge release PR when created"
        type: boolean
        default: true
      cleanup-release-branch:
        description: "Delete release branch after merge"
        type: boolean
        default: true
      artifact-types:
        description: "Types of artifacts to generate"
        type: choice
        default: 'source'
        options:
          - source
          - binaries
          - docker
          - all

permissions:
  contents: write
  pull-requests: write
  issues: write
  actions: read
  security-events: write
  packages: write
  id-token: write
  repository-projects: write
  checks: write

env:
  # Global configuration
  ENABLE_SECURITY_SCAN: ${{ github.event_name == 'workflow_dispatch' && inputs.security-scan-engine != '' || 'true' }}
  SECURITY_SCAN_ENGINE: ${{ github.event_name == 'workflow_dispatch' && inputs.security-scan-engine || 'both' }}
  ENABLE_LICENSE_CHECK: ${{ github.event_name == 'workflow_dispatch' && inputs.license-check || 'true' }}
  ENABLE_ARTIFACTS: ${{ github.event_name == 'workflow_dispatch' && inputs.artifact-generation || 'true' }}
  ENABLE_AUTO_MERGE: ${{ github.event_name == 'workflow_dispatch' && inputs.auto-merge-pr || 'true' }}
  CLEANUP_RELEASE_BRANCH: ${{ github.event_name == 'workflow_dispatch' && inputs.cleanup-release-branch || 'true' }}
  RELEASE_TYPE: ${{ github.event_name == 'workflow_dispatch' && inputs.release-type || 'simple' }}
  ARTIFACT_TYPES: ${{ github.event_name == 'workflow_dispatch' && inputs.artifact-types || 'source' }}
  FORCE_RELEASE: ${{ github.event_name == 'workflow_dispatch' && inputs.force-release || 'false' }}

jobs:
  # Pre-flight checks for pull requests
  pr-validation:
    name: üîç PR Validation
    if: github.event_name == 'pull_request' && github.event.pull_request.merged == false
    runs-on: ubuntu-latest
    
    steps:
      - name: üöÄ Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: üìã Validate Conventional Commits
        uses: wagoid/commitlint-github-action@v5
        with:
          configFile: .github/config/commitlint.config.js

      - name: üõ°Ô∏è Security Pre-Check
        if: env.ENABLE_SECURITY_SCAN == 'true'
        uses: ./.github/actions/security-scan-meta
        with:
          scan-engine: ${{ env.SECURITY_SCAN_ENGINE }}
          scan-type: 'secrets'
          fail-on-findings: 'true'
          gitguardian-api-key: ${{ secrets.GITGUARDIAN_API_KEY }}
          github-token: ${{ secrets.GITHUB_TOKEN }}

      - name: üìã License Pre-Check
        if: env.ENABLE_LICENSE_CHECK == 'true'
        uses: ./.github/actions/license-compliance
        with:
          fail-on-forbidden: 'true'
          fail-on-unknown: 'false'
          scan-dependencies: 'false'
          generate-sbom: 'false'
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: ‚úÖ PR Validation Summary
        uses: actions/github-script@v7
        with:
          script: |
            const summary = [
              '### ‚úÖ PR Validation Results',
              'All validation checks passed successfully',
              '',
              '**Checks Performed:**',
              '- ‚úÖ Conventional commit format validation',
              `- ${{ env.ENABLE_SECURITY_SCAN == 'true' && '‚úÖ' || '‚è≠Ô∏è' }} Security pre-check`,
              `- ${{ env.ENABLE_LICENSE_CHECK == 'true' && '‚úÖ' || '‚è≠Ô∏è' }} License compliance pre-check`
            ].join('\n');
            
            await core.summary.addRaw(summary).write();

  # Main release management job
  release-management:
    name: üì¶ Release Management
    if: |
      (github.event_name == 'push' && 
       !contains(github.event.head_commit.message, 'chore(main): release') &&
       !contains(github.event.head_commit.message, 'chore(release)') &&
       !contains(github.event.head_commit.message, 'Merge pull request')) ||
      (github.event_name == 'pull_request' && 
       github.event.pull_request.merged == true) ||
      github.event_name == 'workflow_dispatch'
    runs-on: ubuntu-latest
    outputs:
      release_created: ${{ steps.enhanced-release.outputs.release_created == 'true' || steps.manual_fallback.outputs.release_created == 'true' }}
      tag_name: ${{ steps.enhanced-release.outputs.tag_name || steps.manual_fallback.outputs.tag_name }}
      version: ${{ steps.enhanced-release.outputs.version || steps.manual_fallback.outputs.version }}
      upload_url: ${{ steps.enhanced-release.outputs.upload_url || steps.manual_fallback.outputs.release_url }}
      html_url: ${{ steps.enhanced-release.outputs.html_url || steps.manual_fallback.outputs.release_url }}
      pr_number: ${{ steps.enhanced-release.outputs.pr_number }}
      pr_merged: ${{ steps.enhanced-release.outputs.pr_merged }}
      security_score: ${{ steps.enhanced-release.outputs.security_score }}
      license_compliance: ${{ steps.enhanced-release.outputs.license_compliance }}
      artifacts_generated: ${{ steps.enhanced-release.outputs.artifacts_generated }}
      fallback_used: ${{ steps.manual_fallback.outputs.release_created == 'true' }}
    
    steps:
      - name: üöÄ Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: ÔøΩ Debug Event Information
        uses: actions/github-script@v7
        with:
          script: |
            console.log('üîç Event Debug Information:');
            console.log(`Event Name: ${context.eventName}`);
            console.log(`Ref: ${context.ref}`);
            console.log(`SHA: ${context.sha}`);
            
            if (context.eventName === 'push') {
              console.log(`Commit Message: ${context.payload.head_commit?.message || 'N/A'}`);
              console.log(`Pusher: ${context.payload.pusher?.name || 'N/A'}`);
            }
            
            if (context.eventName === 'pull_request') {
              console.log(`PR Number: ${context.payload.pull_request?.number || 'N/A'}`);
              console.log(`PR Title: ${context.payload.pull_request?.title || 'N/A'}`);
              console.log(`PR State: ${context.payload.pull_request?.state || 'N/A'}`);
              console.log(`PR Merged: ${context.payload.pull_request?.merged || false}`);
              console.log(`PR Author: ${context.payload.pull_request?.user?.login || 'N/A'}`);
              console.log(`Head Ref: ${context.payload.pull_request?.head?.ref || 'N/A'}`);
            }
            
            console.log(`Environment Variables:`);
            console.log(`  ENABLE_AUTO_MERGE: ${process.env.ENABLE_AUTO_MERGE}`);
            console.log(`  ENABLE_SECURITY_SCAN: ${process.env.ENABLE_SECURITY_SCAN}`);
            console.log(`  ENABLE_LICENSE_CHECK: ${process.env.ENABLE_LICENSE_CHECK}`);
            console.log(`  ENABLE_ARTIFACTS: ${process.env.ENABLE_ARTIFACTS}`);
            console.log(`  RELEASE_TYPE: ${process.env.RELEASE_TYPE}`);
            console.log(`  FORCE_RELEASE: ${process.env.FORCE_RELEASE}`);

      - name: ÔøΩüìù Update Documentation
        if: env.ENABLE_ARTIFACTS == 'true'
        uses: ./.github/actions/readme-generate
        continue-on-error: true
        with:
          template-path: 'docs/README.template.MD'
          output-path: 'README.MD'
          project-name: 'Automation Templates'
          company-name: 'Bauer Group'
          project-description: 'Zentrale GitHub Actions Templates und Workflows f√ºr automatisierte Entwicklungsprozesse'
          contact-email: 'support@bauer-group.com'
          documentation-url: 'https://github.com/bauer-group/automation-templates/wiki'
          support-url: 'https://github.com/bauer-group/automation-templates/issues'

      - name: üöÄ Enhanced Release Please
        id: enhanced-release
        uses: ./.github/actions/release-please
        with:
          release-type: ${{ env.RELEASE_TYPE }}
          security-scan-engine: ${{ env.SECURITY_SCAN_ENGINE }}
          security-scan-enabled: ${{ env.ENABLE_SECURITY_SCAN }}
          license-check-enabled: ${{ env.ENABLE_LICENSE_CHECK }}
          artifact-generation-enabled: ${{ env.ENABLE_ARTIFACTS }}
          auto-merge-enabled: ${{ env.ENABLE_AUTO_MERGE }}
          cleanup-release-branch: ${{ env.CLEANUP_RELEASE_BRANCH }}
          force-release: ${{ inputs.force-release || 'false' }}
          gitleaks-license: ${{ secrets.GITLEAKS_LICENSE }}
          gitguardian-api-key: ${{ secrets.GITGUARDIAN_API_KEY }}
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: üè∑Ô∏è Validate Release Semantics
        if: steps.enhanced-release.outputs.release_created == 'true'
        uses: actions/github-script@v7
        with:
          script: |
            const tagName = '${{ steps.enhanced-release.outputs.tag_name }}';
            const version = '${{ steps.enhanced-release.outputs.version }}';
            
            console.log('üè∑Ô∏è Validating release semantics...');
            console.log(`Tag: ${tagName}`);
            console.log(`Version: ${version}`);
            
            // Validate semantic versioning format
            const semverRegex = /^[0-9]+\.[0-9]+\.[0-9]+(-[a-zA-Z0-9\.-]+)*(\+[a-zA-Z0-9\.-]+)*$/;
            if (!semverRegex.test(version)) {
              core.setFailed(`‚ùå Invalid semantic version format: ${version}`);
              return;
            }
            
            // Validate tag format
            const tagRegex = /^v?[0-9]+\.[0-9]+\.[0-9]+(-[a-zA-Z0-9\.-]+)*(\+[a-zA-Z0-9\.-]+)*$/;
            if (!tagRegex.test(tagName)) {
              core.setFailed(`‚ùå Invalid tag format: ${tagName}`);
              return;
            }
            
            console.log('‚úÖ Release semantics validated successfully');

      - name: ÔøΩ Manual Fallback Release
        id: manual_fallback
        if: |
          steps.enhanced-release.outputs.release_created != 'true' &&
          (env.FORCE_RELEASE == 'true' || inputs.force-release == true)
        shell: bash
        run: |
          echo "üîÑ Enhanced Release Please created no release, running Manual Fallback..."
          
          # Make script executable
          chmod +x scripts/manual-release.sh
          
          # Run manual release script
          ./scripts/manual-release.sh

      - name: üìä Generate Release Dashboard
        if: always()
        uses: actions/github-script@v7
        with:
          script: |
            const releaseCreated = '${{ steps.enhanced-release.outputs.release_created }}';
            const fallbackReleaseCreated = '${{ steps.manual_fallback.outputs.release_created }}';
            const tagName = '${{ steps.enhanced-release.outputs.tag_name }}' || '${{ steps.manual_fallback.outputs.tag_name }}';
            const version = '${{ steps.enhanced-release.outputs.version }}' || '${{ steps.manual_fallback.outputs.version }}';
            const htmlUrl = '${{ steps.enhanced-release.outputs.html_url }}' || '${{ steps.manual_fallback.outputs.release_url }}';
            const prNumber = '${{ steps.enhanced-release.outputs.pr_number }}';
            const prMerged = '${{ steps.enhanced-release.outputs.pr_merged }}';
            const securityScore = '${{ steps.enhanced-release.outputs.security_score }}';
            const licenseCompliance = '${{ steps.enhanced-release.outputs.license_compliance }}';
            const artifactsGenerated = '${{ steps.enhanced-release.outputs.artifacts_generated }}';
            
            const anyReleaseCreated = releaseCreated === 'true' || fallbackReleaseCreated === 'true';
            const releaseMethod = releaseCreated === 'true' ? 'Enhanced Release Please' :
                                 fallbackReleaseCreated === 'true' ? 'Manual Fallback' : 'None';
            
            // Format security scan result
            let securityDisplay = 'N/A';
            if ('${{ env.ENABLE_SECURITY_SCAN }}' === 'true') {
              if (securityScore) {
                const score = parseInt(securityScore);
                if (score >= 95) {
                  securityDisplay = `‚úÖ ${score}/100`;
                } else if (score >= 80) {
                  securityDisplay = `‚ö†Ô∏è ${score}/100`;
                } else {
                  securityDisplay = `‚ùå ${score}/100`;
                }
              } else {
                securityDisplay = 'üîÑ Running...';
              }
            } else {
              securityDisplay = '‚è≠Ô∏è Disabled';
            }
            
            // Format license compliance result
            let licenseDisplay = 'N/A';
            if ('${{ env.ENABLE_LICENSE_CHECK }}' === 'true') {
              if (licenseCompliance) {
                licenseDisplay = licenseCompliance === 'pass' ? '‚úÖ Pass' : '‚ùå Issues found';
              } else {
                licenseDisplay = 'üîÑ Running...';
              }
            } else {
              licenseDisplay = '‚è≠Ô∏è Disabled';
            }
            
            // Format artifact generation result
            let artifactDisplay = 'N/A';
            if ('${{ env.ENABLE_ARTIFACTS }}' === 'true') {
              if (artifactsGenerated) {
                artifactDisplay = artifactsGenerated === 'true' ? '‚úÖ Generated' : '‚ö†Ô∏è Partial';
              } else {
                artifactDisplay = anyReleaseCreated ? '‚úÖ Standard' : '‚è≠Ô∏è Pending';
              }
            } else {
              artifactDisplay = '‚è≠Ô∏è Disabled';
            }
            
            // Format auto merge result
            let autoMergeDisplay = 'N/A';
            if ('${{ env.ENABLE_AUTO_MERGE }}' === 'true') {
              if (fallbackReleaseCreated === 'true') {
                autoMergeDisplay = '‚úÖ N/A (Direct Release)';
              } else if (prMerged === 'true') {
                autoMergeDisplay = '‚úÖ Merged';
              } else if (prNumber) {
                autoMergeDisplay = '‚è≥ Pending';
              } else {
                autoMergeDisplay = '‚è≠Ô∏è No PR';
              }
            } else {
              autoMergeDisplay = '‚è≠Ô∏è Disabled';
            }
            
            // Format branch cleanup result
            let cleanupDisplay = 'N/A';
            if ('${{ env.CLEANUP_RELEASE_BRANCH }}' === 'true') {
              if (fallbackReleaseCreated === 'true') {
                cleanupDisplay = '‚úÖ N/A (Direct Release)';
              } else {
                cleanupDisplay = anyReleaseCreated ? '‚úÖ Scheduled' : '‚è≠Ô∏è Pending';
              }
            } else {
              cleanupDisplay = '‚è≠Ô∏è Disabled';
            }
            
            let summary = [
              '## üì¶ Release Management Summary',
              '',
              '### üöÄ Automatic Release Management Dashboard',
              '',
              '| Component | Status | Details |',
              '|-----------|--------|---------|',
              '| **Event** | üìã | ${{ github.event_name }} |',
              '| **Branch** | üåø | ${{ github.ref_name }} |',
              '| **Release Type** | üì¶ | ${{ env.RELEASE_TYPE }} |',
              '| **Force Release** | ‚ö° | ${{ inputs.force-release || 'false' }} |',
              '| **Release Method** | üîß | ' + releaseMethod + ' |',
              '',
              '### üîß Features Status',
              '',
              '| Feature | Enabled | Result |',
              '|---------|---------|--------|',
              '| **Security Scan** | ${{ env.ENABLE_SECURITY_SCAN }} | ' + securityDisplay + ' |',
              '| **License Check** | ${{ env.ENABLE_LICENSE_CHECK }} | ' + licenseDisplay + ' |',
              '| **Artifact Generation** | ${{ env.ENABLE_ARTIFACTS }} | ' + artifactDisplay + ' |',
              '| **Auto Merge PR** | ${{ env.ENABLE_AUTO_MERGE }} | ' + autoMergeDisplay + ' |',
              '| **Branch Cleanup** | ${{ env.CLEANUP_RELEASE_BRANCH }} | ' + cleanupDisplay + ' |',
              '',
              '### üìã Release Results',
              '',
              '| Field | Value |',
              '|-------|-------|',
              '| **Release Method** | ' + releaseMethod + ' |',
              '| **Release Created** | ' + (anyReleaseCreated ? 'true' : 'false') + ' |'
            ];
            
            if (releaseCreated === 'true') {
              summary.push(
                '| **Tag Name** | `' + tagName + '` |',
                '| **Version** | `' + version + '` |',
                '| **Release URL** | [View Release](' + htmlUrl + ') |'
              );
            } else if (fallbackReleaseCreated === 'true') {
              summary.push(
                '| **Tag Name** | `' + tagName + '` |',
                '| **Version** | `' + version + '` |',
                '| **Release URL** | [View Release](' + htmlUrl + ') |'
              );
            } else if (prNumber) {
              summary.push(
                '| **PR Number** | [#' + prNumber + '](https://github.com/${{ github.repository }}/pull/' + prNumber + ') |',
                '| **PR Status** | ' + (prMerged === 'true' ? 'Merged' : 'Open') + ' |'
              );
            }
            
            summary.push('');
            
            if (releaseCreated === 'true') {
              summary.push(
                '### üéâ Release Successfully Created!',
                '',
                '**Next Steps:**',
                '- ‚úÖ Release notes generated automatically',
                '- ‚úÖ GitHub release is available',
                '- ‚úÖ Tags are ready for external consumption'
              );
              
              if ('${{ env.ENABLE_ARTIFACTS }}' === 'true') {
                summary.push('- ‚úÖ Release artifacts generated and uploaded');
              }
              
              if ('${{ env.ENABLE_SECURITY_SCAN }}' === 'true') {
                summary.push('- üõ°Ô∏è Security scan completed (' + securityDisplay + ')');
              }
              
              if ('${{ env.ENABLE_LICENSE_CHECK }}' === 'true') {
                summary.push('- üìã License compliance verified (' + licenseDisplay + ')');
              }
              
            } else if (fallbackReleaseCreated === 'true') {
              summary.push(
                '### üéâ Manual Fallback Release Created!',
                '',
                '**Next Steps:**',
                '- ‚úÖ Release created via manual script',
                '- ‚úÖ GitHub release is available',
                '- ‚úÖ Tags are ready for external consumption'
              );
            } else if (prNumber) {
              summary.push(
                '### üìù Release PR Created',
                '',
                'A release PR has been created and is ready for review.',
                '',
                '**PR Actions:**'
              );
              
              if ('${{ env.ENABLE_AUTO_MERGE }}' === 'true') {
                if (prMerged === 'true') {
                  summary.push('- ‚úÖ PR automatically merged');
                } else {
                  summary.push('- ‚è≥ Auto-merge attempted but manual review required');
                }
              } else {
                summary.push('- üë• Manual review and merge required');
              }
            } else {
              summary.push(
                '### ‚ÑπÔ∏è No Release Action Taken',
                '',
                '**Possible Reasons:**',
                '- No conventional commits since last release',
                '- Only non-releasable changes (docs, chore, etc.)',
                '- Release-Please PR already exists',
                '',
                '**To Trigger a Release:**',
                '- `feat:` for new features (minor version bump)',
                '- `fix:` for bug fixes (patch version bump)',
                '- `feat!:` or `BREAKING CHANGE:` for breaking changes (major version bump)'
              );
            }
            
            await core.summary.addRaw(summary.join('\n')).write();

  # Auto-merge for release PRs
  auto-merge-release-pr:
    name: üîÑ Auto-Merge Release PR
    if: |
      needs.release-management.outputs.pr_number != '' &&
      needs.release-management.outputs.release_created != 'true'
    needs: release-management
    runs-on: ubuntu-latest
    
    steps:
      - name: üöÄ Checkout
        uses: actions/checkout@v4

      - name: üîÑ Auto Merge PR
        if: env.ENABLE_AUTO_MERGE == 'true'
        uses: ./.github/actions/auto-merge
        with:
          pr-number: ${{ needs.release-management.outputs.pr_number }}
          merge-method: 'squash'
          auto-merge-enabled: 'true'
          required-checks: ''
          required-reviews: '0'
          allowed-authors: 'github-actions[bot],release-please[bot]'
          delete-branch-after-merge: 'true'
          token: ${{ secrets.GITHUB_TOKEN }}

  # Extended artifact generation for specific types
  extended-artifacts:
    name: üî® Extended Artifact Generation
    if: |
      needs.release-management.outputs.release_created == 'true' && 
      (github.event_name == 'workflow_dispatch' && 
       (inputs.artifact-types == 'binaries' || inputs.artifact-types == 'docker' || inputs.artifact-types == 'all'))
    needs: [release-management]
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          - name: "Linux AMD64"
            os: ubuntu-latest
            target: linux-amd64
          - name: "Windows AMD64"  
            os: windows-latest
            target: windows-amd64
          - name: "macOS AMD64"
            os: macos-latest
            target: darwin-amd64
    
    steps:
      - name: üöÄ Checkout
        uses: actions/checkout@v4

      - name: üî® Extended Artifact Generation
        uses: ./.github/actions/artifact-generator
        with:
          artifact-types: ${{ env.ARTIFACT_TYPES }}
          tag-name: ${{ needs.release-management.outputs.tag_name }}
          version: ${{ needs.release-management.outputs.version }}
          upload-url: ${{ needs.release-management.outputs.upload_url }}
          build-command: 'echo "Add your build command here"'
          binary-paths: ''
          docker-registry: 'ghcr.io'
          docker-username: ${{ github.actor }}
          docker-password: ${{ secrets.GITHUB_TOKEN }}
          token: ${{ secrets.GITHUB_TOKEN }}

  # Post-release actions and notifications
  post-release:
    name: üéØ Post-Release Actions
    if: needs.release-management.outputs.release_created == 'true'
    needs: [release-management]
    runs-on: ubuntu-latest
    
    steps:
      - name: üöÄ Checkout
        uses: actions/checkout@v4

      - name: üì¢ Release Notification
        uses: actions/github-script@v7
        with:
          script: |
            const version = '${{ needs.release-management.outputs.version }}';
            const tagName = '${{ needs.release-management.outputs.tag_name }}';
            const htmlUrl = '${{ needs.release-management.outputs.html_url }}';
            const securityScore = '${{ needs.release-management.outputs.security_score }}';
            const licenseCompliance = '${{ needs.release-management.outputs.license_compliance }}';
            const artifactsGenerated = '${{ needs.release-management.outputs.artifacts_generated }}';
            
            const notification = [
              'üéâ New release published successfully!',
              '',
              'üìã Release Details:',
              `  ‚Ä¢ Version: ${version}`,
              `  ‚Ä¢ Tag: ${tagName}`,
              `  ‚Ä¢ Release URL: ${htmlUrl}`
            ];
            
            if ('${{ env.ENABLE_SECURITY_SCAN }}' === 'true') {
              notification.push(`  ‚Ä¢ Security Score: ${securityScore || 'N/A'}/100`);
            }
            
            if ('${{ env.ENABLE_LICENSE_CHECK }}' === 'true') {
              notification.push(`  ‚Ä¢ License Compliance: ${licenseCompliance || 'N/A'}`);
            }
            
            if ('${{ env.ENABLE_ARTIFACTS }}' === 'true') {
              notification.push(`  ‚Ä¢ Artifacts: ${artifactsGenerated || 'None'}`);
            }
            
            console.log(notification.join('\n'));

      - name: üîÑ Update External References
        uses: actions/github-script@v7
        with:
          script: |
            const checklist = [
              'üìã External Reference Update Checklist:',
              '',
              '‚úÖ **Automated Updates:**',
              '  ‚Ä¢ GitHub release created with assets',
              '  ‚Ä¢ Git tags updated',
              '  ‚Ä¢ Release notes generated'
            ];
            
            if ('${{ env.ARTIFACT_TYPES }}'.includes('docker')) {
              checklist.push('  ‚Ä¢ Docker images pushed to registry');
            }
            
            checklist.push(
              '',
              'üìù **Manual Updates Required:**',
              '  ‚Ä¢ Update documentation with new version references',
              '  ‚Ä¢ Notify dependent projects of the release',
              '  ‚Ä¢ Update integration examples',
              '  ‚Ä¢ Consider announcing on relevant channels',
              '',
              'üîó **Useful Links:**',
              '  ‚Ä¢ [Release](${{ needs.release-management.outputs.html_url }})',
              '  ‚Ä¢ [Repository](https://github.com/${{ github.repository }})',
              '  ‚Ä¢ [Documentation](https://github.com/${{ github.repository }}/wiki)'
            );
            
            console.log(checklist.join('\n'));

      - name: üìä Post-Release Analytics
        uses: actions/github-script@v7
        with:
          script: |
            const securityScore = '${{ needs.release-management.outputs.security_score }}';
            const licenseCompliance = '${{ needs.release-management.outputs.license_compliance }}';
            const artifactsGenerated = '${{ needs.release-management.outputs.artifacts_generated }}';
            
            const analytics = [
              'üìä Release Analytics Summary:',
              '',
              'üéØ **Release Metrics:**',
              '  ‚Ä¢ Release Type: ${{ env.RELEASE_TYPE }}',
              '  ‚Ä¢ Trigger: ${{ github.event_name }}',
              '  ‚Ä¢ Workflow Duration: ' + new Date().toISOString().replace('T', ' ').replace(/\..+/, ' UTC'),
              '',
              'üîß **Features Used:**',
              '  ‚Ä¢ Security Scanning: ${{ env.ENABLE_SECURITY_SCAN }}',
              '  ‚Ä¢ License Checking: ${{ env.ENABLE_LICENSE_CHECK }}',
              '  ‚Ä¢ Artifact Generation: ${{ env.ENABLE_ARTIFACTS }}',
              '  ‚Ä¢ Auto-merge PR: ${{ env.ENABLE_AUTO_MERGE }}',
              '',
              'üìà **Quality Metrics:**',
              '  ‚Ä¢ Security Score: ' + (securityScore || 'N/A') + '/100',
              '  ‚Ä¢ License Compliance: ' + (licenseCompliance || 'N/A'),
              '  ‚Ä¢ Artifacts Generated: ' + (artifactsGenerated || 'None')
            ];
            
            console.log(analytics.join('\n'));

      - name: üì§ Generate Release Report
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const path = require('path');
            
            // Create reports directory
            if (!fs.existsSync('reports')) {
              fs.mkdirSync('reports', { recursive: true });
            }
            
            const version = '${{ needs.release-management.outputs.version }}';
            const tagName = '${{ needs.release-management.outputs.tag_name }}';
            const htmlUrl = '${{ needs.release-management.outputs.html_url }}';
            const securityScore = '${{ needs.release-management.outputs.security_score }}';
            const licenseCompliance = '${{ needs.release-management.outputs.license_compliance }}';
            const artifactsGenerated = '${{ needs.release-management.outputs.artifacts_generated }}';
            const prMerged = '${{ needs.release-management.outputs.pr_merged }}';
            
            const releaseReport = [
              `# üöÄ Release Report: ${version}`,
              '',
              `**Release Date:** ${new Date().toISOString().replace('T', ' ').replace(/\..+/, ' UTC')}`,
              `**Repository:** ${{ github.repository }}`,
              `**Branch:** ${{ github.ref_name }}`,
              `**Triggered by:** ${{ github.event_name }}`,
              '',
              '## üìã Release Details',
              '',
              `- **Version:** \`${version}\``,
              `- **Tag:** \`${tagName}\``,
              `- **Type:** ${{ env.RELEASE_TYPE }}`,
              `- **Release URL:** ${htmlUrl}`,
              '',
              '## üîß Configuration',
              '',
              '| Feature | Enabled | Result |',
              '|---------|---------|--------|',
              `| Security Scan | ${{ env.ENABLE_SECURITY_SCAN }} | ${securityScore || 'N/A'}/100 |`,
              `| License Check | ${{ env.ENABLE_LICENSE_CHECK }} | ${licenseCompliance || 'N/A'} |`,
              `| Artifact Generation | ${{ env.ENABLE_ARTIFACTS }} | ${artifactsGenerated || 'None'} |`,
              `| Auto-merge PR | ${{ env.ENABLE_AUTO_MERGE }} | ${prMerged || 'N/A'} |`,
              '',
              '## üìä Quality Assurance',
              '',
              '‚úÖ **Automated Checks Passed:**',
              '- Conventional commit validation',
              '- Security vulnerability scanning',
              '- License compliance verification',
              '- Semantic versioning validation',
              '',
              '## üéØ Post-Release Actions',
              '',
              '‚úÖ **Completed:**',
              '- GitHub release created',
              '- Release notes generated',
              '- Tags pushed',
              '- Artifacts uploaded (if enabled)',
              '',
              'üìù **Recommended:**',
              '- Update documentation',
              '- Notify stakeholders',
              '- Monitor for issues',
              '- Plan next iteration',
              '',
              '---',
              '*Generated by Enhanced Release Management Workflow*'
            ].join('\n');
            
            fs.writeFileSync('reports/release-report.md', releaseReport);
            console.log('üìÑ Release report generated: reports/release-report.md');

      - name: üì§ Upload Release Report
        uses: actions/upload-artifact@v4
        with:
          name: release-report-${{ needs.release-management.outputs.version }}
          path: reports/
          retention-days: 90

  # Cleanup job for release branches
  cleanup-release-branch:
    name: üßπ Cleanup Release Branch
    if: |
      always() &&
      (needs.release-management.outputs.release_created == 'true' || 
       (needs.auto-merge-release-pr.result == 'success' && needs.release-management.outputs.pr_number != '')) &&
      github.event.inputs.cleanup-release-branch != 'false'
    needs: [release-management, extended-artifacts, auto-merge-release-pr]
    runs-on: ubuntu-latest
    
    steps:
      - name: üöÄ Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: üßπ Delete Release Branch
        uses: actions/github-script@v7
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          script: |
            const prNumber = '${{ needs.release-management.outputs.pr_number }}';
            
            console.log('üßπ Starting release branch cleanup...');
            
            if (prNumber) {
              console.log(`üîç Looking for release branch from PR #${prNumber}`);
              
              try {
                // Get PR details to find the head branch
                const { data: pr } = await github.rest.pulls.get({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  pull_number: parseInt(prNumber)
                });
                
                const branchName = pr.head.ref;
                console.log(`üéØ Found release branch: ${branchName}`);
                
                // Check if it's a release-please branch
                if (branchName.startsWith('release-please')) {
                  console.log('‚úÖ Confirmed release-please branch, proceeding with deletion');
                  
                  try {
                    // Delete the remote branch
                    await github.rest.git.deleteRef({
                      owner: context.repo.owner,
                      repo: context.repo.repo,
                      ref: `heads/${branchName}`
                    });
                    
                    console.log(`‚úÖ Successfully deleted remote branch: ${branchName}`);
                    console.log('üßπ Release branch cleanup completed successfully');
                  } catch (deleteError) {
                    console.log(`‚ö†Ô∏è Remote branch ${branchName} may already be deleted or not found`);
                    console.log('Error:', deleteError.message);
                  }
                } else {
                  console.log(`‚ö†Ô∏è Branch ${branchName} is not a release-please branch, skipping deletion`);
                }
              } catch (prError) {
                console.log(`‚ö†Ô∏è Could not get PR details for #${prNumber}:`, prError.message);
              }
            } else {
              console.log('‚ÑπÔ∏è No PR number available, checking for release-please branches');
              
              try {
                // Alternative: Find and delete any release-please branches
                const { data: branches } = await github.rest.repos.listBranches({
                  owner: context.repo.owner,
                  repo: context.repo.repo
                });
                
                const releaseBranches = branches.filter(branch => 
                  branch.name.startsWith('release-please')
                );
                
                if (releaseBranches.length > 0) {
                  console.log('üîç Found release-please branches:');
                  releaseBranches.forEach(branch => console.log(`  - ${branch.name}`));
                  
                  for (const branch of releaseBranches) {
                    try {
                      await github.rest.git.deleteRef({
                        owner: context.repo.owner,
                        repo: context.repo.repo,
                        ref: `heads/${branch.name}`
                      });
                      console.log(`üßπ Deleted branch: ${branch.name}`);
                    } catch (deleteError) {
                      console.log(`‚ö†Ô∏è Could not delete ${branch.name}:`, deleteError.message);
                    }
                  }
                  
                  console.log('üßπ All release-please branches processed');
                } else {
                  console.log('‚ÑπÔ∏è No release-please branches found to clean up');
                }
              } catch (branchError) {
                console.log('‚ö†Ô∏è Error listing branches:', branchError.message);
              }
            }

      - name: üìä Cleanup Summary
        uses: actions/github-script@v7
        with:
          script: |
            const summary = [
              '### üßπ Release Branch Cleanup Summary',
              '',
              '| Item | Status |',
              '|------|--------|',
              '| **Cleanup Enabled** | ‚úÖ ${{ env.CLEANUP_RELEASE_BRANCH }} |',
              '| **Release Created** | ‚úÖ ${{ needs.release-management.outputs.release_created }} |',
              '| **PR Merged** | ‚úÖ ${{ needs.release-management.outputs.pr_merged }} |',
              '| **PR Number** | #${{ needs.release-management.outputs.pr_number || 'N/A' }} |',
              '',
              '‚úÖ Automatic cleanup of release-please branches completed.',
              'This helps keep the repository clean by removing temporary release branches.'
            ];
            
            await core.summary.addRaw(summary.join('\n')).write();
