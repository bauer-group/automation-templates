name: 🐍 Python CI/CD Pipeline (Automatic Release)

# Reusable Python CI/CD pipeline for repositories
# Based on the modular architecture pattern from automatic-release.yml

on:
  workflow_call:
    inputs:
      security-engine:
        description: 'Security scan engine (gitleaks, gitguardian, both)'
        type: string
        default: 'both'
      force-release:
        description: 'Force create release'
        type: boolean
        default: false
      skip-pypi:
        description: 'Skip PyPI publishing'
        type: boolean
        default: false
      python-version:
        description: 'Python version to use'
        type: string
        default: '3.12'
      package-source-path:
        description: 'Path to package source (e.g., src/package_name)'
        type: string
        default: 'src'
    secrets:
      PYPI_API_TOKEN:
        description: 'PyPI API token for publishing'
        required: true
      GITGUARDIAN_API_KEY:
        description: 'GitGuardian API key for security scanning'
        required: false
      GITLEAKS_LICENSE:
        description: 'Gitleaks Pro license key'
        required: false

jobs:
  # PR validation for pull requests
  pr-validation:
    name: PR Quality Gate
    if: github.event_name == 'pull_request'
    uses: bauer-group/automation-templates/.github/workflows/modules-pr-validation.yml@main
    with:
      enable-security-scan: true
      enable-license-check: true
      enable-commit-lint: true
      security-scan-engine: ${{ inputs.security-engine || 'both' }}
      fail-on-security-issues: true
      fail-on-license-issues: false
    secrets: inherit

  # Python-specific quality and security scan
  python-quality-scan:
    name: Python Quality & Security
    if: github.event_name == 'push' || github.event_name == 'workflow_call'
    uses: bauer-group/automation-templates/.github/workflows/python-build.yml@main
    with:
      python-version: ${{ inputs.python-version || '3.12' }}
      working-directory: '.'
      package-source-path: ${{ inputs.package-source-path || 'src' }}
      run-tests: true
      run-lint: true
      run-security-scan: true
      security-tools: '["bandit", "safety"]'
      collect-coverage: true
      build-package: true
      upload-artifacts: true
    secrets: inherit

  # Comprehensive security scan
  security-scan:
    name: Security Analysis
    if: github.event_name == 'push' || github.event_name == 'workflow_call'
    uses: bauer-group/automation-templates/.github/workflows/modules-security-scan.yml@main
    with:
      scan-engine: ${{ inputs.security-engine || 'both' }}
      scan-type: 'all'
      fail-on-findings: false
      minimum-severity: 'medium'
    secrets: inherit

  # License compliance check
  license-compliance:
    name: License Compliance
    if: github.event_name == 'push' || github.event_name == 'workflow_call'
    uses: bauer-group/automation-templates/.github/workflows/modules-license-compliance.yml@main
    with:
      fail-on-forbidden: false
      fail-on-unknown: false
      scan-dependencies: true
      generate-sbom: true
    secrets: inherit

  # Release management
  release-management:
    name: Release Management
    if: github.event_name == 'push' || github.event_name == 'workflow_call'
    needs: [python-quality-scan, security-scan, license-compliance]
    uses: bauer-group/automation-templates/.github/workflows/modules-semantic-release.yml@main
    with:
      target-branch: 'main'
      dry-run: false
      force-release: ${{ inputs.force-release || false }}
    secrets: inherit

  # Python package publishing to PyPI
  publish-pypi:
    name: Publish to PyPI
    if: needs.release-management.outputs.release-created == 'true' && inputs.skip-pypi != true
    needs: release-management
    uses: bauer-group/automation-templates/.github/workflows/python-publish.yml@main
    with:
      python-version: ${{ inputs.python-version || '3.12' }}
      working-directory: '.'
      package-source-path: ${{ inputs.package-source-path || 'src' }}
      package-version: ${{ needs.release-management.outputs.version }}
    secrets: inherit

  # Artifact generation for releases
  artifact-generation:
    name: Generate Artifacts
    if: needs.release-management.outputs.release-created == 'true'
    needs: release-management
    uses: bauer-group/automation-templates/.github/workflows/modules-artifact-generation.yml@main
    with:
      artifact-types: 'source'
      tag-name: ${{ needs.release-management.outputs.tag-name }}
      version: ${{ needs.release-management.outputs.version }}

  # Update documentation for new release
  update-documentation:
    name: Update Documentation
    if: needs.release-management.outputs.release-created == 'true'
    needs: [release-management, publish-pypi, artifact-generation]
    uses: bauer-group/automation-templates/.github/workflows/documentation.yml@main
    with:
      force-update: true
      custom-version: ${{ needs.release-management.outputs.version }}
    secrets: inherit

  # Update security policy for new release (runs after documentation to avoid race condition)
  update-security:
    name: Update Security Policy
    if: needs.release-management.outputs.release-created == 'true'
    needs: [release-management, publish-pypi, artifact-generation, update-documentation]
    uses: bauer-group/automation-templates/.github/workflows/security-management.yml@main
    with:
      force-update: true
      custom-version: ${{ needs.release-management.outputs.version }}
    secrets: inherit

  # Pipeline summary
  pipeline-summary:
    name: Pipeline Summary
    if: always() && ((github.event_name == 'push' && github.ref == 'refs/heads/main') || github.event_name == 'workflow_call')
    needs: [python-quality-scan, security-scan, license-compliance, release-management, publish-pypi, artifact-generation, update-documentation, update-security]
    runs-on: ubuntu-latest
    
    steps:
      - name: 📊 Generate Pipeline Summary
        run: |
          echo "### 🐍 Python CI/CD Pipeline Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Repository:** ${{ github.repository }}" >> $GITHUB_STEP_SUMMARY
          echo "**Architecture:** Modular Python Workflow Components" >> $GITHUB_STEP_SUMMARY
          echo "**Event:** ${{ github.event_name }}" >> $GITHUB_STEP_SUMMARY
          echo "**Branch:** ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
          echo "**Python Version:** ${{ inputs.python-version || '3.12' }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          echo "| Module | Status | Details |" >> $GITHUB_STEP_SUMMARY
          echo "|--------|--------|---------|" >> $GITHUB_STEP_SUMMARY
          echo "| **Python Quality & Security** | ${{ needs.python-quality-scan.result == 'success' && '✅ PASS' || '❌ FAIL' }} | Package build & tests |" >> $GITHUB_STEP_SUMMARY
          echo "| **Security Scan** | ${{ needs.security-scan.result == 'success' && '✅ PASS' || '❌ FAIL' }} | Engine: ${{ inputs.security-engine || 'both' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| **License Compliance** | ${{ needs.license-compliance.result == 'success' && '✅ PASS' || '❌ FAIL' }} | SBOM generated |" >> $GITHUB_STEP_SUMMARY
          echo "| **Release Management** | ${{ needs.release-management.result == 'success' && '✅ PASS' || '❌ FAIL' }} | Created: ${{ needs.release-management.outputs.release-created || 'false' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| **PyPI Publishing** | ${{ needs.publish-pypi.result == 'success' && '✅ PUBLISHED' || needs.publish-pypi.result == 'skipped' && '⏭️ SKIP' || '❌ FAIL' }} | Skip PyPI: ${{ inputs.skip-pypi || 'false' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| **Artifact Generation** | ${{ needs.artifact-generation.result == 'success' && '✅ PASS' || needs.artifact-generation.result == 'skipped' && '⏭️ SKIP' || '❌ FAIL' }} | Types: source, wheel |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [ "${{ needs.release-management.outputs.release-created }}" = "true" ]; then
            echo "🎉 **Python Release ${{ needs.release-management.outputs.version }} created successfully!**" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "**Installation:**" >> $GITHUB_STEP_SUMMARY
            
            if [ "${{ inputs.skip-pypi }}" != "true" ] && [ "${{ needs.publish-pypi.result }}" = "success" ]; then
              echo "\`\`\`bash" >> $GITHUB_STEP_SUMMARY
              echo "pip install <package-name>==${{ needs.release-management.outputs.version }}" >> $GITHUB_STEP_SUMMARY
              echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
            else
              echo "\`\`\`bash" >> $GITHUB_STEP_SUMMARY
              echo "pip install git+https://github.com/${{ github.repository }}@${{ needs.release-management.outputs.tag-name }}" >> $GITHUB_STEP_SUMMARY
              echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
            fi
            
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "**Release:** [View on GitHub](https://github.com/${{ github.repository }}/releases/tag/${{ needs.release-management.outputs.tag-name }})" >> $GITHUB_STEP_SUMMARY
          else
            echo "ℹ️ **No release created.** Pipeline completed successfully." >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "---" >> $GITHUB_STEP_SUMMARY
          echo "*Powered by **BAUER GROUP** Python automation templates* 🐍" >> $GITHUB_STEP_SUMMARY