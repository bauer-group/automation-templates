name: üêç Python Automatic Release

# Reusable Python CI/CD pipeline for external repositories
# Based on automatic-release.yml pattern - simple, smart, and flexible

on:
  workflow_call:
    inputs:
      security-engine:
        description: "Security scan engine"
        type: string
        default: "both"
      force-release:
        description: "Force create release"
        type: boolean
        default: false
      skip-pypi:
        description: "Skip PyPI publishing"
        type: boolean
        default: false
      python-version:
        description: "Python version to use"
        type: string
        default: "3.12"
      package-source-path:
        description: "Path to package source (e.g., src/package_name)"
        type: string
        default: "src"
      version-file:
        description: "Python file containing __version__ (e.g., src/package/__init__.py)"
        type: string
        default: ""
    secrets:
      PYPI_API_TOKEN:
        description: "PyPI API token for publishing"
        required: true
      GITGUARDIAN_API_KEY:
        description: "GitGuardian API key for security scanning"
        required: false
      GITLEAKS_LICENSE:
        description: "Gitleaks Pro license key"
        required: false

jobs:
  # PR validation for pull requests
  pr-validation:
    name: PR Quality Gate
    if: github.event_name == 'pull_request'
    uses: bauer-group/automation-templates/.github/workflows/modules-pr-validation.yml@main
    with:
      enable-security-scan: true
      enable-license-check: true
      enable-commit-lint: true
      security-scan-engine: "gitleaks"
      fail-on-security-issues: true
      fail-on-license-issues: false
    secrets: inherit

  # Python-specific security scan
  python-security-scan:
    name: üõ°Ô∏è Python Security Analysis
    runs-on: ubuntu-latest

    steps:
      - name: üì• Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: üêç Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ inputs.python-version || '3.12' }}

      - name: üõ°Ô∏è Gitleaks Secret Scan
        if: inputs.security-engine == 'gitleaks' || inputs.security-engine == 'both' || inputs.security-engine == ''
        uses: bauer-group/automation-templates/.github/actions/gitleaks-scan@main
        with:
          fail-on-findings: true
          license-key: ${{ secrets.GITLEAKS_LICENSE }}
        env:
          GITLEAKS_LICENSE: ${{ secrets.GITLEAKS_LICENSE }}

      - name: üõ°Ô∏è GitGuardian Security Scan
        if: inputs.security-engine == 'gitguardian' || inputs.security-engine == 'both' || inputs.security-engine == ''
        uses: bauer-group/automation-templates/.github/actions/gitguardian-scan@main
        with:
          api-key: ${{ secrets.GITGUARDIAN_API_KEY }}
          fail-on-findings: false
        continue-on-error: true

      - name: üîç Python Security Tools
        run: |
          # Install Python security tools
          pip install bandit safety

          # Run security checks
          echo "üîç Running bandit security scan..."
          bandit -r . -f json -o bandit-report.json || true

          echo "üîç Running safety dependency check..."
          safety check --json --output safety-report.json || true

      - name: üì§ Upload Security Reports
        uses: actions/upload-artifact@v4
        with:
          name: python-security-reports-${{ github.run_number }}
          path: |
            bandit-report.json
            safety-report.json

  # Python build and test (initial validation)
  python-build-test:
    name: üß™ Python Build & Test
    runs-on: ubuntu-latest

    outputs:
      package-name: ${{ steps.package-info.outputs.name }}
      tests-passed: ${{ steps.test.outcome }}

    steps:
      - name: üì• Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: üêç Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ inputs.python-version || '3.12' }}

      - name: üì¶ Extract Package Info
        id: package-info
        run: |
          if [[ -f "pyproject.toml" ]]; then
            pip install toml
            PACKAGE_NAME=$(python -c "import toml; print(toml.load('pyproject.toml')['project']['name'])" 2>/dev/null || echo "unknown")
          elif [[ -f "setup.py" ]]; then
            PACKAGE_NAME=$(python setup.py --name 2>/dev/null || echo "unknown")
          else
            PACKAGE_NAME="unknown"
          fi

          echo "name=$PACKAGE_NAME" >> $GITHUB_OUTPUT
          echo "Package name: $PACKAGE_NAME"

      - name: üìö Install Dependencies
        run: |
          python -m pip install --upgrade pip

          # Install based on available files
          if [[ -f "requirements.txt" ]]; then
            pip install -r requirements.txt
          fi

          if [[ -f "requirements-dev.txt" ]]; then
            pip install -r requirements-dev.txt
          fi

          if [[ -f "dev-requirements.txt" ]]; then
            pip install -r dev-requirements.txt
          fi

          # Install package in development mode
          if [[ -f "pyproject.toml" ]] || [[ -f "setup.py" ]]; then
            pip install -e .
          fi

          # Install testing tools
          pip install pytest pytest-cov build twine pytest-html pytest-json-report

      - name: üß™ Run Tests
        id: test
        run: |
          echo "üß™ Running comprehensive test suite..."

          # Discover package source path automatically
          PACKAGE_PATH=""
          if [[ -d "${{ inputs.package-source-path }}" ]]; then
            PACKAGE_PATH="${{ inputs.package-source-path }}"
          elif [[ -d "src" ]]; then
            PACKAGE_PATH="src"
          elif [[ -d "lib" ]]; then
            PACKAGE_PATH="lib"
          else
            PACKAGE_PATH="."
          fi

          echo "üì¶ Using package path: $PACKAGE_PATH"

          # Run pytest with comprehensive options
          if [[ -d "tests" ]]; then
            echo "üß™ Running pytest on tests/ directory..."
            pytest tests/ \
              --cov="$PACKAGE_PATH" \
              --cov-report=xml \
              --cov-report=html \
              --cov-report=term \
              --html=test-report.html \
              --self-contained-html \
              --json-report --json-report-file=test-report.json \
              --junit-xml=junit-report.xml \
              --verbose || true
          elif [[ -d "test" ]]; then
            echo "üß™ Running pytest on test/ directory..."
            pytest test/ \
              --cov="$PACKAGE_PATH" \
              --cov-report=xml \
              --cov-report=html \
              --cov-report=term \
              --html=test-report.html \
              --self-contained-html \
              --json-report --json-report-file=test-report.json \
              --junit-xml=junit-report.xml \
              --verbose || true
          else
            echo "‚ÑπÔ∏è No test directory found - running basic package import test"
            python -c "
            import sys
            import os
            sys.path.insert(0, '$PACKAGE_PATH')
            try:
                # Try to import the main package
                import importlib.util
                for root, dirs, files in os.walk('$PACKAGE_PATH'):
                    for file in files:
                        if file == '__init__.py':
                            module_path = os.path.join(root, file)
                            spec = importlib.util.spec_from_file_location('test_module', module_path)
                            if spec and spec.loader:
                                module = importlib.util.module_from_spec(spec)
                                spec.loader.exec_module(module)
                                print(f'‚úÖ Successfully imported {module_path}')
                print('‚úÖ Basic import test passed')
            except Exception as e:
                print(f'‚ùå Import test failed: {e}')
                sys.exit(1)
            "
          fi

      - name: üîç Run Code Quality Checks
        id: quality
        run: |
          echo "üîç Running code quality checks..."

          # Auto-discover package path
          PACKAGE_PATH=""
          if [[ -d "${{ inputs.package-source-path }}" ]]; then
            PACKAGE_PATH="${{ inputs.package-source-path }}"
          elif [[ -d "src" ]]; then
            PACKAGE_PATH="src"
          elif [[ -d "lib" ]]; then
            PACKAGE_PATH="lib"
          else
            PACKAGE_PATH="."
          fi

          # Install quality tools
          pip install flake8 mypy black isort || true

          # Flake8 linting
          echo "üìù Running flake8 linting..."
          flake8 "$PACKAGE_PATH" --count --statistics --format=json --output-file=flake8-report.json || true
          flake8 "$PACKAGE_PATH" --count --statistics || true

          # Black formatting check
          echo "üé® Checking code formatting with black..."
          black --check --diff "$PACKAGE_PATH" || echo "‚ö†Ô∏è Code formatting issues found"

          # Import sorting check
          echo "üì§ Checking import sorting with isort..."
          isort --check-only --diff "$PACKAGE_PATH" || echo "‚ö†Ô∏è Import sorting issues found"

          # MyPy type checking (auto-discover mypy config or use defaults)
          echo "üî§ Running mypy type checking..."
          if [[ -f "mypy.ini" ]] || [[ -f ".mypy.ini" ]] || [[ -f "pyproject.toml" ]]; then
            mypy "$PACKAGE_PATH" || echo "‚ö†Ô∏è Type checking issues found"
          else
            mypy "$PACKAGE_PATH" --ignore-missing-imports --no-strict-optional || echo "‚ö†Ô∏è Type checking issues found (using relaxed settings)"
          fi

      - name: üß™ Run Additional Test Scripts
        id: additional-scripts
        run: |
          # Run any additional test scripts found in scripts directory
          if [[ -d "scripts" ]]; then
            echo "üß™ Looking for test scripts in scripts/..."
            find scripts -name "test*.py" -type f | while read script; do
              echo "Running additional Python script: $script"
              python "$script" || echo "‚ö†Ô∏è Script $script had issues"
            done
            
            find scripts -name "test*" -type f -executable | while read script; do
              if [[ "$script" != *.py ]]; then
                echo "Running additional executable script: $script"
                "$script" || echo "‚ö†Ô∏è Script $script had issues"
              fi
            done
          else
            echo "‚ÑπÔ∏è No scripts directory found"
          fi

          echo "additional-scripts=completed" >> $GITHUB_OUTPUT

      - name: üì§ Upload Test Results & Coverage
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results-${{ github.run_number }}
          path: |
            htmlcov/
            coverage.xml
            .coverage
            test-report.html
            test-report.json
            junit-report.xml
          retention-days: 30

  # License compliance check
  license-compliance:
    name: üìã License Compliance
    uses: bauer-group/automation-templates/.github/workflows/modules-license-compliance.yml@main
    with:
      fail-on-forbidden: false
      fail-on-unknown: false
      scan-dependencies: true
      generate-sbom: true
    secrets: inherit

  # Release management (BEFORE building final packages)
  release-management:
    name: üöÄ Release Management
    needs: [python-security-scan, python-build-test, license-compliance]
    uses: bauer-group/automation-templates/.github/workflows/modules-semantic-release.yml@main
    with:
      target-branch: "main"
      dry-run: false
    secrets: inherit

  # Python build with CORRECT version (AFTER semantic release)
  python-build-release:
    name: üß™ Python Build & Package (Release)
    if: needs.release-management.outputs.release-created == 'true' || inputs.force-release == true
    needs: [python-build-test, release-management]
    runs-on: ubuntu-latest

    outputs:
      version: ${{ steps.version.outputs.version }}
      package-name: ${{ needs.python-build-test.outputs.package-name }}

    steps:
      - name: üì• Checkout Code (with updated version from semantic-release)
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}
          ref: ${{ needs.release-management.outputs.tag-name }}

      - name: üêç Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ inputs.python-version || '3.12' }}

      - name: üè∑Ô∏è Get Updated Version
        id: version
        run: |
          VERSION="${{ needs.release-management.outputs.version }}"
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Final release version: $VERSION"

      - name: üìö Install Dependencies
        run: |
          python -m pip install --upgrade pip

          # Install based on available files
          if [[ -f "requirements.txt" ]]; then
            pip install -r requirements.txt
          fi

          if [[ -f "requirements-dev.txt" ]]; then
            pip install -r requirements-dev.txt
          fi

          if [[ -f "dev-requirements.txt" ]]; then
            pip install -r dev-requirements.txt
          fi

          # Install package in development mode
          if [[ -f "pyproject.toml" ]] || [[ -f "setup.py" ]]; then
            pip install -e .
          fi

          # Install build tools
          pip install build twine

      - name: üì¶ Build Final Release Package
        run: |
          echo "üì¶ Building Python package with version ${{ steps.version.outputs.version }}..."
          python -m build

          echo "üîç Checking package with twine..."
          twine check dist/*

      - name: üì§ Upload Release Package Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: python-release-package-${{ github.run_number }}
          path: dist/
          retention-days: 30

  # PyPI Publishing
  publish-pypi:
    name: üì¶ Publish to PyPI
    if: (needs.release-management.outputs.release-created == 'true' || inputs.force-release == true) && inputs.skip-pypi != true
    needs: [python-build-release, release-management]
    runs-on: ubuntu-latest
    environment: pypi

    steps:
      - name: üì• Download Release Package
        uses: actions/download-artifact@v4
        with:
          name: python-release-package-${{ github.run_number }}
          path: dist/

      - name: üöÄ Publish to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          password: ${{ secrets.PYPI_API_TOKEN }}
          skip-existing: true

      - name: üìä Package Published
        run: |
          echo "üéâ Package published to PyPI!"
          echo "üì¶ Install with: pip install ${{ needs.python-build-release.outputs.package-name }}==${{ needs.python-build-release.outputs.version }}"

  # GitHub Repository Setup for Direct Installation
  setup-github-repo:
    name: üîß Setup Repository for Direct Installation
    if: (needs.release-management.outputs.release-created == 'true' || inputs.force-release == true)
    needs: [python-build-release, release-management]
    runs-on: ubuntu-latest

    steps:
      - name: üì• Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}
          ref: ${{ needs.release-management.outputs.tag-name }}

      - name: üêç Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ inputs.python-version || '3.12' }}

      - name: üîß Verify Installation Compatibility
        run: |
          echo "üîç Verifying repository structure for direct pip installation..."

          # Check for essential files
          if [[ -f "pyproject.toml" ]]; then
            echo "‚úÖ Found pyproject.toml - modern Python project structure (recommended)"
            echo "‚ÑπÔ∏è No setup.py needed with pyproject.toml"
            cat pyproject.toml
          elif [[ -f "setup.py" ]]; then
            echo "‚úÖ Found setup.py - classic Python project structure"
            cat setup.py
          else
            echo "‚ùå No pyproject.toml or setup.py found"
            echo "Creating minimal setup.py for direct installation..."
            cat > setup.py << 'EOF'
          from setuptools import setup, find_packages
          import os
          import re

          # Try to find version
          version = "0.1.0"
          init_files = []
          for root, dirs, files in os.walk("."):
              for file in files:
                  if file == "__init__.py":
                      init_files.append(os.path.join(root, file))

          for init_file in init_files:
              try:
                  with open(init_file, "r") as f:
                      content = f.read()
                  match = re.search(r"__version__\s*=\s*['\"]([^'\"]+)['\"]", content)
                  if match:
                      version = match.group(1)
                      break
              except:
                  continue

          setup(
              name=os.path.basename(os.getcwd()),
              version=version,
              packages=find_packages(),
              install_requires=[],
              python_requires=">=3.8",
          )
          EOF
          fi

          # Verify package structure
          echo "üì¶ Package structure:"
          find . -name "*.py" -path "*/src/*" -o -name "*.py" -path "*/lib/*" -o -name "setup.py" -o -name "pyproject.toml" | head -10

          # Test installation compatibility
          echo "üß™ Testing direct installation compatibility..."
          python -m pip install --upgrade pip setuptools wheel

          # Try installation in dry-run mode
          if [[ -f "pyproject.toml" ]]; then
            python -m pip install --dry-run -e . || echo "‚ö†Ô∏è Installation may have issues"
          elif [[ -f "setup.py" ]]; then
            python setup.py check || echo "‚ö†Ô∏è Setup.py may have issues"
          fi

      - name: üìã Generate Installation Instructions
        run: |
          cat >> $GITHUB_STEP_SUMMARY << EOF
          ## üì¶ Direct Git Installation Ready

          **Install Latest Release:**
          \`\`\`bash
          pip install git+https://github.com/${{ github.repository }}@${{ needs.release-management.outputs.tag-name }}
          \`\`\`

          **Install from Main Branch:**
          \`\`\`bash
          pip install git+https://github.com/${{ github.repository }}
          \`\`\`

          **Install Specific Version:**
          \`\`\`bash
          pip install git+https://github.com/${{ github.repository }}@v${{ needs.python-build-release.outputs.version }}
          \`\`\`

          **Development Installation (Editable):**
          \`\`\`bash
          git clone https://github.com/${{ github.repository }}.git
          cd $(basename ${{ github.repository }})
          pip install -e .
          \`\`\`

          ---
          *Repository configured for direct pip installation* ‚úÖ
          EOF

      - name: üìù Create Installation Guide
        run: |
          cat > INSTALLATION.MD << 'EOF'
          # Installation Guide

          ## Direct Installation from GitHub

          ### Latest Release (Recommended)
          ```bash
          pip install git+https://github.com/${{ github.repository }}@${{ needs.release-management.outputs.tag-name }}
          ```

          ### Development Version
          ```bash
          pip install git+https://github.com/${{ github.repository }}
          ```

          ### Specific Version
          ```bash
          pip install git+https://github.com/${{ github.repository }}@v${{ needs.python-build-release.outputs.version }}
          ```

          ### With Specific Dependencies
          ```bash
          pip install "git+https://github.com/${{ github.repository }}[dev]"
          ```

          ### Development Installation
          For contributing or local development:
          ```bash
          git clone https://github.com/${{ github.repository }}.git
          cd $(basename ${{ github.repository }})
          pip install -e ".[dev]"
          ```

          ## Requirements
          - Python >= 3.8
          - Git installed on your system
          - Internet connection

          ## Troubleshooting

          ### Authentication Issues (Private Repos)
          ```bash
          pip install git+https://username:token@github.com/${{ github.repository }}.git
          ```

          ### SSL Certificate Issues
          ```bash
          pip install --trusted-host github.com git+https://github.com/${{ github.repository }}
          ```

          ### Upgrade Installation
          ```bash
          pip install --upgrade git+https://github.com/${{ github.repository }}
          ```

          ## PyPI Installation (if available)
          ```bash
          pip install ${{ needs.python-build-release.outputs.package-name }}
          ```

          ---
          Generated by: ${{ github.workflow }} on ${{ github.run_id }}
          EOF

          echo "üìù Created INSTALLATION.MD guide"

      - name: üíæ Commit Installation Guide
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"

          if [[ -n $(git status --porcelain) ]]; then
            git add INSTALLATION.MD setup.py || true
            git commit -m "docs: add installation guide for release ${{ needs.release-management.outputs.tag-name }}" || true
            git push origin ${{ needs.release-management.outputs.tag-name }} || true
          else
            echo "‚ÑπÔ∏è No changes to commit"
          fi

  # Pipeline summary
  pipeline-summary:
    name: üìä Pipeline Summary
    if: always()
    needs:
      [
        python-security-scan,
        python-build-test,
        license-compliance,
        release-management,
        python-build-release,
        publish-pypi,
        setup-github-repo,
      ]
    runs-on: ubuntu-latest

    steps:
      - name: üìä Generate Pipeline Summary
        run: |
          cat >> $GITHUB_STEP_SUMMARY << EOF
          # üêç Python Automatic Release Summary

          ## üì¶ Package Information
          - **Name:** ${{ needs.python-build-test.outputs.package-name || 'N/A' }}
          - **Version:** ${{ needs.python-build-release.outputs.version || needs.release-management.outputs.version || 'N/A' }}
          - **Event:** ${{ github.event_name }}
          - **Branch:** ${{ github.ref_name }}
          - **Python Version:** ${{ inputs.python-version || '3.12' }}

          ## üîç Pipeline Results
          | Component | Status | Details |
          |-----------|--------|---------|
          | **üõ°Ô∏è Security Scan** | ${{ needs.python-security-scan.result == 'success' && '‚úÖ PASS' || '‚ùå FAIL' }} | Python security tools + ${{ inputs.security-engine || 'both' }} |
          | **üß™ Build & Test** | ${{ needs.python-build-test.result == 'success' && '‚úÖ PASS' || '‚ùå FAIL' }} | Custom + Standard tests |
          | **üìã License Compliance** | ${{ needs.license-compliance.result == 'success' && '‚úÖ PASS' || '‚ùå FAIL' }} | SBOM generated |
          | **üöÄ Release Management** | ${{ needs.release-management.result == 'success' && '‚úÖ PASS' || '‚ùå FAIL' }} | Release: ${{ needs.release-management.outputs.release-created || 'false' }} |
          | **üß™ Release Build** | ${{ needs.python-build-release.result == 'success' && '‚úÖ PASS' || needs.python-build-release.result == 'skipped' && '‚è≠Ô∏è SKIP' || '‚ùå FAIL' }} | With correct version |
          | **üì¶ PyPI Publishing** | ${{ needs.publish-pypi.result == 'success' && '‚úÖ PUBLISHED' || needs.publish-pypi.result == 'skipped' && '‚è≠Ô∏è SKIP' || '‚ùå FAIL' }} | PyPI package |
          | **üîß GitHub Direct Install** | ${{ needs.setup-github-repo.result == 'success' && '‚úÖ READY' || needs.setup-github-repo.result == 'skipped' && '‚è≠Ô∏è SKIP' || '‚ùå FAIL' }} | Git installation ready |

          ## üì§ Generated Artifacts
          - **Test Results:** test-results-${{ github.run_number }}
          - **Security Reports:** python-security-reports-${{ github.run_number }}
          - **Release Package:** python-release-package-${{ github.run_number }}

          EOF

          if [[ "${{ needs.release-management.outputs.release-created }}" == "true" ]]; then
            cat >> $GITHUB_STEP_SUMMARY << EOF
          ## üéâ Release Created Successfully!

          **Installation:**
          \`\`\`bash
          pip install ${{ needs.python-build-test.outputs.package-name }}==${{ needs.python-build-release.outputs.version }}
          \`\`\`

          **Release:** [View on GitHub](https://github.com/${{ github.repository }}/releases/tag/${{ needs.release-management.outputs.tag-name }})

          EOF
          fi

          cat >> $GITHUB_STEP_SUMMARY << EOF
          ---
          *Powered by **BAUER GROUP** Python automation* üêç
          EOF

  # Verify tag availability before documentation updates
  verify-tag-availability:
    name: Verify Tag Availability
    if: needs.release-management.outputs.release-created == 'true'
    needs: [release-management, setup-github-repo]
    runs-on: ubuntu-latest
    outputs:
      tag-verified: ${{ steps.verify.outputs.tag-verified }}
    steps:
      - name: üì• Checkout Repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0
          fetch-tags: true

      - name: üîç Verify Tag Availability
        id: verify
        run: |
          TAG="${{ needs.release-management.outputs.tag-name }}"
          echo "üîç Verifying availability of tag: $TAG"
          
          # Retry logic for tag verification
          MAX_RETRIES=10  # 10 retries = 45 seconds max
          RETRY_COUNT=0
          
          while [ $RETRY_COUNT -lt $MAX_RETRIES ]; do
            # Fetch latest tags from remote
            git fetch --tags origin
            
            # Check if tag exists
            if git rev-parse "refs/tags/$TAG" >/dev/null 2>&1; then
              echo "‚úÖ Tag $TAG is available"
              echo "tag-verified=true" >> $GITHUB_OUTPUT
              exit 0
            fi
            
            RETRY_COUNT=$((RETRY_COUNT + 1))
            echo "‚è≥ Tag not yet available, attempt $RETRY_COUNT/$MAX_RETRIES"
            
            if [ $RETRY_COUNT -lt $MAX_RETRIES ]; then
              # Progressive delay: 1s, 2s, 3s...
              DELAY=$RETRY_COUNT
              echo "‚è≥ Waiting ${DELAY}s before retry..."
              sleep $DELAY
            fi
          done
          
          echo "‚ùå Tag $TAG not available after $MAX_RETRIES attempts"
          echo "tag-verified=false" >> $GITHUB_OUTPUT
          exit 1

  # Step 1: Update documentation in the release tag
  update-documentation-in-tag:
    name: Update Documentation in Release Tag
    if: needs.release-management.outputs.release-created == 'true'
    needs: [verify-tag-availability]
    runs-on: ubuntu-latest
    steps:
      - name: üì• Checkout Release Tag
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0
          fetch-tags: true
          ref: ${{ needs.release-management.outputs.tag-name }}

      - name: üìù Update Documentation in Tag
        uses: bauer-group/automation-templates/.github/actions/readme-generate@main
        with:
          template-path: 'docs/README.template.MD'
          output-path: 'README.MD'
          force-update: true
          custom-version: ${{ needs.release-management.outputs.version }}
          
      - name: üíæ Commit Documentation to Release Tag
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          
          if [[ -n $(git status --porcelain) ]]; then
            git add README.MD SECURITY.MD || true
            git commit -m "docs: update documentation for release ${{ needs.release-management.outputs.tag-name }}" || true
            
            # Force update the tag
            git tag -d ${{ needs.release-management.outputs.tag-name }} || true
            git tag ${{ needs.release-management.outputs.tag-name }}
            git push origin ${{ needs.release-management.outputs.tag-name }} --force
          fi

  # Step 1: Update security in the release tag
  update-security-in-tag:
    name: Update Security in Release Tag
    if: needs.release-management.outputs.release-created == 'true'
    needs: [update-documentation-in-tag]
    runs-on: ubuntu-latest
    steps:
      - name: üì• Checkout Release Tag
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0
          fetch-tags: true
          ref: ${{ needs.release-management.outputs.tag-name }}

      - name: üõ°Ô∏è Update Security Policy in Tag
        uses: bauer-group/automation-templates/.github/actions/security-generate@main
        with:
          config-file: '.github/config/security-policy/config.yml'
          force-update: true
          custom-version: ${{ needs.release-management.outputs.version }}
          
      - name: üíæ Commit Security Policy to Release Tag
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          
          if [[ -n $(git status --porcelain) ]]; then
            git add SECURITY.MD || true
            git commit -m "security: update security policy for release ${{ needs.release-management.outputs.tag-name }}" || true
            
            # Force update the tag
            git tag -d ${{ needs.release-management.outputs.tag-name }} || true
            git tag ${{ needs.release-management.outputs.tag-name }}
            git push origin ${{ needs.release-management.outputs.tag-name }} --force
          fi

  # Step 2: Update documentation in main branch
  update-documentation:
    name: üìÑ Update Documentation in Main
    if: needs.release-management.outputs.release-created == 'true'
    needs: [update-documentation-in-tag]
    uses: bauer-group/automation-templates/.github/workflows/documentation.yml@main
    with:
      tag-name: ${{ needs.release-management.outputs.tag-name }}
      custom-version: ${{ needs.release-management.outputs.version }}
      force-update: true
    permissions:
      contents: write
      pull-requests: write

  # Step 2: Update security in main branch
  update-security-management:
    name: üõ°Ô∏è Update Security Management in Main
    if: needs.release-management.outputs.release-created == 'true'
    needs: [update-security-in-tag]
    uses: bauer-group/automation-templates/.github/workflows/security-management.yml@main
    with:
      tag-name: ${{ needs.release-management.outputs.tag-name }}
      custom-version: ${{ needs.release-management.outputs.version }}
      force-update: true
    permissions:
      contents: write
      pull-requests: write

  # Sync CHANGELOG from release tag to main branch
  sync-changelog:
    name: Sync CHANGELOG to Main Branch
    if: needs.release-management.outputs.release-created == 'true'
    needs: [release-management]
    runs-on: ubuntu-latest
    steps:
      - name: üì• Checkout Main Branch
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0
          fetch-tags: true
          ref: main

      - name: üìù Extract CHANGELOG from Release
        run: |
          TAG="${{ needs.release-management.outputs.tag-name }}"
          VERSION="${{ needs.release-management.outputs.version }}"
          
          echo "üìù Extracting changelog from release $TAG"
          echo "üîç Looking for version: ${VERSION}"
          
          # Get release notes from GitHub API
          RELEASE_NOTES=$(gh release view "$TAG" --json body --jq '.body' 2>/dev/null || echo "")
          
          if [ -z "$RELEASE_NOTES" ]; then
            echo "‚ö†Ô∏è No release notes found for $TAG"
            exit 0
          fi
          
          echo "üìÑ Release notes found:"
          echo "$RELEASE_NOTES" | head -3
          
          # Check if CHANGELOG already contains this version (check both with and without v prefix)
          if grep -q "## \[${VERSION}\]" CHANGELOG.MD 2>/dev/null; then
            echo "‚ÑπÔ∏è CHANGELOG already contains version ${VERSION}"
            exit 0
          fi
          
          if grep -q "## \[v${VERSION}\]" CHANGELOG.MD 2>/dev/null; then
            echo "‚ÑπÔ∏è CHANGELOG already contains version v${VERSION}"  
            exit 0
          fi
          
          echo "üìù Adding version ${VERSION} to CHANGELOG"
          
          # Create temporary file with new changelog entry
          echo "$RELEASE_NOTES" > temp_new_entry.md
          echo "" >> temp_new_entry.md
          
          # Prepend new entry to existing CHANGELOG
          if [ -f "CHANGELOG.MD" ]; then
            cat CHANGELOG.MD >> temp_new_entry.md
          fi
          
          mv temp_new_entry.md CHANGELOG.MD
          
          echo "‚úÖ CHANGELOG updated with release $TAG (version ${VERSION})"

      - name: üíæ Commit CHANGELOG Updates
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "üìã CHANGELOG Sync"
          
          if [[ -n $(git status --porcelain CHANGELOG.MD) ]]; then
            git add CHANGELOG.MD
            git commit -m "docs: sync CHANGELOG from release ${{ needs.release-management.outputs.tag-name }}"
            git push origin main
            echo "‚úÖ CHANGELOG synchronized to main branch"
          else
            echo "‚ÑπÔ∏è No CHANGELOG changes to commit"
          fi
