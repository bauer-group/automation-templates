name: üì¶ Manual Release Management

on:
  workflow_dispatch:
    inputs:
      version_bump:
        description: 'Version bump type'
        required: true
        default: 'patch'
        type: choice
        options:
          - major
          - minor
          - patch
      custom_version:
        description: 'Custom version (optional, overrides bump type)'
        required: false
        type: string
      create_github_release:
        description: 'Create GitHub Release'
        required: true
        default: true
        type: boolean
      skip_tests:
        description: 'Skip tests and validations'
        required: false
        default: false
        type: boolean
      security_scan_engine:
        description: 'Security scanning engine'
        required: false
        default: 'both'
        type: choice
        options:
          - gitleaks
          - gitguardian
          - both
      license_check:
        description: 'Enable license compliance check'
        required: false
        default: true
        type: boolean

permissions:
  contents: write
  pull-requests: write
  issues: write
  actions: read
  security-events: write
  packages: write

env:
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

jobs:
  validate-inputs:
    name: üîç Validate Release Inputs
    runs-on: ubuntu-latest
    outputs:
      target_version: ${{ steps.version.outputs.target_version }}
      current_version: ${{ steps.version.outputs.current_version }}
      changelog_content: ${{ steps.changelog.outputs.content }}
    
    steps:
      - name: ÔøΩ Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: üìä Debug Event Information
        uses: actions/github-script@v7
        with:
          script: |
            console.log('üîç Manual Release Debug Information:');
            console.log(`Event Name: ${context.eventName}`);
            console.log(`Ref: ${context.ref}`);
            console.log(`SHA: ${context.sha}`);
            console.log(`Actor: ${context.actor}`);
            
            console.log(`Input Parameters:`);
            console.log(`  Version Bump: ${{ github.event.inputs.version_bump }}`);
            console.log(`  Custom Version: ${{ github.event.inputs.custom_version }}`);
            console.log(`  Create GitHub Release: ${{ github.event.inputs.create_github_release }}`);
            console.log(`  Skip Tests: ${{ github.event.inputs.skip_tests }}`);
            console.log(`  Security Scan Engine: ${{ github.event.inputs.security_scan_engine }}`);
            console.log(`  License Check: ${{ github.event.inputs.license_check }}`);

      - name: üè∑Ô∏è Determine Target Version
        id: version
        run: |
          # Get current version from manifest or git tags
          if [[ -f ".github/config/.release-please-manifest.json" ]]; then
            CURRENT_VERSION=$(jq -r '."."' .github/config/.release-please-manifest.json)
          else
            # Fallback to git tags
            CURRENT_VERSION=$(git describe --tags --abbrev=0 2>/dev/null | sed 's/^v//' || echo "0.0.0")
          fi
          
          echo "Current version: $CURRENT_VERSION"
          
          # Use custom version if provided
          if [[ -n "${{ github.event.inputs.custom_version }}" ]]; then
            TARGET_VERSION="${{ github.event.inputs.custom_version }}"
          else
            # Calculate next version based on bump type
            IFS='.' read -r major minor patch <<< "$CURRENT_VERSION"
            
            case "${{ github.event.inputs.version_bump }}" in
              major)
                TARGET_VERSION="$((major + 1)).0.0"
                ;;
              minor)
                TARGET_VERSION="$major.$((minor + 1)).0"
                ;;
              patch)
                TARGET_VERSION="$major.$minor.$((patch + 1))"
                ;;
            esac
          fi
          
          echo "Target version: $TARGET_VERSION"
          echo "target_version=$TARGET_VERSION" >> $GITHUB_OUTPUT
          echo "current_version=$CURRENT_VERSION" >> $GITHUB_OUTPUT

      - name: üìù Generate Changelog Content
        id: changelog
        run: |
          # Get commits since last release
          LAST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || git rev-list --max-parents=0 HEAD)
          
          echo "## üöÄ What's Changed in v${{ steps.version.outputs.target_version }}"
          echo ""
          
          # Generate changelog from commits
          CHANGELOG_CONTENT=$(cat <<EOF
          ## üöÄ What's Changed in v${{ steps.version.outputs.target_version }}
          
          ### üìã Changes since v${{ steps.version.outputs.current_version }}
          
          $(git log ${LAST_TAG}..HEAD --pretty=format:"- %s" --reverse)
          
          ### üîó Full Changelog
          
          **Full Changelog**: https://github.com/${{ github.repository }}/compare/v${{ steps.version.outputs.current_version }}...v${{ steps.version.outputs.target_version }}
          
          ---
          
          *This release was created manually using the Enhanced Release Management workflow.*
          EOF
          )
          
          # Save changelog content
          echo "$CHANGELOG_CONTENT" > /tmp/changelog.md
          
          # Output for next job (escape newlines)
          {
            echo 'content<<EOF'
            echo "$CHANGELOG_CONTENT"
            echo 'EOF'
          } >> $GITHUB_OUTPUT

  security-scan:
    name: üîí Security & Compliance
    runs-on: ubuntu-latest
    needs: validate-inputs
    if: ${{ github.event.inputs.skip_tests != 'true' }}
    
    steps:
      - name: üì• Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: üîç Security Scan
        uses: ./.github/actions/security-scan
        with:
          scan-engine: ${{ github.event.inputs.security_scan_engine || 'both' }}
          scan-type: 'all'
          minimum-severity: 'medium'
          fail-on-findings: false
          gitleaks-license: ${{ secrets.GITLEAKS_LICENSE }}
          gitguardian-api-key: ${{ secrets.GITGUARDIAN_API_KEY }}
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: ÔøΩ License Compliance
        if: ${{ github.event.inputs.license_check != 'false' }}
        uses: ./.github/actions/license-compliance
        with:
          fail-on-forbidden: 'false'
          fail-on-unknown: 'false'
          scan-dependencies: 'true'
          generate-sbom: 'false'
          token: ${{ secrets.GITHUB_TOKEN }}

  create-release:
    name: üè∑Ô∏è Create Release
    runs-on: ubuntu-latest
    needs: [validate-inputs, security-scan]
    if: always() && (needs.security-scan.result == 'success' || github.event.inputs.skip_tests == 'true')
    
    steps:
      - name: üì• Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: üîß Configure Git
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "41898282+github-actions[bot]@users.noreply.github.com"

      - name: üìù Update Version Files
        run: |
          TARGET_VERSION="${{ needs.validate-inputs.outputs.target_version }}"
          
          # Update release-please manifest
          if [[ -f ".github/config/.release-please-manifest.json" ]]; then
            jq --arg version "$TARGET_VERSION" '. = {".": $version}' .github/config/.release-please-manifest.json > tmp.json
            mv tmp.json .github/config/.release-please-manifest.json
          fi
          
          # Update package.json if exists
          if [[ -f "package.json" ]]; then
            jq --arg version "$TARGET_VERSION" '.version = $version' package.json > tmp.json
            mv tmp.json package.json
          fi
          
          # Update other version files as needed
          if [[ -f "pyproject.toml" ]]; then
            sed -i "s/^version = .*/version = \"$TARGET_VERSION\"/" pyproject.toml
          fi

      - name: üìÑ Update CHANGELOG.MD
        run: |
          TARGET_VERSION="${{ needs.validate-inputs.outputs.target_version }}"
          CHANGELOG_CONTENT="${{ needs.validate-inputs.outputs.changelog_content }}"
          
          # Create or update CHANGELOG.MD
          if [[ -f "CHANGELOG.MD" ]]; then
            # Prepend new changes to existing changelog
            {
              echo "$CHANGELOG_CONTENT"
              echo ""
              echo "---"
              echo ""
              cat CHANGELOG.MD
            } > tmp_changelog.md
            mv tmp_changelog.md CHANGELOG.MD
          else
            # Create new changelog
            echo "$CHANGELOG_CONTENT" > CHANGELOG.MD
          fi

      - name: üíæ Commit Version Changes
        run: |
          TARGET_VERSION="${{ needs.validate-inputs.outputs.target_version }}"
          
          git add .
          git commit -m "chore: release v$TARGET_VERSION

          - Update version to $TARGET_VERSION
          - Update CHANGELOG.MD with release notes
          - Prepare for release automation
          
          [skip ci]" || echo "No changes to commit"

      - name: üè∑Ô∏è Create Git Tag
        run: |
          TARGET_VERSION="${{ needs.validate-inputs.outputs.target_version }}"
          git tag -a "v$TARGET_VERSION" -m "Release v$TARGET_VERSION"

      - name: üì§ Push Changes
        run: |
          git push origin main
          git push origin --tags

      - name: üöÄ Create GitHub Release
        if: ${{ github.event.inputs.create_github_release == 'true' }}
        run: |
          TARGET_VERSION="${{ needs.validate-inputs.outputs.target_version }}"
          CHANGELOG_CONTENT="${{ needs.validate-inputs.outputs.changelog_content }}"
          
          # Create GitHub release using gh CLI
          gh release create "v$TARGET_VERSION" \
            --title "üöÄ Release v$TARGET_VERSION" \
            --notes "$CHANGELOG_CONTENT" \
            --latest
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  notify-completion:
    name: üì¢ Notify Release Completion
    runs-on: ubuntu-latest
    needs: [validate-inputs, create-release]
    if: always()
    
    steps:
      - name: üéâ Release Success Notification
        if: needs.create-release.result == 'success'
        run: |
          echo "‚úÖ Release v${{ needs.validate-inputs.outputs.target_version }} created successfully!"
          echo "üîó Check the release at: https://github.com/${{ github.repository }}/releases/tag/v${{ needs.validate-inputs.outputs.target_version }}"

      - name: ‚ùå Release Failure Notification
        if: needs.create-release.result == 'failure'
        run: |
          echo "‚ùå Release v${{ needs.validate-inputs.outputs.target_version }} failed!"
          echo "üîç Check the workflow logs for details."
          exit 1
