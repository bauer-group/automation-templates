name: 📦 Manual Release Management

on:
  workflow_dispatch:
    inputs:
      version_bump:
        description: 'Version bump type'
        required: true
        default: 'patch'
        type: choice
        options:
          - major
          - minor
          - patch
      custom_version:
        description: 'Custom version (optional, overrides bump type)'
        required: false
        type: string
      create_github_release:
        description: 'Create GitHub Release'
        required: true
        default: true
        type: boolean
      skip_tests:
        description: 'Skip tests and validations'
        required: false
        default: false
        type: boolean

permissions:
  contents: write
  pull-requests: write
  issues: write
  actions: write

env:
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

jobs:
  validate-inputs:
    name: 🔍 Validate Release Inputs
    runs-on: ubuntu-latest
    outputs:
      target_version: ${{ steps.version.outputs.target_version }}
      current_version: ${{ steps.version.outputs.current_version }}
      changelog_content: ${{ steps.changelog.outputs.content }}
    
    steps:
      - name: 📥 Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: 🏷️ Determine Target Version
        id: version
        run: |
          # Get current version from manifest or git tags
          if [[ -f ".github/config/.release-please-manifest.json" ]]; then
            CURRENT_VERSION=$(jq -r '."."' .github/config/.release-please-manifest.json)
          else
            # Fallback to git tags
            CURRENT_VERSION=$(git describe --tags --abbrev=0 2>/dev/null | sed 's/^v//' || echo "0.0.0")
          fi
          
          echo "Current version: $CURRENT_VERSION"
          
          # Use custom version if provided
          if [[ -n "${{ github.event.inputs.custom_version }}" ]]; then
            TARGET_VERSION="${{ github.event.inputs.custom_version }}"
          else
            # Calculate next version based on bump type
            IFS='.' read -r major minor patch <<< "$CURRENT_VERSION"
            
            case "${{ github.event.inputs.version_bump }}" in
              major)
                TARGET_VERSION="$((major + 1)).0.0"
                ;;
              minor)
                TARGET_VERSION="$major.$((minor + 1)).0"
                ;;
              patch)
                TARGET_VERSION="$major.$minor.$((patch + 1))"
                ;;
            esac
          fi
          
          echo "Target version: $TARGET_VERSION"
          echo "target_version=$TARGET_VERSION" >> $GITHUB_OUTPUT
          echo "current_version=$CURRENT_VERSION" >> $GITHUB_OUTPUT

      - name: 📝 Generate Changelog Content
        id: changelog
        run: |
          # Get commits since last release
          LAST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || git rev-list --max-parents=0 HEAD)
          
          echo "## 🚀 What's Changed in v${{ steps.version.outputs.target_version }}"
          echo ""
          
          # Generate changelog from commits
          CHANGELOG_CONTENT=$(cat <<EOF
          ## 🚀 What's Changed in v${{ steps.version.outputs.target_version }}
          
          ### 📋 Changes since v${{ steps.version.outputs.current_version }}
          
          $(git log ${LAST_TAG}..HEAD --pretty=format:"- %s" --reverse)
          
          ### 🔗 Full Changelog
          
          **Full Changelog**: https://github.com/${{ github.repository }}/compare/v${{ steps.version.outputs.current_version }}...v${{ steps.version.outputs.target_version }}
          
          ---
          
          *This release was created manually using the Enhanced Release Management workflow.*
          EOF
          )
          
          # Save changelog content
          echo "$CHANGELOG_CONTENT" > /tmp/changelog.md
          
          # Output for next job (escape newlines)
          {
            echo 'content<<EOF'
            echo "$CHANGELOG_CONTENT"
            echo 'EOF'
          } >> $GITHUB_OUTPUT

  security-scan:
    name: 🔒 Security & Compliance
    runs-on: ubuntu-latest
    needs: validate-inputs
    if: ${{ github.event.inputs.skip_tests != 'true' }}
    
    steps:
      - name: 📥 Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 🔍 Security Scan
        uses: ./.github/actions/security-scan
        with:
          severity-threshold: 'medium'
          upload-sarif: true

      - name: 🛡️ GitGuardian Scan
        uses: ./.github/actions/gitguardian-scan
        with:
          api-key: ${{ secrets.GITGUARDIAN_API_KEY }}
          
      - name: 📄 License Compliance
        uses: ./.github/actions/license-compliance

  create-release:
    name: 🏷️ Create Release
    runs-on: ubuntu-latest
    needs: [validate-inputs, security-scan]
    if: always() && (needs.security-scan.result == 'success' || github.event.inputs.skip_tests == 'true')
    
    steps:
      - name: 📥 Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: 🔧 Configure Git
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "41898282+github-actions[bot]@users.noreply.github.com"

      - name: 📝 Update Version Files
        run: |
          TARGET_VERSION="${{ needs.validate-inputs.outputs.target_version }}"
          
          # Update release-please manifest
          if [[ -f ".github/config/.release-please-manifest.json" ]]; then
            jq --arg version "$TARGET_VERSION" '. = {".": $version}' .github/config/.release-please-manifest.json > tmp.json
            mv tmp.json .github/config/.release-please-manifest.json
          fi
          
          # Update package.json if exists
          if [[ -f "package.json" ]]; then
            jq --arg version "$TARGET_VERSION" '.version = $version' package.json > tmp.json
            mv tmp.json package.json
          fi
          
          # Update other version files as needed
          if [[ -f "pyproject.toml" ]]; then
            sed -i "s/^version = .*/version = \"$TARGET_VERSION\"/" pyproject.toml
          fi

      - name: 📄 Update CHANGELOG.MD
        run: |
          TARGET_VERSION="${{ needs.validate-inputs.outputs.target_version }}"
          CHANGELOG_CONTENT="${{ needs.validate-inputs.outputs.changelog_content }}"
          
          # Create or update CHANGELOG.MD
          if [[ -f "CHANGELOG.MD" ]]; then
            # Prepend new changes to existing changelog
            {
              echo "$CHANGELOG_CONTENT"
              echo ""
              echo "---"
              echo ""
              cat CHANGELOG.MD
            } > tmp_changelog.md
            mv tmp_changelog.md CHANGELOG.MD
          else
            # Create new changelog
            echo "$CHANGELOG_CONTENT" > CHANGELOG.MD
          fi

      - name: 💾 Commit Version Changes
        run: |
          TARGET_VERSION="${{ needs.validate-inputs.outputs.target_version }}"
          
          git add .
          git commit -m "chore: release v$TARGET_VERSION

          - Update version to $TARGET_VERSION
          - Update CHANGELOG.MD with release notes
          - Prepare for release automation
          
          [skip ci]" || echo "No changes to commit"

      - name: 🏷️ Create Git Tag
        run: |
          TARGET_VERSION="${{ needs.validate-inputs.outputs.target_version }}"
          git tag -a "v$TARGET_VERSION" -m "Release v$TARGET_VERSION"

      - name: 📤 Push Changes
        run: |
          git push origin main
          git push origin --tags

      - name: 🚀 Create GitHub Release
        if: ${{ github.event.inputs.create_github_release == 'true' }}
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ needs.validate-inputs.outputs.target_version }}
          release_name: 🚀 Release v${{ needs.validate-inputs.outputs.target_version }}
          body: ${{ needs.validate-inputs.outputs.changelog_content }}
          draft: false
          prerelease: false

  notify-completion:
    name: 📢 Notify Release Completion
    runs-on: ubuntu-latest
    needs: [validate-inputs, create-release]
    if: always()
    
    steps:
      - name: 🎉 Release Success Notification
        if: needs.create-release.result == 'success'
        run: |
          echo "✅ Release v${{ needs.validate-inputs.outputs.target_version }} created successfully!"
          echo "🔗 Check the release at: https://github.com/${{ github.repository }}/releases/tag/v${{ needs.validate-inputs.outputs.target_version }}"

      - name: ❌ Release Failure Notification
        if: needs.create-release.result == 'failure'
        run: |
          echo "❌ Release v${{ needs.validate-inputs.outputs.target_version }} failed!"
          echo "🔍 Check the workflow logs for details."
          exit 1
