name: 📄 Documentation Management

on:
  push:
    branches: [ main ]
    paths: 
      - 'docs/README.template.MD'
      - 'scripts/generate_readme.py'
      - '.github/workflows/readme.yml'
      - '.github/actions/readme-generate/**'
  pull_request:
    branches: [ main ]
    paths:
      - 'docs/README.template.MD'
      - 'scripts/generate_readme.py'
  # schedule:
  #   # Daily at 02:00 UTC to update date-sensitive placeholders
  #   - cron: '0 2 * * *'
  workflow_dispatch:
    inputs:
      force-update:
        description: "Force README update even if no changes detected"
        type: boolean
        default: false
      custom-version:
        description: "Custom version to use in README (overrides git tag)"
        type: string
        default: ''
      skip-validation:
        description: "Skip README validation checks"
        type: boolean
        default: false

permissions:
  contents: write
  pull-requests: write
  issues: read
  actions: read

jobs:
  # Validate README template syntax and structure
  validate-template:
    name: 🔍 Validate README Template
    if: github.event_name == 'pull_request' || (github.event_name == 'workflow_dispatch' && !inputs.skip-validation)
    runs-on: ubuntu-latest
    
    steps:
      - name: 🚀 Checkout Repository
        uses: actions/checkout@v4

      - name: 🔍 Validate Template Syntax
        run: |
          TEMPLATE_FILE="docs/README.template.MD"
          
          if [ ! -f "$TEMPLATE_FILE" ]; then
            echo "❌ Template file not found: $TEMPLATE_FILE"
            exit 1
          fi
          
          echo "✅ Template file exists: $TEMPLATE_FILE"
          
          # Check for required placeholders
          REQUIRED_PLACEHOLDERS=("{{PROJECT_NAME}}" "{{VERSION}}" "{{DATE}}" "{{COMPANY_NAME}}")
          MISSING_PLACEHOLDERS=()
          
          for placeholder in "${REQUIRED_PLACEHOLDERS[@]}"; do
            if ! grep -q "$placeholder" "$TEMPLATE_FILE"; then
              MISSING_PLACEHOLDERS+=("$placeholder")
            fi
          done
          
          if [ ${#MISSING_PLACEHOLDERS[@]} -gt 0 ]; then
            echo "⚠️ Missing recommended placeholders:"
            for placeholder in "${MISSING_PLACEHOLDERS[@]}"; do
              echo "  - $placeholder"
            done
          else
            echo "✅ All recommended placeholders found"
          fi
          
          # Check for potential issues
          if grep -q "{{[^}]*}}" "$TEMPLATE_FILE"; then
            echo "📋 Found placeholders in template:"
            grep -o "{{[^}]*}}" "$TEMPLATE_FILE" | sort | uniq | head -10
          fi

      - name: 📊 Template Validation Summary
        run: |
          echo "### 🔍 README Template Validation" >> $GITHUB_STEP_SUMMARY
          echo "✅ Template syntax validation completed" >> $GITHUB_STEP_SUMMARY
          echo "📄 Template file: \`docs/README.template.MD\`" >> $GITHUB_STEP_SUMMARY

  # Main README generation job
  generate-readme:
    name: 📝 Generate README
    needs: validate-template
    if: always() && (needs.validate-template.result == 'success' || needs.validate-template.result == 'skipped')
    runs-on: ubuntu-latest
    outputs:
      readme_updated: ${{ steps.generate.outputs.readme_updated }}
      changes_detected: ${{ steps.generate.outputs.changes_detected }}
      validation_passed: ${{ steps.generate.outputs.validation_passed }}
    
    steps:
      - name: 🚀 Checkout Repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0

      - name: 🔧 Setup Environment
        run: |
          # Set custom version if provided
          if [ -n "${{ inputs.custom-version }}" ]; then
            echo "CUSTOM_VERSION=${{ inputs.custom-version }}" >> $GITHUB_ENV
          fi
          
          # Get latest git tag for version
          LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "0.1.0")
          echo "LATEST_TAG=${LATEST_TAG#v}" >> $GITHUB_ENV
          
          echo "🏷️ Using version: ${LATEST_TAG#v}"

      - name: 📝 Generate README
        id: generate
        uses: ./.github/actions/readme-generate
        with:
          template-path: 'docs/README.template.MD'
          output-path: 'README.MD'
          project-name: 'Automation Templates'
          company-name: 'BAUER GROUP'
          project-description: 'Zentrale GitHub Actions Templates und Workflows für automatisierte Entwicklungsprozesse'
          contact-email: 'support@bauer-group.com'
          documentation-url: 'https://github.com/bauer-group/automation-templates/wiki'
          support-url: 'https://github.com/bauer-group/automation-templates/issues'
          force-update: ${{ inputs.force-update || false }}
          custom-version: ${{ env.CUSTOM_VERSION || env.LATEST_TAG }}

      - name: 🔍 Validate Generated README
        id: validate
        run: |
          README_FILE="README.MD"
          
          if [ ! -f "$README_FILE" ]; then
            echo "❌ Generated README not found"
            echo "validation_passed=false" >> $GITHUB_OUTPUT
            exit 1
          fi
          
          # Check file size
          FILE_SIZE=$(wc -c < "$README_FILE")
          if [ "$FILE_SIZE" -lt 100 ]; then
            echo "❌ Generated README is too small (${FILE_SIZE} bytes)"
            echo "validation_passed=false" >> $GITHUB_OUTPUT
            exit 1
          fi
          
          # Check for unresolved placeholders
          UNRESOLVED=$(grep -o "{{[^}]*}}" "$README_FILE" | wc -l || echo "0")
          if [ "$UNRESOLVED" -gt 0 ]; then
            echo "⚠️ Found $UNRESOLVED unresolved placeholders:"
            grep -o "{{[^}]*}}" "$README_FILE" | sort | uniq
          fi
          
          # Check for required sections
          REQUIRED_SECTIONS=("# " "## ")
          for section in "${REQUIRED_SECTIONS[@]}"; do
            if ! grep -q "^$section" "$README_FILE"; then
              echo "⚠️ Missing section starting with: $section"
            fi
          done
          
          echo "✅ README validation completed"
          echo "📊 File size: ${FILE_SIZE} bytes"
          echo "🔗 Unresolved placeholders: $UNRESOLVED"
          echo "validation_passed=true" >> $GITHUB_OUTPUT

      - name: 📤 Commit and Push Changes
        if: steps.generate.outputs.changes_detected == 'true' && github.event_name != 'pull_request'
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "📄 README Bot"
          
          # Add more descriptive commit message
          COMMIT_MSG="docs: update README.MD"
          
          if [ "${{ github.event_name }}" = "schedule" ]; then
            COMMIT_MSG="$COMMIT_MSG (scheduled update)"
          elif [ "${{ inputs.force-update }}" = "true" ]; then
            COMMIT_MSG="$COMMIT_MSG (forced update)"
          elif [ -n "${{ inputs.custom-version }}" ]; then
            COMMIT_MSG="$COMMIT_MSG (version ${{ inputs.custom-version }})"
          fi
          
          COMMIT_MSG="$COMMIT_MSG [automated]"
          
          git add README.MD
          git commit -m "$COMMIT_MSG" || echo "No changes to commit"
          git push

      - name: 💬 Comment on PR
        if: github.event_name == 'pull_request' && steps.generate.outputs.changes_detected == 'true'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            
            let comment = '### 📄 README Update Preview\n\n';
            comment += '✅ README generation completed successfully\n';
            comment += `📊 Validation: ${{ steps.validate.outputs.validation_passed }}\n`;
            comment += `🔄 Changes detected: ${{ steps.generate.outputs.changes_detected }}\n\n`;
            comment += '**Generated README will be automatically updated when this PR is merged.**\n\n';
            
            if (fs.existsSync('README.MD')) {
              const stats = fs.statSync('README.MD');
              comment += `📏 File size: ${stats.size} bytes\n`;
            }
            
            comment += '\n---\n*Generated by README Documentation Management*';
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });

      - name: 📊 Generate Workflow Summary
        if: always()
        run: |
          echo "### 📄 README Documentation Management Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Field | Value |" >> $GITHUB_STEP_SUMMARY
          echo "|-------|-------|" >> $GITHUB_STEP_SUMMARY
          echo "| **Event** | ${{ github.event_name }} |" >> $GITHUB_STEP_SUMMARY
          echo "| **Branch** | ${{ github.ref_name }} |" >> $GITHUB_STEP_SUMMARY
          echo "| **Force Update** | ${{ inputs.force-update || 'false' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| **Custom Version** | ${{ inputs.custom-version || 'auto' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| **Skip Validation** | ${{ inputs.skip-validation || 'false' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| **Changes Detected** | ${{ steps.generate.outputs.changes_detected || 'unknown' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| **Validation Passed** | ${{ steps.validate.outputs.validation_passed || 'unknown' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| **README Updated** | ${{ steps.generate.outputs.readme_updated || 'unknown' }} |" >> $GITHUB_STEP_SUMMARY
          
          if [ "${{ steps.generate.outputs.changes_detected }}" = "true" ]; then
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "✅ **README successfully updated!**" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "**Updated content includes:**" >> $GITHUB_STEP_SUMMARY
            echo "- Current date and version information" >> $GITHUB_STEP_SUMMARY
            echo "- Repository metadata and badges" >> $GITHUB_STEP_SUMMARY
            echo "- Project description and contact information" >> $GITHUB_STEP_SUMMARY
          else
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "ℹ️ **No README updates required**" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "**Possible reasons:**" >> $GITHUB_STEP_SUMMARY
            echo "- No changes in template or metadata" >> $GITHUB_STEP_SUMMARY
            echo "- Generated content identical to existing README" >> $GITHUB_STEP_SUMMARY
          fi

  # Post-processing and quality checks
  post-process:
    name: 🎯 Post-Processing
    needs: generate-readme
    if: needs.generate-readme.outputs.readme_updated == 'true'
    runs-on: ubuntu-latest
    
    steps:
      - name: 🚀 Checkout Repository
        uses: actions/checkout@v4

      - name: 🔍 Quality Checks
        run: |
          echo "🔍 Running README quality checks..."
          
          README_FILE="README.MD"
          
          # Check for common issues
          if grep -q "http://" "$README_FILE"; then
            echo "⚠️ Found non-HTTPS URLs"
            grep -n "http://" "$README_FILE" || true
          fi
          
          # Check for broken internal links (basic check)
          if grep -q "\](\./" "$README_FILE"; then
            echo "🔗 Found relative links - verifying..."
            grep -o "]\(\.[^)]*\)" "$README_FILE" | while read -r link; do
              file_path=$(echo "$link" | sed 's/](\.\///; s/)//')
              if [ ! -f "$file_path" ] && [ ! -d "$file_path" ]; then
                echo "⚠️ Potentially broken link: $link"
              fi
            done
          fi
          
          # Generate metrics
          WORD_COUNT=$(wc -w < "$README_FILE")
          LINE_COUNT=$(wc -l < "$README_FILE")
          
          echo "📊 README Metrics:"
          echo "  - Words: $WORD_COUNT"
          echo "  - Lines: $LINE_COUNT"
          echo "  - Sections: $(grep -c '^##' "$README_FILE" || echo "0")"

      - name: 📊 Post-Processing Summary
        run: |
          echo "### 🎯 README Post-Processing Complete" >> $GITHUB_STEP_SUMMARY
          echo "✅ Quality checks completed" >> $GITHUB_STEP_SUMMARY
          echo "📊 README metrics generated" >> $GITHUB_STEP_SUMMARY
