name: 📦 Module | Release Management

on:
  workflow_call:
    inputs:
      release-type:
        description: 'Type of release (simple, node, python, rust, java, go, docker)'
        required: false
        type: string
        default: 'simple'
      force-release:
        description: 'Force create release (skip conventional commit check)'
        required: false
        type: boolean
        default: false
      auto-merge-enabled:
        description: 'Enable automatic PR merging'
        required: false
        type: boolean
        default: true
      cleanup-release-branch:
        description: 'Delete release branch after merge'
        required: false
        type: boolean
        default: true
      custom-version:
        description: 'Custom version (overrides automatic version calculation)'
        required: false
        type: string
        default: ''
      skip-github-release:
        description: 'Skip GitHub release creation'
        required: false
        type: boolean
        default: false
    secrets:
      GITGUARDIAN_API_KEY:
        description: 'GitGuardian API key'
        required: false
      GITLEAKS_LICENSE:
        description: 'Gitleaks Pro license key'
        required: false
    outputs:
      release-created:
        description: 'Whether a release was created'
        value: ${{ jobs.release-management.outputs.release-created }}
      tag-name:
        description: 'Git tag name for the release'
        value: ${{ jobs.release-management.outputs.tag-name }}
      version:
        description: 'Release version'
        value: ${{ jobs.release-management.outputs.version }}
      release-url:
        description: 'URL of the created release'
        value: ${{ jobs.release-management.outputs.release-url }}
      pr-number:
        description: 'Release PR number'
        value: ${{ jobs.release-management.outputs.pr-number }}
      pr-merged:
        description: 'Whether release PR was merged'
        value: ${{ jobs.release-management.outputs.pr-merged }}

permissions:
  contents: write
  pull-requests: write
  issues: write
  actions: write
  packages: write
  statuses: write
  checks: write

jobs:
  release-management:
    name: 📦 Release Processing
    runs-on: ubuntu-latest
    outputs:
      release-created: ${{ steps.release.outputs.release_created || steps.release-retry.outputs.release_created }}
      tag-name: ${{ steps.release.outputs.tag_name || steps.release-retry.outputs.tag_name }}
      version: ${{ steps.release.outputs.version || steps.release-retry.outputs.version }}
      release-url: ${{ steps.release.outputs.upload_url || steps.release-retry.outputs.upload_url }}
      pr-number: ${{ steps.release.outputs.pr || steps.release-retry.outputs.pr }}
      pr-merged: ${{ steps.release.outputs.pr_merged || steps.release-retry.outputs.pr_merged }}
    
    steps:
      - name: 🚀 Checkout Repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0
          
      - name: 🔧 Configure Git
        run: |
          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'
        
      - name: 🔍 Check for Existing Release PR
        id: check-pr
        run: |
          # Check if there's an existing release PR that might cause conflicts
          EXISTING_PR=$(gh pr list --state open --label "autorelease: pending" --json number --jq '.[0].number' || echo "")
          if [ -n "$EXISTING_PR" ]; then
            echo "Found existing release PR #$EXISTING_PR"
            echo "existing-pr=$EXISTING_PR" >> $GITHUB_OUTPUT
            
            # Try to close the old PR if it's from a bot
            PR_AUTHOR=$(gh pr view $EXISTING_PR --json author --jq '.author.login')
            if [[ "$PR_AUTHOR" == *"bot"* ]]; then
              echo "Closing old bot PR #$EXISTING_PR"
              gh pr close $EXISTING_PR --comment "Closing in favor of new release process" || true
            fi
          fi
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: 📝 Update Documentation
        continue-on-error: true
        run: |
          echo "Documentation update would be performed here"
          echo "Template: docs/README.template.MD"
          echo "Output: README.MD"
          # Note: Actual documentation update should be implemented as a separate job or composite action

      - name: 🚀 Enhanced Release Please (Attempt 1)
        id: release
        continue-on-error: true
        uses: googleapis/release-please-action@v4
        with:
          release-type: ${{ inputs.release-type }}
          token: ${{ secrets.GITHUB_TOKEN }}
          config-file: .github/config/release-please-config.json
          manifest-file: .github/config/.release-please-manifest.json
          
      - name: 🔄 Analyze Failure
        if: steps.release.outcome == 'failure'
        run: |
          echo "First attempt failed. Checking error type..."
          ERROR_OUTPUT="${{ steps.release.outputs.stderr }}"
          
          # Check for 5xx server errors
          if [[ "$ERROR_OUTPUT" =~ 5[0-9]{2} ]]; then
            echo "Server error detected (5xx), waiting 20 seconds before retry..."
            sleep 20
          # Check for rate limiting (429)
          elif [[ "$ERROR_OUTPUT" == *"429"* ]] || [[ "$ERROR_OUTPUT" == *"rate limit"* ]]; then
            echo "Rate limit detected, waiting 60 seconds before retry..."
            sleep 60
          # Check for permission errors
          elif [[ "$ERROR_OUTPUT" == *"Resource not accessible"* ]]; then
            echo "Permission error detected, retrying without delay..."
          # Check for network timeouts
          elif [[ "$ERROR_OUTPUT" == *"timeout"* ]] || [[ "$ERROR_OUTPUT" == *"ETIMEDOUT"* ]]; then
            echo "Network timeout detected, waiting 5 seconds before retry..."
            sleep 5
          else
            echo "Unknown error, retrying immediately..."
          fi
          
      - name: 🔄 Release Please (Retry)
        id: release-retry
        if: steps.release.outcome == 'failure'
        uses: googleapis/release-please-action@v4
        with:
          release-type: ${{ inputs.release-type }}
          token: ${{ secrets.GITHUB_TOKEN }}
          config-file: .github/config/release-please-config.json
          manifest-file: .github/config/.release-please-manifest.json

      - name: 🎯 Auto-Merge Release PR
        if: (steps.release.outputs.pr != '' || steps.release-retry.outputs.pr != '') && inputs.auto-merge-enabled == true
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "Auto-merging PR #${{ steps.release.outputs.pr }}"
          gh pr merge ${{ steps.release.outputs.pr }} \
            --squash \
            --auto \
            --delete-branch=${{ inputs.cleanup-release-branch }}

      - name: 📊 Release Management Summary
        if: always()
        run: |
          echo "### 🚀 Release Management Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Field | Value |" >> $GITHUB_STEP_SUMMARY
          echo "|-------|-------|" >> $GITHUB_STEP_SUMMARY
          echo "| **Release Type** | ${{ inputs.release-type }} |" >> $GITHUB_STEP_SUMMARY
          echo "| **Force Release** | ${{ inputs.force-release }} |" >> $GITHUB_STEP_SUMMARY
          echo "| **Auto-Merge** | ${{ inputs.auto-merge-enabled }} |" >> $GITHUB_STEP_SUMMARY
          echo "| **Cleanup Branch** | ${{ inputs.cleanup-release-branch }} |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "#### 📋 Release Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Metric | Value |" >> $GITHUB_STEP_SUMMARY
          echo "|--------|-------|" >> $GITHUB_STEP_SUMMARY
          echo "| **Release Created** | ${{ steps.release.outputs.release_created }} |" >> $GITHUB_STEP_SUMMARY
          
          if [ "${{ steps.release.outputs.release_created }}" = "true" ]; then
            echo "| **Version** | ${{ steps.release.outputs.version }} |" >> $GITHUB_STEP_SUMMARY
            echo "| **Tag** | ${{ steps.release.outputs.tag_name }} |" >> $GITHUB_STEP_SUMMARY
            echo "| **Release URL** | [View Release](${{ steps.release.outputs.upload_url }}) |" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "🎉 **Release successfully created!**" >> $GITHUB_STEP_SUMMARY
          elif [ "${{ steps.release.outputs.pr }}" != "" ]; then
            echo "| **PR Number** | [#${{ steps.release.outputs.pr }}](https://github.com/${{ github.repository }}/pull/${{ steps.release.outputs.pr }}) |" >> $GITHUB_STEP_SUMMARY
            echo "| **PR Status** | Open |" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "📝 **Release PR created and ready for review.**" >> $GITHUB_STEP_SUMMARY
          else
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "ℹ️ **No release action taken.** This usually means:" >> $GITHUB_STEP_SUMMARY
            echo "- No conventional commits since last release" >> $GITHUB_STEP_SUMMARY
            echo "- Only non-releasable changes (docs, chore, etc.)" >> $GITHUB_STEP_SUMMARY
            echo "- Release-Please PR already exists" >> $GITHUB_STEP_SUMMARY
          fi