name: 📦 Module | Release Management

on:
  workflow_call:
    inputs:
      release-type:
        description: 'Type of release (simple, node, python, rust, java, go, docker)'
        required: false
        type: string
        default: 'simple'
      target-branch:
        description: 'Target branch for releases (main, master, develop, etc.)'
        required: false
        type: string
        default: 'main'
      force-release:
        description: 'Force create release (skip conventional commit check)'
        required: false
        type: boolean
        default: false
      auto-merge-enabled:
        description: 'Enable automatic PR merging'
        required: false
        type: boolean
        default: true
      cleanup-release-branch:
        description: 'Delete release branch after merge'
        required: false
        type: boolean
        default: true
      custom-version:
        description: 'Custom version (overrides automatic version calculation)'
        required: false
        type: string
        default: ''
      skip-github-release:
        description: 'Skip GitHub release creation'
        required: false
        type: boolean
        default: false
    secrets:
      GITGUARDIAN_API_KEY:
        description: 'GitGuardian API key'
        required: false
      GITLEAKS_LICENSE:
        description: 'Gitleaks Pro license key'
        required: false
    outputs:
      release-created:
        description: 'Whether a release was created'
        value: ${{ jobs.release-management.outputs.release-created }}
      tag-name:
        description: 'Git tag name for the release'
        value: ${{ jobs.release-management.outputs.tag-name }}
      version:
        description: 'Release version'
        value: ${{ jobs.release-management.outputs.version }}
      release-url:
        description: 'URL of the created release'
        value: ${{ jobs.release-management.outputs.release-url }}
      pr-number:
        description: 'Release PR number'
        value: ${{ jobs.release-management.outputs.pr-number }}
      pr-merged:
        description: 'Whether release PR was merged'
        value: ${{ jobs.release-management.outputs.pr-merged }}

permissions:
  contents: write
  pull-requests: write
  issues: write
  actions: write
  packages: write
  statuses: write
  checks: write

jobs:
  release-management:
    name: 📦 Release Processing
    runs-on: ubuntu-latest
    outputs:
      release-created: ${{ steps.create-release.outputs.release-created }}
      tag-name: ${{ steps.create-release.outputs.tag }}
      version: ${{ steps.version.outputs.version }}
      release-url: ${{ steps.create-release.outputs.release-url }}
      pr-number: ${{ steps.create-pr.outputs.pr-number }}
      pr-merged: ${{ steps.merge.outputs.merged }}
    
    steps:
      - name: 🚀 Checkout Repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0
          
      - name: 🔧 Configure Git
        run: |
          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'
        

      - name: 📊 Determine Next Version
        id: version
        run: |
          echo "Determining next version..."
          
          # Get last tag
          LAST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.0.0")
          LAST_VERSION=${LAST_TAG#v}
          IFS='.' read -r MAJOR MINOR PATCH <<< "$LAST_VERSION"
          
          # Check for version bump type from commits
          COMMITS=$(git log ${LAST_TAG}..HEAD --oneline 2>/dev/null || git log --oneline)
          
          if [ -z "$COMMITS" ]; then
            echo "No new commits since last release"
            echo "release-needed=false" >> $GITHUB_OUTPUT
            exit 0
          fi
          
          if echo "$COMMITS" | grep -qE "BREAKING CHANGE|^[^:]+!:"; then
            NEW_VERSION="$((MAJOR + 1)).0.0"
            BUMP_TYPE="major"
          elif echo "$COMMITS" | grep -q "^feat"; then
            NEW_VERSION="${MAJOR}.$((MINOR + 1)).0"
            BUMP_TYPE="minor"
          elif echo "$COMMITS" | grep -q "^fix"; then
            NEW_VERSION="${MAJOR}.${MINOR}.$((PATCH + 1))"
            BUMP_TYPE="patch"
          else
            echo "No releasable changes (only chore, docs, etc.)"
            echo "release-needed=false" >> $GITHUB_OUTPUT
            exit 0
          fi
          
          echo "version=$NEW_VERSION" >> $GITHUB_OUTPUT
          echo "bump-type=$BUMP_TYPE" >> $GITHUB_OUTPUT
          echo "release-needed=true" >> $GITHUB_OUTPUT
          echo "Next version: v$NEW_VERSION ($BUMP_TYPE)"

      - name: 🆕 Create Release PR
        id: create-pr
        if: steps.version.outputs.release-needed == 'true'
        run: |
          VERSION="${{ steps.version.outputs.version }}"
          echo "Creating release PR for v${VERSION}..."
          
          # Check if our PR already exists
          EXISTING_PR=$(gh pr list --state open --head "release-v${VERSION}-auto" --json number --jq '.[0].number' || echo "")
          
          if [ -n "$EXISTING_PR" ]; then
            echo "Our release PR already exists: #$EXISTING_PR"
            echo "pr-number=$EXISTING_PR" >> $GITHUB_OUTPUT
            echo "pr-created=false" >> $GITHUB_OUTPUT
            exit 0
          fi
          
          # Create unique release branch
          BRANCH_NAME="release-v${VERSION}-auto"
          git checkout -b $BRANCH_NAME
          
          # Update version in manifest
          echo "{\".\": \"$VERSION\"}" > .github/config/.release-please-manifest.json
          
          # Generate changelog
          LAST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
          echo "# Changelog" > RELEASE_NOTES.md
          echo "" >> RELEASE_NOTES.md
          echo "## v${VERSION}" >> RELEASE_NOTES.md
          echo "" >> RELEASE_NOTES.md
          
          if [ -n "$LAST_TAG" ]; then
            git log ${LAST_TAG}..HEAD --pretty=format:"- %s (%h)" >> RELEASE_NOTES.md
          else
            git log --pretty=format:"- %s (%h)" >> RELEASE_NOTES.md
          fi
          
          # Commit changes
          git add .github/config/.release-please-manifest.json RELEASE_NOTES.md
          git commit -m "chore: release v${VERSION}"
          git push origin $BRANCH_NAME --force
          
          # Create PR
          PR_NUMBER=$(gh pr create \
            --title "chore: release v${VERSION}" \
            --body-file RELEASE_NOTES.md \
            --base ${{ inputs.target-branch }} \
            --head $BRANCH_NAME \
            --label "autorelease" \
            --json number --jq '.number')
          
          echo "pr-number=$PR_NUMBER" >> $GITHUB_OUTPUT
          echo "pr-created=true" >> $GITHUB_OUTPUT
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Created PR #$PR_NUMBER"
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: 🎯 Auto-Merge Release PR
        id: merge
        if: steps.create-pr.outputs.pr-number != '' && inputs.auto-merge-enabled == true
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          PR_NUMBER="${{ steps.create-pr.outputs.pr-number }}"
          echo "Auto-merging PR #${PR_NUMBER}..."
          
          # Enable auto-merge
          gh pr merge ${PR_NUMBER} \
            --squash \
            --auto \
            --delete-branch=${{ inputs.cleanup-release-branch }}
          
          echo "merged=true" >> $GITHUB_OUTPUT
          echo "PR #${PR_NUMBER} set to auto-merge"
          
      - name: 🏷️ Create Release
        id: create-release
        if: steps.create-pr.outputs.pr-created == 'true' && steps.merge.outputs.merged == 'true'
        run: |
          VERSION="${{ steps.version.outputs.version }}"
          TAG="v${VERSION}"
          
          # Wait for PR to be merged
          echo "Waiting for PR to be merged..."
          for i in {1..30}; do
            PR_STATE=$(gh pr view ${{ steps.create-pr.outputs.pr-number }} --json state --jq '.state')
            if [ "$PR_STATE" = "MERGED" ]; then
              echo "PR merged successfully"
              break
            fi
            sleep 2
          done
          
          # Create git tag
          git tag -a "$TAG" -m "Release $TAG"
          git push origin "$TAG"
          
          # Create GitHub release
          gh release create "$TAG" \
            --title "Release $TAG" \
            --notes-file RELEASE_NOTES.md \
            --target ${{ inputs.target-branch }}
          
          echo "release-created=true" >> $GITHUB_OUTPUT
          echo "tag=$TAG" >> $GITHUB_OUTPUT
          echo "release-url=https://github.com/${{ github.repository }}/releases/tag/$TAG" >> $GITHUB_OUTPUT
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: 📊 Release Management Summary
        if: always()
        run: |
          echo "### 🚀 Release Management Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Field | Value |" >> $GITHUB_STEP_SUMMARY
          echo "|-------|-------|" >> $GITHUB_STEP_SUMMARY
          echo "| **Release Type** | ${{ inputs.release-type }} |" >> $GITHUB_STEP_SUMMARY
          echo "| **Target Branch** | ${{ inputs.target-branch }} |" >> $GITHUB_STEP_SUMMARY
          echo "| **Force Release** | ${{ inputs.force-release }} |" >> $GITHUB_STEP_SUMMARY
          echo "| **Auto-Merge** | ${{ inputs.auto-merge-enabled }} |" >> $GITHUB_STEP_SUMMARY
          echo "| **Cleanup Branch** | ${{ inputs.cleanup-release-branch }} |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "#### 📋 Release Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Metric | Value |" >> $GITHUB_STEP_SUMMARY
          echo "|--------|-------|" >> $GITHUB_STEP_SUMMARY
          echo "| **Release Created** | ${{ steps.release.outputs.release_created }} |" >> $GITHUB_STEP_SUMMARY
          
          if [ "${{ steps.release.outputs.release_created }}" = "true" ]; then
            echo "| **Version** | ${{ steps.release.outputs.version }} |" >> $GITHUB_STEP_SUMMARY
            echo "| **Tag** | ${{ steps.release.outputs.tag_name }} |" >> $GITHUB_STEP_SUMMARY
            echo "| **Release URL** | [View Release](${{ steps.release.outputs.upload_url }}) |" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "🎉 **Release successfully created!**" >> $GITHUB_STEP_SUMMARY
          elif [ "${{ steps.release.outputs.pr }}" != "" ]; then
            echo "| **PR Number** | [#${{ steps.release.outputs.pr }}](https://github.com/${{ github.repository }}/pull/${{ steps.release.outputs.pr }}) |" >> $GITHUB_STEP_SUMMARY
            echo "| **PR Status** | Open |" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "📝 **Release PR created and ready for review.**" >> $GITHUB_STEP_SUMMARY
          else
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "ℹ️ **No release action taken.** This usually means:" >> $GITHUB_STEP_SUMMARY
            echo "- No conventional commits since last release" >> $GITHUB_STEP_SUMMARY
            echo "- Only non-releasable changes (docs, chore, etc.)" >> $GITHUB_STEP_SUMMARY
            echo "- Release-Please PR already exists" >> $GITHUB_STEP_SUMMARY
          fi