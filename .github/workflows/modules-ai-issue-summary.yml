name: üì¶ Module | AI Issue Summary

on:
  workflow_call:
    inputs:
      summary-type:
        description: 'Type of summary to generate (brief, detailed, technical, user-friendly)'
        required: false
        type: string
        default: 'brief'
      add-labels:
        description: 'Whether to add labels based on AI analysis'
        required: false
        type: boolean
        default: true
      add-priority:
        description: 'Whether to add priority labels based on AI analysis'
        required: false
        type: boolean
        default: true
      translate:
        description: 'Translate to language (leave empty for no translation)'
        required: false
        type: string
        default: ''
      custom-prompt:
        description: 'Custom prompt template (overrides default)'
        required: false
        type: string
        default: ''
      model:
        description: 'AI model to use'
        required: false
        type: string
        default: 'gpt-3.5-turbo'
      comment-template:
        description: 'Template for the comment (use {summary} placeholder)'
        required: false
        type: string
        default: |
          ## ü§ñ AI Summary
          
          {summary}
          
          ---
          *This summary was automatically generated by AI and may not be 100% accurate.*
    secrets:
      token:
        description: 'GitHub Token with issues write permission'
        required: false
      ai-api-key:
        description: 'API key for AI service (if using external service)'
        required: false

permissions:
  issues: write
  pull-requests: write
  models: read
  contents: read

jobs:
  summarize:
    name: üß† Generate AI Summary
    runs-on: ubuntu-latest
    
    steps:
      - name: üöÄ Checkout Repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.token || secrets.GITHUB_TOKEN }}
      
      - name: üìã Get Issue/PR Details
        id: details
        env:
          GITHUB_TOKEN: ${{ secrets.token || secrets.GITHUB_TOKEN }}
        run: |
          echo "üîç Extracting issue/PR details..."
          
          # Determine if this is an issue or PR
          if [ -n "${{ github.event.issue }}" ]; then
            echo "type=issue" >> $GITHUB_OUTPUT
            echo "number=${{ github.event.issue.number }}" >> $GITHUB_OUTPUT
            echo "title=${{ github.event.issue.title }}" >> $GITHUB_OUTPUT
            
            # Escape the body for JSON
            BODY=$(echo '${{ github.event.issue.body }}' | sed 's/"/\\"/g' | sed ':a;N;$!ba;s/\n/\\n/g')
            echo "body=$BODY" >> $GITHUB_OUTPUT
            
            echo "author=${{ github.event.issue.user.login }}" >> $GITHUB_OUTPUT
            echo "labels=${{ toJson(github.event.issue.labels.*.name) }}" >> $GITHUB_OUTPUT
            
          elif [ -n "${{ github.event.pull_request }}" ]; then
            echo "type=pull_request" >> $GITHUB_OUTPUT
            echo "number=${{ github.event.pull_request.number }}" >> $GITHUB_OUTPUT
            echo "title=${{ github.event.pull_request.title }}" >> $GITHUB_OUTPUT
            
            BODY=$(echo '${{ github.event.pull_request.body }}' | sed 's/"/\\"/g' | sed ':a;N;$!ba;s/\n/\\n/g')
            echo "body=$BODY" >> $GITHUB_OUTPUT
            
            echo "author=${{ github.event.pull_request.user.login }}" >> $GITHUB_OUTPUT
            echo "labels=${{ toJson(github.event.pull_request.labels.*.name) }}" >> $GITHUB_OUTPUT
          fi
      
      - name: üéØ Prepare Prompt
        id: prompt
        run: |
          echo "üìù Preparing AI prompt..."
          
          # Check if custom prompt is provided
          if [ -n "${{ inputs.custom-prompt }}" ]; then
            PROMPT="${{ inputs.custom-prompt }}"
          else
            # Build prompt based on summary type
            case "${{ inputs.summary-type }}" in
              "detailed")
                PROMPT="Provide a detailed analysis of the following GitHub ${{ steps.details.outputs.type }}:

          Title: ${{ steps.details.outputs.title }}
          Author: ${{ steps.details.outputs.author }}
          Body: ${{ steps.details.outputs.body }}

          Please include:
          1. A comprehensive summary of the issue/request
          2. Key points and requirements
          3. Potential impact and scope
          4. Suggested next steps
          5. Any missing information needed"
                ;;
              
              "technical")
                PROMPT="Provide a technical summary of the following GitHub ${{ steps.details.outputs.type }}:

          Title: ${{ steps.details.outputs.title }}
          Body: ${{ steps.details.outputs.body }}

          Focus on:
          - Technical requirements and constraints
          - Implementation considerations
          - Potential challenges
          - Architecture/design implications
          - Performance considerations"
                ;;
              
              "user-friendly")
                PROMPT="Provide a simple, non-technical summary of the following GitHub ${{ steps.details.outputs.type }}:

          Title: ${{ steps.details.outputs.title }}
          Body: ${{ steps.details.outputs.body }}

          Explain in plain language:
          - What the user is asking for
          - Why it might be important
          - What the expected outcome is
          Use simple terms and avoid technical jargon."
                ;;
              
              *)  # brief (default)
                PROMPT="Summarize the following GitHub ${{ steps.details.outputs.type }} in 2-3 concise sentences:

          Title: ${{ steps.details.outputs.title }}
          Body: ${{ steps.details.outputs.body }}

          Be clear and to the point."
                ;;
            esac
          fi
          
          # Add translation request if needed
          if [ -n "${{ inputs.translate }}" ]; then
            PROMPT="$PROMPT

          Please provide the summary in ${{ inputs.translate }} language."
          fi
          
          # Add labeling request if needed
          if [ "${{ inputs.add-labels }}" = "true" ]; then
            PROMPT="$PROMPT

          Additionally, suggest appropriate labels from this list: bug, enhancement, documentation, question, help-wanted, good-first-issue, breaking-change, performance, security, test"
          fi
          
          # Add priority request if needed
          if [ "${{ inputs.add-priority }}" = "true" ]; then
            PROMPT="$PROMPT

          Also, suggest a priority level: low, medium, high, critical"
          fi
          
          # Save prompt to file for the AI inference step
          echo "$PROMPT" > /tmp/prompt.txt
          echo "prompt-file=/tmp/prompt.txt" >> $GITHUB_OUTPUT
      
      - name: üß† Run AI Inference (GitHub Models)
        id: inference-github
        if: ${{ !inputs.custom-prompt || !contains(inputs.model, 'gpt') }}
        continue-on-error: true
        uses: actions/ai-inference@v1
        with:
          prompt-file: ${{ steps.prompt.outputs.prompt-file }}
          model: ${{ inputs.model }}
      
      - name: üß† Run AI Inference (OpenAI)
        id: inference-openai
        if: ${{ contains(inputs.model, 'gpt') }}
        continue-on-error: true
        env:
          OPENAI_API_KEY: ${{ secrets.ai-api-key }}
        run: |
          if [ -z "$OPENAI_API_KEY" ]; then
            echo "‚ö†Ô∏è OpenAI API key not configured, skipping..."
            exit 1
          fi
          
          echo "ü§ñ Using OpenAI API..."
          
          PROMPT=$(cat ${{ steps.prompt.outputs.prompt-file }})
          
          # Make API call to OpenAI
          RESPONSE=$(curl -s https://api.openai.com/v1/chat/completions \
            -H "Content-Type: application/json" \
            -H "Authorization: Bearer $OPENAI_API_KEY" \
            -d "{
              \"model\": \"${{ inputs.model }}\",
              \"messages\": [{\"role\": \"user\", \"content\": \"$PROMPT\"}],
              \"temperature\": 0.7,
              \"max_tokens\": 500
            }" | jq -r '.choices[0].message.content')
          
          if [ "$RESPONSE" = "null" ] || [ -z "$RESPONSE" ]; then
            echo "‚ö†Ô∏è Failed to get response from OpenAI"
            exit 1
          fi
          
          echo "response=$RESPONSE" >> $GITHUB_OUTPUT
      
      - name: üß† Fallback Summary (No AI)
        id: fallback
        if: ${{ steps.inference-github.outcome != 'success' && steps.inference-openai.outcome != 'success' }}
        run: |
          echo "‚ö†Ô∏è AI inference failed, generating basic summary..."
          
          # Generate a basic summary without AI
          SUMMARY="**Type:** ${{ steps.details.outputs.type }}
          **Title:** ${{ steps.details.outputs.title }}
          **Author:** @${{ steps.details.outputs.author }}
          
          This ${{ steps.details.outputs.type }} requires review. Please check the full description for details."
          
          echo "response=$SUMMARY" >> $GITHUB_OUTPUT
      
      - name: üìù Process AI Response
        id: process
        run: |
          echo "üîÑ Processing AI response..."
          
          # Get the response from whichever inference succeeded
          if [ "${{ steps.inference-github.outcome }}" = "success" ]; then
            RESPONSE="${{ steps.inference-github.outputs.response }}"
          elif [ "${{ steps.inference-openai.outcome }}" = "success" ]; then
            RESPONSE="${{ steps.inference-openai.outputs.response }}"
          else
            RESPONSE="${{ steps.fallback.outputs.response }}"
          fi
          
          # Extract labels if suggested
          if [ "${{ inputs.add-labels }}" = "true" ]; then
            # Try to extract labels from the response
            SUGGESTED_LABELS=$(echo "$RESPONSE" | grep -oE "(bug|enhancement|documentation|question|help-wanted|good-first-issue|breaking-change|performance|security|test)" | tr '\n' ' ' | xargs)
            echo "suggested-labels=$SUGGESTED_LABELS" >> $GITHUB_OUTPUT
          fi
          
          # Extract priority if suggested
          if [ "${{ inputs.add-priority }}" = "true" ]; then
            # Try to extract priority from the response
            SUGGESTED_PRIORITY=$(echo "$RESPONSE" | grep -oE "(priority:?\s*(low|medium|high|critical))" | grep -oE "(low|medium|high|critical)" | head -1)
            echo "suggested-priority=$SUGGESTED_PRIORITY" >> $GITHUB_OUTPUT
          fi
          
          # Clean up the summary (remove label/priority suggestions if they were requested separately)
          CLEAN_SUMMARY="$RESPONSE"
          if [ "${{ inputs.add-labels }}" = "true" ] || [ "${{ inputs.add-priority }}" = "true" ]; then
            # Remove lines that look like label or priority suggestions
            CLEAN_SUMMARY=$(echo "$RESPONSE" | sed '/^Labels:/d' | sed '/^Priority:/d' | sed '/^Suggested labels:/d' | sed '/^Suggested priority:/d')
          fi
          
          # Save clean summary
          echo "summary<<EOF" >> $GITHUB_OUTPUT
          echo "$CLEAN_SUMMARY" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
      
      - name: üí¨ Post Summary Comment
        env:
          GITHUB_TOKEN: ${{ secrets.token || secrets.GITHUB_TOKEN }}
        run: |
          echo "üí¨ Posting summary comment..."
          
          # Prepare comment using template
          COMMENT_TEMPLATE='${{ inputs.comment-template }}'
          SUMMARY='${{ steps.process.outputs.summary }}'
          
          # Replace {summary} placeholder
          COMMENT="${COMMENT_TEMPLATE//\{summary\}/$SUMMARY}"
          
          # Add label suggestions if any
          if [ -n "${{ steps.process.outputs.suggested-labels }}" ]; then
            COMMENT="$COMMENT

          **Suggested Labels:** ${{ steps.process.outputs.suggested-labels }}"
          fi
          
          # Add priority suggestion if any
          if [ -n "${{ steps.process.outputs.suggested-priority }}" ]; then
            COMMENT="$COMMENT
          **Suggested Priority:** ${{ steps.process.outputs.suggested-priority }}"
          fi
          
          # Post the comment
          gh issue comment ${{ steps.details.outputs.number }} --body "$COMMENT"
      
      - name: üè∑Ô∏è Apply Suggested Labels
        if: ${{ inputs.add-labels == true && steps.process.outputs.suggested-labels != '' }}
        env:
          GITHUB_TOKEN: ${{ secrets.token || secrets.GITHUB_TOKEN }}
        run: |
          echo "üè∑Ô∏è Applying suggested labels..."
          
          LABELS="${{ steps.process.outputs.suggested-labels }}"
          
          for LABEL in $LABELS; do
            echo "Adding label: $LABEL"
            gh issue edit ${{ steps.details.outputs.number }} --add-label "$LABEL" || echo "Failed to add label: $LABEL"
          done
      
      - name: üéØ Apply Priority Label
        if: ${{ inputs.add-priority == true && steps.process.outputs.suggested-priority != '' }}
        env:
          GITHUB_TOKEN: ${{ secrets.token || secrets.GITHUB_TOKEN }}
        run: |
          echo "üéØ Applying priority label..."
          
          PRIORITY="${{ steps.process.outputs.suggested-priority }}"
          
          if [ -n "$PRIORITY" ]; then
            gh issue edit ${{ steps.details.outputs.number }} --add-label "priority-$PRIORITY"
            echo "Added priority label: priority-$PRIORITY"
          fi
      
      - name: üìä Summary Report
        if: always()
        run: |
          echo "### ü§ñ AI Issue Summary Report" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Field | Value |" >> $GITHUB_STEP_SUMMARY
          echo "|-------|-------|" >> $GITHUB_STEP_SUMMARY
          echo "| **Type** | ${{ steps.details.outputs.type }} |" >> $GITHUB_STEP_SUMMARY
          echo "| **Number** | #${{ steps.details.outputs.number }} |" >> $GITHUB_STEP_SUMMARY
          echo "| **Title** | ${{ steps.details.outputs.title }} |" >> $GITHUB_STEP_SUMMARY
          echo "| **Author** | @${{ steps.details.outputs.author }} |" >> $GITHUB_STEP_SUMMARY
          echo "| **Summary Type** | ${{ inputs.summary-type }} |" >> $GITHUB_STEP_SUMMARY
          echo "| **Model** | ${{ inputs.model }} |" >> $GITHUB_STEP_SUMMARY
          echo "| **AI Service** | ${{ steps.inference-github.outcome == 'success' && 'GitHub Models' || steps.inference-openai.outcome == 'success' && 'OpenAI' || 'Fallback (No AI)' }} |" >> $GITHUB_STEP_SUMMARY
          
          if [ -n "${{ steps.process.outputs.suggested-labels }}" ]; then
            echo "| **Suggested Labels** | ${{ steps.process.outputs.suggested-labels }} |" >> $GITHUB_STEP_SUMMARY
          fi
          
          if [ -n "${{ steps.process.outputs.suggested-priority }}" ]; then
            echo "| **Suggested Priority** | ${{ steps.process.outputs.suggested-priority }} |" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "‚úÖ **Summary posted successfully**" >> $GITHUB_STEP_SUMMARY