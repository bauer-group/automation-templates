name: 🛒 Shopware 5 Plugin Build & Release

on:
  workflow_call:
    inputs:
      # Plugin Configuration
      plugin-name:
        description: 'Plugin name (will be extracted from composer.json if not provided)'
        type: string
        required: false
        default: ''

      plugin-system:
        description: 'Shopware 5 plugin system (legacy, modern, auto)'
        type: string
        required: false
        default: 'auto'

      # PHP Configuration
      php-version:
        description: 'PHP version to use'
        type: string
        required: false
        default: '7.4'

      # Shopware CLI Configuration
      shopware-cli-version:
        description: 'Shopware CLI version to use'
        type: string
        required: false
        default: 'latest'

      # Build Configuration
      build-command:
        description: 'Custom build command (optional)'
        type: string
        required: false
        default: ''

      node-build:
        description: 'Run Node.js build for frontend assets'
        type: boolean
        required: false
        default: false

      node-version:
        description: 'Node.js version for frontend build'
        type: string
        required: false
        default: '18.x'

      # Testing Configuration
      run-tests:
        description: 'Run PHPUnit tests'
        type: boolean
        required: false
        default: true

      test-command:
        description: 'Custom test command'
        type: string
        required: false
        default: ''

      # Code Quality
      run-phpcs:
        description: 'Run PHP CodeSniffer'
        type: boolean
        required: false
        default: true

      phpcs-standard:
        description: 'PHP CodeSniffer standard'
        type: string
        required: false
        default: 'PSR12'

      run-phpstan:
        description: 'Run PHPStan static analysis'
        type: boolean
        required: false
        default: true

      phpstan-level:
        description: 'PHPStan level'
        type: string
        required: false
        default: '5'

      # Store Integration
      validate-plugin:
        description: 'Validate plugin with shopware-cli'
        type: boolean
        required: false
        default: true

      update-store-page:
        description: 'Update store page on commit message [store update]'
        type: boolean
        required: false
        default: true

      upload-to-store:
        description: 'Upload to Shopware store (only on new version tags)'
        type: boolean
        required: false
        default: true

      # Release Configuration
      create-github-release:
        description: 'Create GitHub release for new versions'
        type: boolean
        required: false
        default: true

      auto-tag-version:
        description: 'Automatically create git tag from composer.json version'
        type: boolean
        required: false
        default: true

      # Changelog Configuration
      generate-changelog:
        description: 'Generate changelog from plugin zip'
        type: boolean
        required: false
        default: true

      # Security
      run-security-check:
        description: 'Run security vulnerability check'
        type: boolean
        required: false
        default: true

      # Deployment
      deploy-to-shop:
        description: 'Deploy to test shop instance'
        type: boolean
        required: false
        default: false

      shop-url:
        description: 'Shop URL for deployment'
        type: string
        required: false
        default: ''

      # Artifact Options
      artifact-retention-days:
        description: 'Days to retain artifacts'
        type: number
        required: false
        default: 90

      # Runner Configuration
      runs-on:
        description: 'Runner OS'
        type: string
        required: false
        default: 'ubuntu-latest'

      timeout-minutes:
        description: 'Job timeout in minutes'
        type: number
        required: false
        default: 30

    secrets:
      SHOPWARE_ACCOUNT_EMAIL:
        description: 'Shopware account email for store access'
        required: false

      SHOPWARE_ACCOUNT_PASSWORD:
        description: 'Shopware account password for store access'
        required: false

      SHOP_DEPLOY_TOKEN:
        description: 'Token for shop deployment'
        required: false

      COMPOSER_AUTH_JSON:
        description: 'Composer auth.json for private packages'
        required: false

    outputs:
      plugin-version:
        description: 'Plugin version from composer.json'
        value: ${{ jobs.build.outputs.plugin-version }}

      zip-filename:
        description: 'Generated plugin zip filename'
        value: ${{ jobs.build.outputs.zip-filename }}

      release-created:
        description: 'Whether a new release was created'
        value: ${{ jobs.build.outputs.release-created }}

      store-uploaded:
        description: 'Whether plugin was uploaded to store'
        value: ${{ jobs.build.outputs.store-uploaded }}

jobs:
  build:
    name: Build & Release Shopware 5 Plugin
    runs-on: ${{ inputs.runs-on }}
    timeout-minutes: ${{ inputs.timeout-minutes }}

    outputs:
      plugin-version: ${{ steps.version.outputs.version }}
      zip-filename: ${{ steps.zip.outputs.filename }}
      release-created: ${{ steps.release.outputs.created }}
      store-uploaded: ${{ steps.store-upload.outputs.uploaded }}

    env:
      SHOPWARE_CLI_ACCOUNT_EMAIL: ${{ secrets.SHOPWARE_ACCOUNT_EMAIL }}
      SHOPWARE_CLI_ACCOUNT_PASSWORD: ${{ secrets.SHOPWARE_ACCOUNT_PASSWORD }}

    steps:
      - name: 📥 Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 🔍 Detect Plugin System & Structure
        id: detect-system
        run: |
          PLUGIN_SYSTEM="${{ inputs.plugin-system }}"
          PLUGIN_ROOT_DIR="."

          echo "🔍 Searching for plugin files..."

          # Recursive search for plugin files (max depth 5 to handle nested structures)
          PLUGIN_XML=$(find . -maxdepth 5 -name "plugin.xml" -type f | head -1)
          PLUGIN_JSON=$(find . -maxdepth 5 -name "plugin.json" -type f | head -1)
          COMPOSER_JSON=$(find . -maxdepth 5 -name "composer.json" -type f | head -1)
          BOOTSTRAP_PHP=$(find . -maxdepth 5 -name "Bootstrap.php" -type f | head -1)

          # Determine plugin root directory (should be repository root, not plugin subdirectory)
          # For Shopware 5 plugins, the structure is:
          # - v5.1 (Legacy): repo-root/src/(Backend|Frontend|Core)/PluginName/
          # - v5.2 (Modern): repo-root/src/PluginName/
          # So PLUGIN_ROOT should always be "." (repository root)

          # Just log the found files for debugging
          [ -n "$PLUGIN_XML" ] && echo "Found plugin.xml at: $PLUGIN_XML"
          [ -n "$PLUGIN_JSON" ] && echo "Found plugin.json at: $PLUGIN_JSON"
          [ -n "$COMPOSER_JSON" ] && echo "Found composer.json at: $COMPOSER_JSON"

          if [ "$PLUGIN_SYSTEM" = "auto" ]; then
            # Auto-detect plugin system based on found files
            if [ -n "$PLUGIN_XML" ] && [ -n "$BOOTSTRAP_PHP" ]; then
              PLUGIN_SYSTEM="legacy"
              echo "✅ Detected Legacy Plugin System (Shopware 5.0 - 5.1)"
              echo "   - plugin.xml: $PLUGIN_XML"
              echo "   - Bootstrap.php: $BOOTSTRAP_PHP"
            elif [ -n "$COMPOSER_JSON" ] || [ -n "$PLUGIN_JSON" ]; then
              PLUGIN_SYSTEM="modern"
              echo "✅ Detected Modern Plugin System (Shopware 5.2+)"
              [ -n "$COMPOSER_JSON" ] && echo "   - composer.json: $COMPOSER_JSON"
              [ -n "$PLUGIN_JSON" ] && echo "   - plugin.json: $PLUGIN_JSON"
            else
              echo "⚠️ Could not detect plugin system, defaulting to modern"
              PLUGIN_SYSTEM="modern"
            fi
          fi

          # Export variables
          echo "plugin-system=$PLUGIN_SYSTEM" >> $GITHUB_OUTPUT
          echo "plugin-root=$PLUGIN_ROOT_DIR" >> $GITHUB_OUTPUT
          echo "plugin-xml=$PLUGIN_XML" >> $GITHUB_OUTPUT
          echo "plugin-json=$PLUGIN_JSON" >> $GITHUB_OUTPUT
          echo "composer-json=$COMPOSER_JSON" >> $GITHUB_OUTPUT
          echo "bootstrap-php=$BOOTSTRAP_PHP" >> $GITHUB_OUTPUT

          echo ""
          echo "📋 Detection Summary:"
          echo "   Plugin System: $PLUGIN_SYSTEM"
          echo "   Plugin Root: $PLUGIN_ROOT_DIR"

      - name: 🔧 Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ inputs.php-version }}
          extensions: mbstring, xml, curl, zip, intl, gd, mysql
          ini-values: error_reporting=E_ALL, display_errors=On
          coverage: none
          tools: composer:v2

      - name: 🔧 Setup Node.js
        if: inputs.node-build
        uses: actions/setup-node@v4
        with:
          node-version: ${{ inputs.node-version }}
          cache: 'npm'

      - name: 🔧 Install Shopware CLI
        uses: FriendsOfShopware/shopware-cli-action@v2
        with:
          version: ${{ inputs.shopware-cli-version }}

      - name: 🔐 Configure Composer Auth
        env:
          COMPOSER_AUTH: ${{ secrets.COMPOSER_AUTH_JSON }}
        if: env.COMPOSER_AUTH != ''
        run: |
          echo '${{ secrets.COMPOSER_AUTH_JSON }}' > auth.json
          composer config --global --auth --merge-auth auth.json
          rm auth.json
          echo "✅ Composer auth configured"

      - name: 📚 Install Composer Dependencies
        run: |
          COMPOSER_JSON="${{ steps.detect-system.outputs.composer-json }}"
          PLUGIN_ROOT="${{ steps.detect-system.outputs.plugin-root }}"

          if [ -n "$COMPOSER_JSON" ] && [ -f "$COMPOSER_JSON" ]; then
            echo "📦 Installing Composer dependencies in: $PLUGIN_ROOT"
            cd "$PLUGIN_ROOT"
            composer install --no-dev --prefer-dist --no-interaction --optimize-autoloader || {
              echo "⚠️ Composer install failed, continuing anyway"
              exit 0
            }
          else
            echo "ℹ️ No composer.json found, skipping dependency installation"
          fi

      - name: 📚 Install Node.js Dependencies
        if: inputs.node-build
        run: |
          PLUGIN_ROOT="${{ steps.detect-system.outputs.plugin-root }}"
          cd "$PLUGIN_ROOT"

          if [ -f "package.json" ]; then
            echo "📦 Installing Node.js dependencies in: $PLUGIN_ROOT"
            npm ci || npm install
          else
            echo "ℹ️ No package.json found in plugin root"
          fi

      - name: 🏗️ Build Frontend Assets
        if: inputs.node-build
        env:
          NODE_OPTIONS: --openssl-legacy-provider
        run: |
          PLUGIN_ROOT="${{ steps.detect-system.outputs.plugin-root }}"
          cd "$PLUGIN_ROOT"

          if [ -n "${{ inputs.build-command }}" ]; then
            echo "🔨 Running custom build command: ${{ inputs.build-command }}"
            ${{ inputs.build-command }}
          elif [ -f "package.json" ]; then
            echo "🔨 Running npm build script"
            npm run build || npm run prod || echo "⚠️ No build script found in package.json"
          else
            echo "⚠️ No package.json found, skipping frontend build"
          fi

      - name: 🏷️ Extract Plugin Information
        id: version
        run: |
          PLUGIN_NAME=""
          PLUGIN_VERSION=""
          PLUGIN_ROOT="${{ steps.detect-system.outputs.plugin-root }}"

          echo "📦 Extracting plugin information from: $PLUGIN_ROOT"
          echo ""

          # Try to extract from found files using saved paths
          COMPOSER_JSON="${{ steps.detect-system.outputs.composer-json }}"
          PLUGIN_JSON="${{ steps.detect-system.outputs.plugin-json }}"
          PLUGIN_XML="${{ steps.detect-system.outputs.plugin-xml }}"

          echo "🔍 Debug: Detected files:"
          echo "   COMPOSER_JSON: $COMPOSER_JSON"
          echo "   PLUGIN_JSON: $PLUGIN_JSON"
          echo "   PLUGIN_XML: $PLUGIN_XML"
          echo ""

          # Priority 1: Find BAUERGROUP* directory under /src or /src/(Core|Frontend|Backend)/
          echo "🔍 Searching for BAUERGROUP* plugin directory..."

          # Search in common plugin locations
          BAUERGROUP_DIR=""

          # Check /src/BAUERGROUP* (modern plugins)
          if [ -d "$PLUGIN_ROOT/src" ]; then
            BAUERGROUP_DIR=$(find "$PLUGIN_ROOT/src" -maxdepth 1 -type d -name "BAUERGROUP*" | head -1)
          fi

          # Check /src/(Core|Frontend|Backend)/BAUERGROUP* (legacy plugins)
          if [ -z "$BAUERGROUP_DIR" ]; then
            BAUERGROUP_DIR=$(find "$PLUGIN_ROOT/src" -maxdepth 2 -type d -path "*/Core/BAUERGROUP*" -o -path "*/Frontend/BAUERGROUP*" -o -path "*/Backend/BAUERGROUP*" | head -1)
          fi

          if [ -n "$BAUERGROUP_DIR" ]; then
            PLUGIN_NAME=$(basename "$BAUERGROUP_DIR")
            echo "   ✅ Found BAUERGROUP plugin directory: $PLUGIN_NAME"
            echo "   📁 Full path: $BAUERGROUP_DIR"
          else
            echo "   ⚠️ No BAUERGROUP* directory found, will try other methods"
          fi

          # Priority 2: plugin.json (for version extraction ONLY - name comes from directory)
          if [ -n "$PLUGIN_JSON" ] && [ -f "$PLUGIN_JSON" ]; then
            echo "📄 Reading from plugin.json: $PLUGIN_JSON"

            # Extract version - try currentVersion first (Shopware 5 standard)
            PLUGIN_VERSION_TMP=$(jq -r '.currentVersion // .version // empty' "$PLUGIN_JSON" 2>/dev/null)
            if [ -n "$PLUGIN_VERSION_TMP" ]; then
              PLUGIN_VERSION="$PLUGIN_VERSION_TMP"
              echo "   ✅ Version extracted: $PLUGIN_VERSION"
            else
              echo "   ⚠️ No version found in plugin.json"
            fi
            echo ""
          fi

          # Priority 3: plugin.xml (for version extraction ONLY - name comes from directory)
          if [ -z "$PLUGIN_VERSION" ]; then
            if [ -n "$PLUGIN_XML" ] && [ -f "$PLUGIN_XML" ]; then
              echo "📄 Reading from plugin.xml: $PLUGIN_XML"

              # Extract version
              if [ -z "$PLUGIN_VERSION" ]; then
                PLUGIN_VERSION_TMP=$(grep -oP '<version>\K[^<]+' "$PLUGIN_XML" 2>/dev/null | head -1)
                if [ -n "$PLUGIN_VERSION_TMP" ]; then
                  PLUGIN_VERSION="$PLUGIN_VERSION_TMP"
                  echo "   ✅ Version extracted: $PLUGIN_VERSION"
                else
                  echo "   ⚠️ No version found in plugin.xml"
                fi
              fi
              echo ""
            fi
          fi

          # Priority 4: composer.json (for version extraction ONLY - name comes from directory)
          if [ -z "$PLUGIN_VERSION" ]; then
            if [ -n "$COMPOSER_JSON" ] && [ -f "$COMPOSER_JSON" ]; then
              echo "📄 Reading from composer.json: $COMPOSER_JSON"

              # Extract version
              if [ -z "$PLUGIN_VERSION" ]; then
                PLUGIN_VERSION_TMP=$(jq -r '.version // empty' "$COMPOSER_JSON" 2>/dev/null)
                if [ -n "$PLUGIN_VERSION_TMP" ]; then
                  PLUGIN_VERSION="$PLUGIN_VERSION_TMP"
                  echo "   ✅ Version extracted: $PLUGIN_VERSION"
                else
                  echo "   ⚠️ No version found in composer.json"
                fi
              fi
              echo ""
            fi
          fi

          # Priority 5: Use input plugin-name if provided
          if [ -n "${{ inputs.plugin-name }}" ]; then
            PLUGIN_NAME="${{ inputs.plugin-name }}"
            echo "Using plugin name from input: $PLUGIN_NAME"
          fi

          # Fallback: Use repository name (only if no BAUERGROUP dir was found and no input provided)
          if [ -z "$PLUGIN_NAME" ]; then
            PLUGIN_NAME="${{ github.event.repository.name }}"
            echo "⚠️ No BAUERGROUP* directory found, using repository name as fallback: $PLUGIN_NAME"
          fi

          # Fallback version
          if [ -z "$PLUGIN_VERSION" ]; then
            PLUGIN_VERSION="0.0.0"
            echo "⚠️ No version found, using fallback: $PLUGIN_VERSION"
          fi

          echo "name=$PLUGIN_NAME" >> $GITHUB_OUTPUT
          echo "version=$PLUGIN_VERSION" >> $GITHUB_OUTPUT

          echo ""
          echo "✅ Plugin Information:"
          echo "   Name: $PLUGIN_NAME"
          echo "   Version: $PLUGIN_VERSION"
          echo "   Root: $PLUGIN_ROOT"

      - name: ✅ Validate Plugin Structure
        if: inputs.validate-plugin
        continue-on-error: true
        run: |
          echo "🔍 Validating plugin structure..."

          PLUGIN_ROOT="${{ steps.detect-system.outputs.plugin-root }}"
          PLUGIN_SYSTEM="${{ steps.detect-system.outputs.plugin-system }}"
          PLUGIN_NAME="${{ steps.version.outputs.name }}"

          cd "$PLUGIN_ROOT"

          if [ "$PLUGIN_SYSTEM" = "legacy" ]; then
            echo "Checking legacy plugin structure..."

            # Check for required legacy files
            PLUGIN_XML="${{ steps.detect-system.outputs.plugin-xml }}"
            BOOTSTRAP_PHP="${{ steps.detect-system.outputs.bootstrap-php }}"

            if [ -n "$PLUGIN_XML" ] && [ -f "$PLUGIN_XML" ]; then
              echo "✅ plugin.xml found: $PLUGIN_XML"
            else
              echo "❌ plugin.xml not found (required for legacy plugins)"
            fi

            if [ -n "$BOOTSTRAP_PHP" ] && [ -f "$BOOTSTRAP_PHP" ]; then
              echo "✅ Bootstrap.php found: $BOOTSTRAP_PHP"
            else
              echo "❌ Bootstrap.php not found (required for legacy plugins)"
            fi

            # Check for typical legacy directories
            [ -d "Views" ] && echo "✅ Views directory found" || echo "ℹ️ Views directory not found"
            [ -d "Snippets" ] && echo "✅ Snippets directory found" || echo "ℹ️ Snippets directory not found"

          else
            echo "Checking modern plugin structure..."

            # Check for required modern files
            COMPOSER_JSON="${{ steps.detect-system.outputs.composer-json }}"

            if [ -n "$COMPOSER_JSON" ] && [ -f "$COMPOSER_JSON" ]; then
              echo "✅ composer.json found: $COMPOSER_JSON"
            else
              echo "⚠️ composer.json not found (recommended for modern plugins)"
            fi

            # Find main plugin class
            PLUGIN_CLASS=$(find . -maxdepth 5 -name "${PLUGIN_NAME}.php" -type f | head -1)
            if [ -n "$PLUGIN_CLASS" ]; then
              echo "✅ Main plugin class found: $PLUGIN_CLASS"
            else
              echo "⚠️ Main plugin class ${PLUGIN_NAME}.php not found"
            fi

            # Check for Resources directory
            RESOURCES_DIR=$(find . -maxdepth 5 -type d -name "Resources" | head -1)
            if [ -n "$RESOURCES_DIR" ]; then
              echo "✅ Resources directory found: $RESOURCES_DIR"
            else
              echo "ℹ️ Resources directory not found"
            fi
          fi

      - name: 🧪 Run PHPUnit Tests
        if: inputs.run-tests
        continue-on-error: true
        run: |
          PLUGIN_ROOT="${{ steps.detect-system.outputs.plugin-root }}"
          cd "$PLUGIN_ROOT"

          # Check if phpunit config exists
          if [ ! -f "phpunit.xml" ] && [ ! -f "phpunit.xml.dist" ]; then
            echo "ℹ️ No PHPUnit configuration found, skipping tests"
            exit 0
          fi

          if [ -n "${{ inputs.test-command }}" ]; then
            echo "🧪 Running custom test command: ${{ inputs.test-command }}"
            ${{ inputs.test-command }}
          elif [ -f "vendor/bin/phpunit" ]; then
            echo "🧪 Running PHPUnit tests"
            vendor/bin/phpunit --colors=always
          else
            echo "⚠️ PHPUnit not found in vendor/bin, skipping tests"
          fi

      - name: 🔍 PHP CodeSniffer
        if: inputs.run-phpcs
        continue-on-error: true
        run: |
          PLUGIN_ROOT="${{ steps.detect-system.outputs.plugin-root }}"
          cd "$PLUGIN_ROOT"

          if [ -f "vendor/bin/phpcs" ]; then
            echo "🔍 Running PHP CodeSniffer (Standard: ${{ inputs.phpcs-standard }})"

            # Find source directories
            if [ -d "src" ]; then
              vendor/bin/phpcs --standard=${{ inputs.phpcs-standard }} --report=summary src/ || true
            elif [ -d "." ]; then
              # Scan current directory but exclude vendor
              vendor/bin/phpcs --standard=${{ inputs.phpcs-standard }} --report=summary --ignore=vendor . || true
            fi
          else
            echo "ℹ️ PHP CodeSniffer not installed, skipping..."
          fi

      - name: 🔬 PHPStan Analysis
        if: inputs.run-phpstan
        continue-on-error: true
        run: |
          PLUGIN_ROOT="${{ steps.detect-system.outputs.plugin-root }}"
          cd "$PLUGIN_ROOT"

          if [ -f "vendor/bin/phpstan" ]; then
            echo "🔬 Running PHPStan (Level: ${{ inputs.phpstan-level }})"

            # Find source directories
            if [ -d "src" ]; then
              vendor/bin/phpstan analyse --level=${{ inputs.phpstan-level }} --no-progress src/ || true
            elif [ -f "phpstan.neon" ] || [ -f "phpstan.neon.dist" ]; then
              # Use config file if available
              vendor/bin/phpstan analyse --level=${{ inputs.phpstan-level }} --no-progress || true
            else
              echo "ℹ️ No src/ directory or phpstan config found"
            fi
          else
            echo "ℹ️ PHPStan not installed, skipping..."
          fi

      - name: 🔒 Security Check
        if: inputs.run-security-check
        continue-on-error: true
        run: |
          PLUGIN_ROOT="${{ steps.detect-system.outputs.plugin-root }}"
          COMPOSER_LOCK="$PLUGIN_ROOT/composer.lock"

          if [ ! -f "$COMPOSER_LOCK" ]; then
            echo "ℹ️ No composer.lock found, skipping security check"
            exit 0
          fi

          echo "🔒 Running security vulnerability check"
          curl -L https://github.com/fabpot/local-php-security-checker/releases/download/v2.0.6/local-php-security-checker_2.0.6_linux_amd64 -o security-checker
          chmod +x security-checker

          cd "$PLUGIN_ROOT"
          ../security-checker || echo "⚠️ Security vulnerabilities found (non-blocking)"

      - name: 📦 Build & Create Plugin Zip
        id: zip
        env:
          NODE_OPTIONS: --openssl-legacy-provider
        run: |
          PLUGIN_NAME="${{ steps.version.outputs.name }}"
          PLUGIN_VERSION="${{ steps.version.outputs.version }}"
          PLUGIN_ROOT="${{ steps.detect-system.outputs.plugin-root }}"
          PLUGIN_SYSTEM="${{ steps.detect-system.outputs.plugin-system }}"
          WORK_DIR=$(pwd)

          echo "📦 Building plugin: $PLUGIN_NAME v$PLUGIN_VERSION"
          echo "   System: $PLUGIN_SYSTEM"
          echo "   Root: $PLUGIN_ROOT"

          # Create ZIP filename with version using repository name
          REPO_NAME="${{ github.event.repository.name }}"
          ZIP_FILENAME="${REPO_NAME}_${PLUGIN_VERSION}.zip"

          echo "   ZIP filename: $ZIP_FILENAME"

          # Strategy: Determine correct ZIP structure based on plugin system and directory layout
          cd "$PLUGIN_ROOT"

          # Detect actual plugin structure
          if [ "$PLUGIN_SYSTEM" = "legacy" ]; then
            # Legacy plugins (v5.0-5.1):
            # Repo structure: repo-root/src/(Backend|Frontend|Core)/PluginName/
            # ZIP should contain: (Backend|Frontend|Core)/PluginName/*

            if [ -d "src/Backend" ] || [ -d "src/Frontend" ] || [ -d "src/Core" ]; then
              ZIP_SOURCE="src"
              ZIP_STRUCTURE="legacy-with-namespace"
              echo "   ZIP source: src/ (Backend/Frontend/Core structure will be preserved)"
            elif [ -d "Backend" ] || [ -d "Frontend" ] || [ -d "Core" ]; then
              ZIP_SOURCE="."
              ZIP_STRUCTURE="legacy-root"
              echo "   ZIP source: . (Backend/Frontend/Core in root)"
            else
              ZIP_SOURCE="."
              ZIP_STRUCTURE="legacy-fallback"
              echo "   ⚠️ Legacy plugin but no Backend/Frontend/Core found, using root"
            fi

          else
            # Modern plugins (v5.2+):
            # Repo structure: repo-root/src/PluginName/
            # ZIP should contain: PluginName/*

            if [ -d "src/$PLUGIN_NAME" ]; then
              ZIP_SOURCE="src"
              ZIP_STRUCTURE="modern-plugin-folder"
              echo "   ZIP source: src/ (PluginName folder will be preserved)"
            elif [ -d "src" ]; then
              # Check if src contains the plugin files directly
              if [ -f "src/${PLUGIN_NAME}.php" ] || [ -f "src/plugin.json" ]; then
                # Need to create wrapper directory
                ZIP_SOURCE="src-wrapped"
                ZIP_STRUCTURE="modern-needs-wrapper"
                echo "   ZIP source: Creating wrapper directory for modern plugin"

                # Create temporary structure
                mkdir -p "/tmp/plugin-build-$$/$PLUGIN_NAME"
                cp -r src/* "/tmp/plugin-build-$$/$PLUGIN_NAME/"
                ZIP_SOURCE="/tmp/plugin-build-$$"
              else
                ZIP_SOURCE="src"
                ZIP_STRUCTURE="modern-src-content"
                echo "   ZIP source: src/ directory content"
              fi
            else
              ZIP_SOURCE="."
              ZIP_STRUCTURE="modern-root"
              echo "   ZIP source: plugin root content"
            fi
          fi

          # Create ZIP file
          ZIP_FILE="${WORK_DIR}/${ZIP_FILENAME}"

          echo "🔨 Creating ZIP: ${ZIP_FILENAME}"
          echo "   From directory: $ZIP_SOURCE"
          echo "   Structure type: $ZIP_STRUCTURE"

          cd "$ZIP_SOURCE"

          # Create ZIP with appropriate structure
          zip -r "$ZIP_FILE" . \
            -x "*.git*" \
            -x "*node_modules*" \
            -x "*tests*" \
            -x "*.idea*" \
            -x "*.vscode*" \
            -x "*.DS_Store" \
            -x "*phpunit.xml*" \
            -x "*.editorconfig" \
            -x "*.gitignore" \
            -x "*.gitattributes" \
            -x "*composer.lock" \
            -x "*.md" \
            -q

          # Cleanup temporary directory if created
          if [ "$ZIP_STRUCTURE" = "modern-needs-wrapper" ]; then
            rm -rf "/tmp/plugin-build-$$"
          fi

          cd "$WORK_DIR"

          if [ -f "$ZIP_FILE" ]; then
            echo "✅ Plugin zip created: ${ZIP_FILENAME}"
            echo "filename=${ZIP_FILENAME}" >> $GITHUB_OUTPUT

            # Verify ZIP structure
            echo ""
            echo "📋 ZIP Contents (first 30 entries):"
            unzip -l "$ZIP_FILE" | head -35

            # Count files in ZIP
            FILE_COUNT=$(unzip -l "$ZIP_FILE" | grep -c "^  [0-9]" || echo "0")
            ZIP_SIZE=$(ls -lh "$ZIP_FILE" | awk '{print $5}')

            echo ""
            echo "📊 ZIP Statistics:"
            echo "   Total files: $FILE_COUNT"
            echo "   File size: $ZIP_SIZE"

            # Verify essential files exist in root
            echo ""
            echo "🔍 Verifying ZIP structure:"

            if [ "$PLUGIN_SYSTEM" = "legacy" ]; then
              # Legacy: Expect plugin.xml and Bootstrap.php
              unzip -l "$ZIP_FILE" | grep -q "plugin\.xml" && echo "   ✅ plugin.xml found" || echo "   ⚠️ plugin.xml not found"
              unzip -l "$ZIP_FILE" | grep -q "Bootstrap\.php" && echo "   ✅ Bootstrap.php found" || echo "   ⚠️ Bootstrap.php not found"
            else
              # Modern: May have plugin.json or composer.json, not required
              unzip -l "$ZIP_FILE" | grep -q "plugin\.json" && echo "   ✅ plugin.json found" || echo "   ℹ️ plugin.json not found"
              unzip -l "$ZIP_FILE" | grep -q "composer\.json" && echo "   ℹ️ composer.json found" || echo "   ℹ️ composer.json not found"
              unzip -l "$ZIP_FILE" | grep -q "${PLUGIN_NAME}\.php" && echo "   ✅ ${PLUGIN_NAME}.php found" || echo "   ℹ️ Main class not found (might be in subdirectory)"
            fi

            echo ""
            echo "✅ ZIP created with files in root (no wrapper directory)"

          else
            echo "❌ Failed to create plugin zip"
            exit 1
          fi

      - name: 📤 Upload Plugin Artifact
        uses: actions/upload-artifact@v5
        with:
          name: ${{ steps.version.outputs.name }}
          path: ${{ steps.zip.outputs.filename }}
          retention-days: ${{ inputs.artifact-retention-days }}

      - name: ✅ Validate Plugin Zip
        if: inputs.validate-plugin
        run: |
          shopware-cli extension validate $(pwd)/${{ steps.zip.outputs.filename }}

      - name: 📝 Extract Changelog
        id: changelog
        if: inputs.generate-changelog
        run: |
          shopware-cli extension get-changelog $(pwd)/${{ steps.zip.outputs.filename }} > /tmp/changelog.txt

          # Display changelog
          echo "📝 Generated Changelog:"
          cat /tmp/changelog.txt

      - name: 🔍 Check if Version Tag Exists
        uses: mukunku/tag-exists-action@v1.6.0
        id: check-tag
        with:
          tag: ${{ steps.version.outputs.version }}
        env:
          GITHUB_TOKEN: ${{ github.token }}

      - name: 📄 Update Store Page
        if: inputs.update-store-page && contains(github.event.head_commit.message, '[store update]')
        continue-on-error: true
        run: |
          if [ -n "$SHOPWARE_CLI_ACCOUNT_EMAIL" ] && [ -n "$SHOPWARE_CLI_ACCOUNT_PASSWORD" ]; then
            shopware-cli account producer extension info push $(pwd)/
            echo "✅ Store page updated"
          else
            echo "⚠️ Store credentials not configured, skipping store page update"
          fi

      - name: 📤 Upload to Shopware Store
        id: store-upload
        if: inputs.upload-to-store && steps.check-tag.outputs.exists != 'true'
        continue-on-error: true
        run: |
          if [ -n "$SHOPWARE_CLI_ACCOUNT_EMAIL" ] && [ -n "$SHOPWARE_CLI_ACCOUNT_PASSWORD" ]; then
            shopware-cli account producer extension upload $(pwd)/${{ steps.zip.outputs.filename }}
            echo "uploaded=true" >> $GITHUB_OUTPUT
            echo "✅ Plugin uploaded to Shopware Store"
          else
            echo "uploaded=false" >> $GITHUB_OUTPUT
            echo "⚠️ Store credentials not configured, skipping upload"
          fi

      - name: 📦 Prepare Release Assets
        if: inputs.create-github-release && steps.check-tag.outputs.exists != 'true'
        run: |
          # Copy zip to temp location for release
          cp "${{ steps.zip.outputs.filename }}" /tmp/

          # Unzip for repository update
          unzip -o -q "${{ steps.zip.outputs.filename }}" -d ./toDeploy

          # Move files
          PLUGIN_NAME="${{ steps.version.outputs.name }}"
          if [ -d "./toDeploy/${PLUGIN_NAME}" ]; then
            # Clean current directory but keep git
            find ./ -maxdepth 1 ! -name "toDeploy" ! -name ".git" ! -name "." ! -name ".." -exec rm -rf {} \;

            # Move plugin files to root
            mv ./toDeploy/${PLUGIN_NAME}/* ./
            rm -rf ./toDeploy
            rm -rf ./vendor
          fi

      - name: 🏷️ Create Git Tag and Commit
        id: git-tag
        if: inputs.auto-tag-version && inputs.create-github-release && steps.check-tag.outputs.exists != 'true'
        run: |
          VERSION="${{ steps.version.outputs.version }}"

          git config user.name "GitHub Actions Bot"
          git config user.email "<>"
          git add -f .
          git commit -m "chore: Build release v${VERSION}" || echo "No changes to commit"
          git tag "${VERSION}"
          git push origin "${VERSION}"

          echo "✅ Created tag: ${VERSION}"

      - name: 🚀 Create GitHub Release
        id: release
        if: inputs.create-github-release && steps.check-tag.outputs.exists != 'true'
        uses: ncipollo/release-action@v1
        with:
          artifacts: /tmp/${{ steps.zip.outputs.filename }}
          tag: ${{ steps.version.outputs.version }}
          name: ${{ steps.version.outputs.version }}
          bodyFile: ${{ inputs.generate-changelog && '/tmp/changelog.txt' || '' }}
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ github.token }}

      - name: 🚀 Deploy to Shop
        if: inputs.deploy-to-shop && inputs.shop-url != ''
        run: |
          echo "🚀 Deploying plugin to shop: ${{ inputs.shop-url }}"
          # Add deployment logic here
          echo "⚠️ Deployment logic not implemented yet"

      - name: 📊 Build Summary
        if: always()
        run: |
          echo "### 🛒 Shopware 5 Plugin Build Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Component | Value |" >> $GITHUB_STEP_SUMMARY
          echo "|-----------|-------|" >> $GITHUB_STEP_SUMMARY
          echo "| **Plugin Name** | ${{ steps.version.outputs.name }} |" >> $GITHUB_STEP_SUMMARY
          echo "| **Version** | ${{ steps.version.outputs.version }} |" >> $GITHUB_STEP_SUMMARY
          echo "| **Plugin System** | ${{ steps.detect-system.outputs.plugin-system }} |" >> $GITHUB_STEP_SUMMARY
          echo "| **PHP Version** | ${{ inputs.php-version }} |" >> $GITHUB_STEP_SUMMARY
          echo "| **Zip File** | ${{ steps.zip.outputs.filename }} |" >> $GITHUB_STEP_SUMMARY
          echo "| **Store Upload** | ${{ steps.store-upload.outputs.uploaded == 'true' && '✅ Uploaded' || '⏭️ Skipped' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| **GitHub Release** | ${{ steps.release.outputs.id != '' && '✅ Created' || '⏭️ Skipped' }} |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          if [ "${{ steps.check-tag.outputs.exists }}" = "true" ]; then
            echo "ℹ️ **Note:** Version tag already exists, skipped release creation" >> $GITHUB_STEP_SUMMARY
          fi
