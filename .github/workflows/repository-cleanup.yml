name: 🧹 Repository Cleanup

# Manual repository cleanup workflow with comprehensive configuration options
# This workflow provides direct access to the repository cleanup functionality

on:
  workflow_dispatch:
    inputs:
      # Essential Configuration (Max 10 inputs allowed)
      cleanup-profile:
        description: 'Cleanup profile to use'
        type: choice
        required: true
        default: 'conservative'
        options:
          - 'conservative'
          - 'aggressive'
          - 'development'
          - 'maintenance'
          - 'emergency'
          - 'custom'
      
      confirm-cleanup:
        description: 'Type "CONFIRM" to proceed with cleanup'
        type: string
        required: true
        default: ''
      
      dry-run:
        description: 'Perform dry run (STRONGLY recommended for first use)'
        type: boolean
        required: false
        default: true
      
      target-repository:
        description: 'Target repository (leave empty for current repo)'
        type: string
        required: false
        default: ''
      
      max-age-days:
        description: 'Maximum age in days (0 = profile default)'
        type: number
        required: false
        default: 0
      
      # Custom Operations (only if profile is 'custom')
      custom-operations:
        description: 'Custom operations (comma-separated: releases,tags,branches,prs,workflows,issues)'
        type: string
        required: false
        default: 'releases,tags,workflows,prs,branches,issues'
      
      protected-branches:
        description: 'Protected branches (comma-separated, empty = profile default)'
        type: string
        required: false
        default: ''
      
      batch-size:
        description: 'Batch size (0 = profile default)'
        type: number
        required: false
        default: 0
      
      verbose-logging:
        description: 'Enable verbose logging'
        type: boolean
        required: false
        default: false
      
      force-operations:
        description: 'Override profile safety limits (use with extreme caution)'
        type: boolean
        required: false
        default: false

# Required permissions for repository cleanup
permissions:
  contents: write
  issues: write
  pull-requests: write
  actions: write

jobs:
  # Input validation and safety checks
  validate-inputs:
    name: 🔍 Validate Cleanup Configuration
    runs-on: ubuntu-latest
    
    outputs:
      proceed-with-cleanup: ${{ steps.validation.outputs.proceed }}
      effective-profile: ${{ steps.profile.outputs.effective-profile }}
      effective-max-age: ${{ steps.profile.outputs.effective-max-age }}
      effective-protected-branches: ${{ steps.profile.outputs.effective-protected-branches }}
      effective-batch-size: ${{ steps.profile.outputs.effective-batch-size }}
      cleanup-releases: ${{ steps.profile.outputs.cleanup-releases }}
      cleanup-tags: ${{ steps.profile.outputs.cleanup-tags }}
      cleanup-branches: ${{ steps.profile.outputs.cleanup-branches }}
      cleanup-pull-requests: ${{ steps.profile.outputs.cleanup-pull-requests }}
      cleanup-workflow-runs: ${{ steps.profile.outputs.cleanup-workflow-runs }}
      cleanup-issues: ${{ steps.profile.outputs.cleanup-issues }}
    
    steps:
      - name: 🔄 Checkout Repository
        uses: actions/checkout@v4
      
      - name: 🔍 Validate User Confirmation
        id: validation
        run: |
          echo "🔍 Validating cleanup configuration..."
          
          # Check confirmation
          if [[ "${{ github.event.inputs.confirm-cleanup }}" != "CONFIRM" ]]; then
            echo "❌ Cleanup not confirmed"
            echo "🛡️ Please type 'CONFIRM' exactly to proceed with cleanup"
            echo "This safety measure prevents accidental cleanup operations"
            echo "proceed=false" >> $GITHUB_OUTPUT
            exit 1
          fi
          
          # Validate cleanup profile
          PROFILE="${{ github.event.inputs.cleanup-profile }}"
          case "$PROFILE" in
            conservative|aggressive|development|maintenance|emergency|custom)
              echo "✅ Valid cleanup profile: $PROFILE"
              ;;
            *)
              echo "❌ Invalid cleanup profile: $PROFILE"
              echo "proceed=false" >> $GITHUB_OUTPUT
              exit 1
              ;;
          esac
          
          # Validate target repository format
          TARGET_REPO="${{ github.event.inputs.target-repository }}"
          if [[ -n "$TARGET_REPO" ]]; then
            if [[ ! "$TARGET_REPO" =~ ^[a-zA-Z0-9_.-]+/[a-zA-Z0-9_.-]+$ ]]; then
              echo "❌ Invalid repository format: $TARGET_REPO"
              echo "Expected format: owner/repo"
              echo "proceed=false" >> $GITHUB_OUTPUT
              exit 1
            fi
          fi
          
          # Validate numerical inputs
          MAX_AGE="${{ github.event.inputs.max-age-days }}"
          BATCH_SIZE="${{ github.event.inputs.batch-size }}"
          BATCH_DELAY="${{ github.event.inputs.batch-delay }}"
          
          if [[ ! "$MAX_AGE" =~ ^[0-9]+$ ]] || [[ "$MAX_AGE" -lt 0 ]]; then
            echo "❌ Invalid max-age-days: $MAX_AGE"
            echo "proceed=false" >> $GITHUB_OUTPUT
            exit 1
          fi
          
          # Validate batch size (0 means use profile default)
          if [[ ! "$BATCH_SIZE" =~ ^[0-9]+$ ]] || [[ "$BATCH_SIZE" -gt 100 ]]; then
            echo "❌ Invalid batch-size: $BATCH_SIZE"
            echo "Expected: 0 (profile default) or 1-100"
            echo "proceed=false" >> $GITHUB_OUTPUT
            exit 1
          fi
          
          if [[ "$BATCH_SIZE" -eq 0 ]]; then
            echo "✅ Batch size: Using profile default"
          else
            echo "✅ Batch size: $BATCH_SIZE items"
          fi
          
          echo "✅ Input validation completed"
          
          # Validate custom operations format if using custom profile
          PROFILE="${{ github.event.inputs.cleanup-profile }}"
          if [[ "$PROFILE" == "custom" ]]; then
            CUSTOM_OPS="${{ github.event.inputs.custom-operations }}"
            if [[ -z "$CUSTOM_OPS" ]]; then
              echo "❌ Custom operations required when using custom profile"
              echo "Please specify operations: releases,tags,branches,prs,workflows,issues"
              echo "proceed=false" >> $GITHUB_OUTPUT
              exit 1
            fi
            
            # Validate custom operations format
            if [[ ! "$CUSTOM_OPS" =~ ^[a-z,]+$ ]]; then
              echo "❌ Invalid custom operations format: $CUSTOM_OPS"
              echo "Use comma-separated values: releases,tags,branches,prs,workflows,issues"
              echo "proceed=false" >> $GITHUB_OUTPUT
              exit 1
            fi
            
            echo "✅ Custom operations validated: $CUSTOM_OPS"
          else
            echo "✅ Using predefined profile: $PROFILE"
          fi
          
          echo "✅ All validation checks passed"
          echo "proceed=true" >> $GITHUB_OUTPUT
      
      - name: ⚙️ Determine Effective Configuration
        id: profile
        run: |
          PROFILE="${{ github.event.inputs.cleanup-profile }}"
          
          echo "📋 Configuring cleanup for profile: $PROFILE"
          
          # Set default values based on profile
          case "$PROFILE" in
            conservative)
              MAX_AGE_DEFAULT=730  # 2 years
              PROTECTED_BRANCHES_DEFAULT="main,master,develop,development,staging,stage,production,prod,release,release/*,hotfix/*,support/*"
              BATCH_SIZE_DEFAULT=10
              ;;
            aggressive)
              MAX_AGE_DEFAULT=180  # 6 months
              PROTECTED_BRANCHES_DEFAULT="main,master"
              BATCH_SIZE_DEFAULT=50
              ;;
            development)
              MAX_AGE_DEFAULT=90   # 3 months
              PROTECTED_BRANCHES_DEFAULT="main,master,develop,development,staging,test"
              BATCH_SIZE_DEFAULT=25
              ;;
            maintenance)
              MAX_AGE_DEFAULT=365  # 1 year
              PROTECTED_BRANCHES_DEFAULT="main,master,develop,development,staging,stage,production,prod,release,release/*,hotfix/*,support/*"
              BATCH_SIZE_DEFAULT=30
              ;;
            emergency)
              MAX_AGE_DEFAULT=30   # 1 month
              PROTECTED_BRANCHES_DEFAULT="main,master"
              BATCH_SIZE_DEFAULT=100
              ;;
            custom)
              MAX_AGE_DEFAULT=365  # 1 year default
              PROTECTED_BRANCHES_DEFAULT="main,master"
              BATCH_SIZE_DEFAULT=50
              ;;
            *)
              echo "❌ Invalid profile: $PROFILE"
              exit 1
              ;;
          esac
          
          # Use user inputs or defaults
          EFFECTIVE_MAX_AGE=${{ github.event.inputs.max-age-days }}
          if [[ "$EFFECTIVE_MAX_AGE" -eq 0 ]]; then
            EFFECTIVE_MAX_AGE=$MAX_AGE_DEFAULT
          fi
          
          EFFECTIVE_PROTECTED_BRANCHES="${{ github.event.inputs.protected-branches }}"
          if [[ -z "$EFFECTIVE_PROTECTED_BRANCHES" ]]; then
            EFFECTIVE_PROTECTED_BRANCHES="$PROTECTED_BRANCHES_DEFAULT"
          fi
          
          EFFECTIVE_BATCH_SIZE=${{ github.event.inputs.batch-size }}
          if [[ "$EFFECTIVE_BATCH_SIZE" -eq 0 ]]; then
            EFFECTIVE_BATCH_SIZE=$BATCH_SIZE_DEFAULT
          fi
          
          echo "effective-profile=$PROFILE" >> $GITHUB_OUTPUT
          echo "effective-max-age=$EFFECTIVE_MAX_AGE" >> $GITHUB_OUTPUT
          echo "effective-protected-branches=$EFFECTIVE_PROTECTED_BRANCHES" >> $GITHUB_OUTPUT
          echo "effective-batch-size=$EFFECTIVE_BATCH_SIZE" >> $GITHUB_OUTPUT
          
          # Parse custom operations if using custom profile
          if [[ "$PROFILE" == "custom" ]]; then
            CUSTOM_OPS="${{ github.event.inputs.custom-operations }}"
            
            # Convert comma-separated operations to boolean flags
            if [[ "$CUSTOM_OPS" == *"releases"* ]]; then
              echo "cleanup-releases=true" >> $GITHUB_OUTPUT
            else
              echo "cleanup-releases=false" >> $GITHUB_OUTPUT
            fi
            
            if [[ "$CUSTOM_OPS" == *"tags"* ]]; then
              echo "cleanup-tags=true" >> $GITHUB_OUTPUT
            else
              echo "cleanup-tags=false" >> $GITHUB_OUTPUT
            fi
            
            if [[ "$CUSTOM_OPS" == *"branches"* ]]; then
              echo "cleanup-branches=true" >> $GITHUB_OUTPUT
            else
              echo "cleanup-branches=false" >> $GITHUB_OUTPUT
            fi
            
            if [[ "$CUSTOM_OPS" == *"prs"* ]]; then
              echo "cleanup-pull-requests=true" >> $GITHUB_OUTPUT
            else
              echo "cleanup-pull-requests=false" >> $GITHUB_OUTPUT
            fi
            
            if [[ "$CUSTOM_OPS" == *"workflows"* ]]; then
              echo "cleanup-workflow-runs=true" >> $GITHUB_OUTPUT
            else
              echo "cleanup-workflow-runs=false" >> $GITHUB_OUTPUT
            fi
            
            if [[ "$CUSTOM_OPS" == *"issues"* ]]; then
              echo "cleanup-issues=true" >> $GITHUB_OUTPUT
            else
              echo "cleanup-issues=false" >> $GITHUB_OUTPUT
            fi
          else
            # Use profile-based defaults
            case "$PROFILE" in
              conservative)
                echo "cleanup-releases=false" >> $GITHUB_OUTPUT
                echo "cleanup-tags=false" >> $GITHUB_OUTPUT
                echo "cleanup-branches=false" >> $GITHUB_OUTPUT
                echo "cleanup-pull-requests=false" >> $GITHUB_OUTPUT
                echo "cleanup-workflow-runs=true" >> $GITHUB_OUTPUT
                echo "cleanup-issues=false" >> $GITHUB_OUTPUT
                ;;
              aggressive)
                echo "cleanup-releases=true" >> $GITHUB_OUTPUT
                echo "cleanup-tags=true" >> $GITHUB_OUTPUT
                echo "cleanup-branches=true" >> $GITHUB_OUTPUT
                echo "cleanup-pull-requests=true" >> $GITHUB_OUTPUT
                echo "cleanup-workflow-runs=true" >> $GITHUB_OUTPUT
                echo "cleanup-issues=true" >> $GITHUB_OUTPUT
                ;;
              development)
                echo "cleanup-releases=false" >> $GITHUB_OUTPUT
                echo "cleanup-tags=false" >> $GITHUB_OUTPUT
                echo "cleanup-branches=true" >> $GITHUB_OUTPUT
                echo "cleanup-pull-requests=true" >> $GITHUB_OUTPUT
                echo "cleanup-workflow-runs=true" >> $GITHUB_OUTPUT
                echo "cleanup-issues=false" >> $GITHUB_OUTPUT
                ;;
              maintenance)
                echo "cleanup-releases=true" >> $GITHUB_OUTPUT
                echo "cleanup-tags=false" >> $GITHUB_OUTPUT
                echo "cleanup-branches=true" >> $GITHUB_OUTPUT
                echo "cleanup-pull-requests=true" >> $GITHUB_OUTPUT
                echo "cleanup-workflow-runs=true" >> $GITHUB_OUTPUT
                echo "cleanup-issues=false" >> $GITHUB_OUTPUT
                ;;
              emergency)
                echo "cleanup-releases=true" >> $GITHUB_OUTPUT
                echo "cleanup-tags=true" >> $GITHUB_OUTPUT
                echo "cleanup-branches=true" >> $GITHUB_OUTPUT
                echo "cleanup-pull-requests=true" >> $GITHUB_OUTPUT
                echo "cleanup-workflow-runs=true" >> $GITHUB_OUTPUT
                echo "cleanup-issues=true" >> $GITHUB_OUTPUT
                ;;
            esac
          fi
      
      - name: 📋 Generate Configuration Summary
        id: summary
        run: |
          echo "### 🧹 Repository Cleanup Configuration" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Execution Details:**" >> $GITHUB_STEP_SUMMARY
          echo "- 🎯 **Profile**: ${{ steps.profile.outputs.effective-profile }}" >> $GITHUB_STEP_SUMMARY
          echo "- 📁 **Repository**: ${{ github.event.inputs.target-repository || github.repository }}" >> $GITHUB_STEP_SUMMARY
          echo "- 🔧 **Mode**: ${{ github.event.inputs.dry-run == 'true' && '🔍 Dry Run' || '⚠️ LIVE EXECUTION' }}" >> $GITHUB_STEP_SUMMARY
          echo "- 📅 **Max Age**: ${{ steps.profile.outputs.effective-max-age }} days" >> $GITHUB_STEP_SUMMARY
          echo "- 🕐 **Timestamp**: $(date -u '+%Y-%m-%d %H:%M:%S UTC')" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          echo "**Cleanup Operations:**" >> $GITHUB_STEP_SUMMARY
          echo "- 🚀 Releases: ${{ steps.profile.outputs.cleanup-releases == 'true' && '✅ Enabled' || '❌ Disabled' }}" >> $GITHUB_STEP_SUMMARY
          echo "- 🏷️ Tags: ${{ steps.profile.outputs.cleanup-tags == 'true' && '✅ Enabled' || '❌ Disabled' }}" >> $GITHUB_STEP_SUMMARY
          echo "- 🌿 Branches: ${{ steps.profile.outputs.cleanup-branches == 'true' && '✅ Enabled' || '❌ Disabled' }}" >> $GITHUB_STEP_SUMMARY
          echo "- 🔀 Pull Requests: ${{ steps.profile.outputs.cleanup-pull-requests == 'true' && '✅ Enabled' || '❌ Disabled' }}" >> $GITHUB_STEP_SUMMARY
          echo "- ⚙️ Workflow Runs: ${{ steps.profile.outputs.cleanup-workflow-runs == 'true' && '✅ Enabled' || '❌ Disabled' }}" >> $GITHUB_STEP_SUMMARY
          echo "- 🐛 Issues: ${{ steps.profile.outputs.cleanup-issues == 'true' && '✅ Enabled' || '❌ Disabled' }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          echo "**Protection Settings:**" >> $GITHUB_STEP_SUMMARY
          echo "- 🛡️ Protected Branches: \`${{ steps.profile.outputs.effective-protected-branches }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- 📊 Batch Size: ${{ steps.profile.outputs.effective-batch-size }} items" >> $GITHUB_STEP_SUMMARY
          echo "- 📅 Max Age: ${{ steps.profile.outputs.effective-max-age }} days" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [[ "${{ github.event.inputs.dry-run }}" == "true" ]]; then
            echo "> 🔍 **Dry Run Mode**: No actual changes will be made. Review results carefully before running with dry-run: false" >> $GITHUB_STEP_SUMMARY
          else
            echo "> ⚠️ **LIVE EXECUTION**: This will permanently modify your repository. Ensure you have backups if needed." >> $GITHUB_STEP_SUMMARY
          fi

  # Execute the repository cleanup
  execute-repository-cleanup:
    name: 🧹 Execute Repository Cleanup
    needs: validate-inputs
    if: needs.validate-inputs.outputs.proceed-with-cleanup == 'true'
    uses: ./.github/workflows/modules-repository-cleanup.yml
    
    with:
      # Repository configuration
      target-repository: ${{ github.event.inputs.target-repository }}
      config-profile: ${{ needs.validate-inputs.outputs.effective-profile }}
      
      # Cleanup operations (determined by profile)
      cleanup-releases: ${{ needs.validate-inputs.outputs.cleanup-releases == 'true' }}
      cleanup-tags: ${{ needs.validate-inputs.outputs.cleanup-tags == 'true' }}
      cleanup-branches: ${{ needs.validate-inputs.outputs.cleanup-branches == 'true' }}
      cleanup-pull-requests: ${{ needs.validate-inputs.outputs.cleanup-pull-requests == 'true' }}
      cleanup-workflow-runs: ${{ needs.validate-inputs.outputs.cleanup-workflow-runs == 'true' }}
      cleanup-issues: ${{ needs.validate-inputs.outputs.cleanup-issues == 'true' }}
      
      # Age and filtering (using effective values)
      max-age-days: ${{ fromJSON(needs.validate-inputs.outputs.effective-max-age) }}
      protected-branches: ${{ needs.validate-inputs.outputs.effective-protected-branches }}
      
      # Use profile-appropriate patterns
      exclude-patterns: |
        [
          ".*keep.*",
          ".*important.*", 
          ".*preserve.*",
          ".*permanent.*",
          ".*lts.*",
          ".*stable.*"
        ]
      
      # PR handling
      pr-action: 'comment-and-close'
      pr-comment: |
        🧹 **Repository Cleanup Notice**
        
        This pull request is being closed as part of a repository cleanup operation.
        
        **Cleanup Details:**
        - Profile: ${{ needs.validate-inputs.outputs.effective-profile }}
        - Age Threshold: ${{ needs.validate-inputs.outputs.effective-max-age }} days
        - Execution: ${{ github.event.inputs.dry-run == 'true' && 'Dry Run' || 'Live Operation' }}
        
        **Why was this closed?**
        - This PR is older than ${{ needs.validate-inputs.outputs.effective-max-age }} days
        - It was included in our cleanup criteria based on the ${{ needs.validate-inputs.outputs.effective-profile }} profile
        - This helps maintain repository organization
        
        **To reopen this PR:**
        - Simply reopen it if it's still relevant
        - Add the `keep-open` label to prevent future cleanup
        - Contact repository maintainers if you have questions
        
        *This is an automated action by the BAUER GROUP Repository Cleanup system.*
      
      # Execution configuration (using effective values)
      dry-run: ${{ github.event.inputs.dry-run == 'true' }}
      batch-size: ${{ fromJSON(needs.validate-inputs.outputs.effective-batch-size) }}
      batch-delay: 3
      skip-confirmation: true
      force-delete: ${{ github.event.inputs.force-operations == 'true' }}
      
      # Reporting
      generate-report: true
      verbose: ${{ github.event.inputs.verbose-logging == 'true' }}
    
    secrets: inherit

  # Post-cleanup summary and recommendations
  cleanup-summary:
    name: 📊 Cleanup Summary & Recommendations
    needs: [validate-inputs, execute-repository-cleanup]
    if: always() && needs.validate-inputs.outputs.proceed-with-cleanup == 'true'
    runs-on: ubuntu-latest
    
    steps:
      - name: 📊 Generate Comprehensive Summary
        run: |
          echo "### 📊 Repository Cleanup Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Display execution results
          echo "**Execution Results:**" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ **Success**: ${{ needs.execute-repository-cleanup.outputs.cleanup-success }}" >> $GITHUB_STEP_SUMMARY
          echo "- 📈 **Items Processed**: ${{ needs.execute-repository-cleanup.outputs.items-processed || '0' }}" >> $GITHUB_STEP_SUMMARY
          echo "- 🗑️ **Items Deleted**: ${{ needs.execute-repository-cleanup.outputs.items-deleted || '0' }}" >> $GITHUB_STEP_SUMMARY
          echo "- ⏭️ **Items Skipped**: ${{ needs.execute-repository-cleanup.outputs.items-skipped || '0' }}" >> $GITHUB_STEP_SUMMARY
          echo "- ❌ **Errors**: ${{ needs.execute-repository-cleanup.outputs.errors-count || '0' }}" >> $GITHUB_STEP_SUMMARY
          echo "- ⏱️ **Duration**: ${{ needs.execute-repository-cleanup.outputs.execution-time || '0' }} seconds" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Profile-specific recommendations
          PROFILE="${{ needs.validate-inputs.outputs.effective-profile }}"
          ITEMS_DELETED=${{ needs.execute-repository-cleanup.outputs.items-deleted || '0' }}
          
          echo "**📋 Profile Analysis: $PROFILE**" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          case "$PROFILE" in
            conservative)
              echo "🛡️ **Conservative Profile Results:**" >> $GITHUB_STEP_SUMMARY
              if [[ "$ITEMS_DELETED" -gt 50 ]]; then
                echo "- Excellent cleanup results for conservative approach" >> $GITHUB_STEP_SUMMARY
                echo "- Consider scheduling monthly conservative cleanups" >> $GITHUB_STEP_SUMMARY
              else
                echo "- Repository is well-maintained" >> $GITHUB_STEP_SUMMARY
                echo "- Current maintenance practices are effective" >> $GITHUB_STEP_SUMMARY
              fi
              ;;
            aggressive)
              echo "🔥 **Aggressive Profile Results:**" >> $GITHUB_STEP_SUMMARY
              if [[ "$ITEMS_DELETED" -gt 200 ]]; then
                echo "- Significant cleanup achieved" >> $GITHUB_STEP_SUMMARY
                echo "- Repository storage substantially optimized" >> $GITHUB_STEP_SUMMARY
              else
                echo "- Repository was already well-maintained" >> $GITHUB_STEP_SUMMARY
                echo "- Limited cleanup opportunities available" >> $GITHUB_STEP_SUMMARY
              fi
              ;;
            development)
              echo "🔧 **Development Profile Results:**" >> $GITHUB_STEP_SUMMARY
              echo "- Development environment cleanup completed" >> $GITHUB_STEP_SUMMARY
              echo "- Consider running monthly for development repositories" >> $GITHUB_STEP_SUMMARY
              ;;
            maintenance)
              echo "🔄 **Maintenance Profile Results:**" >> $GITHUB_STEP_SUMMARY
              echo "- Regular maintenance cleanup completed" >> $GITHUB_STEP_SUMMARY
              echo "- Suitable for scheduled automation" >> $GITHUB_STEP_SUMMARY
              ;;
            emergency)
              echo "🚨 **Emergency Profile Results:**" >> $GITHUB_STEP_SUMMARY
              echo "- Emergency cleanup operation completed" >> $GITHUB_STEP_SUMMARY
              echo "- Review results carefully for any issues" >> $GITHUB_STEP_SUMMARY
              ;;
            custom)
              echo "🔧 **Custom Profile Results:**" >> $GITHUB_STEP_SUMMARY
              echo "- Custom configuration cleanup completed" >> $GITHUB_STEP_SUMMARY
              echo "- Review settings for future optimizations" >> $GITHUB_STEP_SUMMARY
              ;;
          esac
          
          if [[ "${{ github.event.inputs.dry-run }}" == "true" ]]; then
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "**🔍 Next Steps (Dry Run Complete):**" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "1. 📊 Review the cleanup results above" >> $GITHUB_STEP_SUMMARY
            echo "2. 🛡️ Verify the operations match your expectations" >> $GITHUB_STEP_SUMMARY
            echo "3. 🔧 Adjust configuration if needed" >> $GITHUB_STEP_SUMMARY
            echo "4. 🚀 Re-run with dry-run: false to execute actual cleanup" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "> 💡 **Tip**: Always test configuration changes with dry-run first!" >> $GITHUB_STEP_SUMMARY
          else
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "**🎉 Cleanup Complete!**" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "- Repository cleanup has been executed successfully" >> $GITHUB_STEP_SUMMARY
            echo "- All changes are permanent and cannot be undone" >> $GITHUB_STEP_SUMMARY
            echo "- Monitor repository for any unexpected issues" >> $GITHUB_STEP_SUMMARY
            echo "- Consider setting up regular maintenance schedules" >> $GITHUB_STEP_SUMMARY
          fi

      - name: ❌ Handle Cleanup Failures
        if: needs.execute-repository-cleanup.outputs.cleanup-success != 'true'
        run: |
          echo "### ❌ Cleanup Issues Detected" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "The cleanup operation completed with errors. Please review:" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Error Summary:**" >> $GITHUB_STEP_SUMMARY
          echo "- ❌ Errors: ${{ needs.execute-repository-cleanup.outputs.errors-count || 'Unknown' }}" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Successful: ${{ needs.execute-repository-cleanup.outputs.items-deleted || '0' }} items" >> $GITHUB_STEP_SUMMARY
          echo "- ⏭️ Skipped: ${{ needs.execute-repository-cleanup.outputs.items-skipped || '0' }} items" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Recommended Actions:**" >> $GITHUB_STEP_SUMMARY
          echo "1. 📋 Review the detailed cleanup logs above" >> $GITHUB_STEP_SUMMARY
          echo "2. 🔑 Check GitHub token permissions" >> $GITHUB_STEP_SUMMARY
          echo "3. 🛡️ Verify repository access and settings" >> $GITHUB_STEP_SUMMARY
          echo "4. 🔧 Adjust configuration and retry if needed" >> $GITHUB_STEP_SUMMARY
          echo "5. 📞 Contact repository administrators for assistance" >> $GITHUB_STEP_SUMMARY
          
          exit 1

      - name: 📋 Provide Usage Recommendations
        run: |
          echo "### 📋 Future Usage Recommendations" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          PROFILE="${{ needs.validate-inputs.outputs.effective-profile }}"
          
          echo "**🔗 Related Workflows:**" >> $GITHUB_STEP_SUMMARY
          echo "- [Scheduled Maintenance](./examples/repository-cleanup/scheduled-maintenance.yml)" >> $GITHUB_STEP_SUMMARY
          echo "- [Conservative Cleanup](./examples/repository-cleanup/conservative-cleanup.yml)" >> $GITHUB_STEP_SUMMARY
          echo "- [Aggressive Cleanup](./examples/repository-cleanup/aggressive-cleanup.yml)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          echo "**📚 Documentation:**" >> $GITHUB_STEP_SUMMARY
          echo "- [Repository Cleanup Action](./actions/repository-cleanup/README.md)" >> $GITHUB_STEP_SUMMARY
          echo "- [Configuration Profiles](./config/repository-cleanup/README.md)" >> $GITHUB_STEP_SUMMARY
          echo "- [Usage Examples](./examples/repository-cleanup/README.md)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          echo "*For questions or issues, please open a ticket in the automation templates repository.*"