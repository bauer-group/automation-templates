name: 'Enhanced Release Please'
description: 'Advanced release management with semantic versioning, security checks, and artifact generation'
author: 'BAUER GROUP'

inputs:
  release-type:
    description: 'Release-Type (simple, node, python, etc.)'
    required: false
    default: 'simple'
  package-name:
    description: 'Package Name für Release'
    required: false
    default: ''
  bump-minor-pre-major:
    description: 'Bump minor pre-major'
    required: false
    default: 'true'
  bump-patch-for-minor-pre-major:
    description: 'Bump patch for minor pre-major'
    required: false
    default: 'true'
  include-component-in-tag:
    description: 'Include component in tag'
    required: false
    default: 'false'
  draft:
    description: 'Create draft release'
    required: false
    default: 'false'
  prerelease:
    description: 'Mark as prerelease'
    required: false
    default: 'false'
  security-scan-enabled:
    description: 'Enable security scanning before release'
    required: false
    default: 'true'
  license-check-enabled:
    description: 'Enable license compliance checking'
    required: false
    default: 'true'
  artifact-generation-enabled:
    description: 'Enable artifact generation'
    required: false
    default: 'true'
  auto-merge-enabled:
    description: 'Enable auto-merge of release PR'
    required: false
    default: 'false'
  force-release:
    description: 'Force create release (skip conventional commit check)'
    required: false
    default: 'false'
  config-file:
    description: 'Path to release-please config file'
    required: false
    default: '.github/config/release-please-config.json'
  manifest-file:
    description: 'Path to release-please manifest file'
    required: false
    default: '.github/config/.release-please-manifest.json'
  token:
    description: 'GitHub Token'
    required: true

outputs:
  release_created:
    description: 'Whether a release was created'
    value: ${{ steps.release.outputs.release_created }}
  tag_name:
    description: 'The tag name of the release'
    value: ${{ steps.release.outputs.tag_name }}
  version:
    description: 'The version of the release'
    value: ${{ steps.release.outputs.version }}
  upload_url:
    description: 'Upload URL for release assets'
    value: ${{ steps.release.outputs.upload_url }}
  html_url:
    description: 'HTML URL of the release'
    value: ${{ steps.release.outputs.html_url }}
  pr_number:
    description: 'Release PR number (if created)'
    value: ${{ steps.release.outputs.pr_number }}
  pr_merged:
    description: 'Whether release PR was merged'
    value: ${{ steps.auto-merge.outputs.merged }}
  security_score:
    description: 'Security scan score'
    value: ${{ steps.security-scan.outputs.security-score }}
  license_compliance:
    description: 'License compliance status'
    value: ${{ steps.license-check.outputs.compliance-status }}
  artifacts_generated:
    description: 'Generated artifacts list'
    value: ${{ steps.artifacts.outputs.artifacts-generated }}

runs:
  using: 'composite'
  steps:
    - name: 🚀 Setup Enhanced Release Process
      shell: bash
      run: |
        echo "🚀 Initializing Enhanced Release Process"
        echo "Release Type: ${{ inputs.release-type }}"
        echo "Security Scan: ${{ inputs.security-scan-enabled }}"
        echo "License Check: ${{ inputs.license-check-enabled }}"
        echo "Artifact Generation: ${{ inputs.artifact-generation-enabled }}"
        echo "Auto Merge: ${{ inputs.auto-merge-enabled }}"
        echo "Force Release: ${{ inputs.force-release }}"

    - name: 🔍 Check Release Eligibility
      id: check-eligibility
      if: inputs.force-release != 'true'
      shell: bash
      run: |
        echo "🔍 Checking release eligibility..."
        
        # Check if there are any feat: or fix: commits since last release
        LAST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
        
        if [ -z "$LAST_TAG" ]; then
          echo "No previous tags found, proceeding with release"
          echo "eligible=true" >> $GITHUB_OUTPUT
          echo "reason=first-release" >> $GITHUB_OUTPUT
        else
          # Get commits since last tag
          COMMITS=$(git log ${LAST_TAG}..HEAD --oneline --grep="^feat" --grep="^fix" --grep="^feat!" || true)
          
          if [ -n "$COMMITS" ]; then
            echo "Found releasable commits since $LAST_TAG"
            echo "eligible=true" >> $GITHUB_OUTPUT
            echo "reason=releasable-commits" >> $GITHUB_OUTPUT
            echo "commits<<EOF" >> $GITHUB_OUTPUT
            echo "$COMMITS" >> $GITHUB_OUTPUT
            echo "EOF" >> $GITHUB_OUTPUT
          else
            echo "No releasable commits found since $LAST_TAG"
            echo "eligible=false" >> $GITHUB_OUTPUT
            echo "reason=no-releasable-commits" >> $GITHUB_OUTPUT
          fi
        fi

    - name: 🛡️ Security Scan
      id: security-scan
      if: |
        inputs.security-scan-enabled == 'true' && 
        (inputs.force-release == 'true' || steps.check-eligibility.outputs.eligible == 'true')
      uses: ./.github/actions/security-scan
      with:
        scan-type: 'all'
        fail-on-findings: 'false'
        token: ${{ inputs.token }}

    - name: 📋 License Compliance Check
      id: license-check
      if: |
        inputs.license-check-enabled == 'true' && 
        (inputs.force-release == 'true' || steps.check-eligibility.outputs.eligible == 'true')
      uses: ./.github/actions/license-compliance
      with:
        fail-on-forbidden: 'true'
        fail-on-unknown: 'false'
        scan-dependencies: 'true'
        generate-sbom: 'true'
        token: ${{ inputs.token }}

    - name: 🏷️ Get Previous Release Info
      id: previous-release
      if: inputs.force-release == 'true' || steps.check-eligibility.outputs.eligible == 'true'
      shell: bash
      run: |
        LAST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
        if [ -n "$LAST_TAG" ]; then
          echo "last-tag=$LAST_TAG" >> $GITHUB_OUTPUT
          echo "Previous release: $LAST_TAG"
        else
          echo "last-tag=" >> $GITHUB_OUTPUT
          echo "No previous release found"
        fi

    - name: 📦 Release Please
      id: release
      if: inputs.force-release == 'true' || steps.check-eligibility.outputs.eligible == 'true'
      uses: googleapis/release-please-action@v4
      with:
        config-file: ${{ inputs.config-file }}
        manifest-file: ${{ inputs.manifest-file }}
        token: ${{ inputs.token }}

    - name: 🔄 Auto Merge Release PR
      id: auto-merge
      if: |
        inputs.auto-merge-enabled == 'true' && 
        steps.release.outputs.pr_number != '' &&
        steps.release.outputs.release_created != 'true'
      uses: ./.github/actions/auto-merge
      with:
        pr-number: ${{ steps.release.outputs.pr_number }}
        merge-method: 'squash'
        auto-merge-enabled: 'true'
        required-checks: ''
        required-reviews: '0'
        allowed-authors: 'github-actions[bot],release-please[bot]'
        delete-branch-after-merge: 'true'
        token: ${{ inputs.token }}

    - name: 📦 Generate Release Artifacts
      id: artifacts
      if: |
        inputs.artifact-generation-enabled == 'true' && 
        steps.release.outputs.release_created == 'true'
      uses: ./.github/actions/artifact-generator
      with:
        artifact-types: 'source'
        tag-name: ${{ steps.release.outputs.tag_name }}
        version: ${{ steps.release.outputs.version }}
        upload-url: ${{ steps.release.outputs.upload_url }}
        source-formats: 'zip,tar.gz'
        token: ${{ inputs.token }}

    - name: 🎉 Release Success Notification
      if: steps.release.outputs.release_created == 'true'
      shell: bash
      run: |
        echo "🎉 Release created successfully!"
        echo "📋 Release Details:"
        echo "   • Tag: ${{ steps.release.outputs.tag_name }}"
        echo "   • Version: ${{ steps.release.outputs.version }}"
        echo "   • Type: ${{ inputs.release-type }}"
        echo "   • Package: ${{ inputs.package-name }}"
        
        if [ "${{ inputs.draft }}" == "true" ]; then
          echo "   • Status: Draft Release"
        elif [ "${{ inputs.prerelease }}" == "true" ]; then
          echo "   • Status: Pre-release"
        else
          echo "   • Status: Full Release"
        fi
        
        # Security and compliance info
        if [ "${{ inputs.security-scan-enabled }}" == "true" ]; then
          echo "   • Security Score: ${{ steps.security-scan.outputs.security-score || 'N/A' }}/100"
        fi
        
        if [ "${{ inputs.license-check-enabled }}" == "true" ]; then
          echo "   • License Compliance: ${{ steps.license-check.outputs.compliance-status || 'N/A' }}"
        fi
        
        if [ "${{ inputs.artifact-generation-enabled }}" == "true" ]; then
          echo "   • Artifacts: ${{ steps.artifacts.outputs.artifacts-generated || 'None' }}"
        fi
        
        echo ""
        echo "🔗 Release URL: ${{ steps.release.outputs.html_url }}"

    - name: ℹ️ No Release Info
      if: |
        steps.release.outputs.release_created != 'true' && 
        (inputs.force-release == 'true' || steps.check-eligibility.outputs.eligible == 'true')
      shell: bash
      run: |
        if [ "${{ steps.release.outputs.pr_number }}" != "" ]; then
          echo "📝 Release PR created: #${{ steps.release.outputs.pr_number }}"
          
          if [ "${{ inputs.auto-merge-enabled }}" == "true" ]; then
            if [ "${{ steps.auto-merge.outputs.merged }}" == "true" ]; then
              echo "✅ Release PR auto-merged successfully"
            else
              echo "⏳ Release PR created but not auto-merged"
              echo "   Check PR requirements and merge manually if needed"
            fi
          else
            echo "   Auto-merge disabled - manual review and merge required"
          fi
        else
          echo "ℹ️ No new release or PR created"
          echo "📋 Possible reasons:"
          echo "   • No conventional commits since last release"
          echo "   • Only non-releasable changes (docs, chore, etc.)"
          echo "   • Release-Please PR already exists"
        fi
        
        echo ""
        echo "💡 To trigger a release, ensure commits follow conventional format:"
        echo "   • feat: for new features"
        echo "   • fix: for bug fixes"
        echo "   • feat!: for breaking changes"

    - name: ⚠️ Release Not Eligible
      if: inputs.force-release != 'true' && steps.check-eligibility.outputs.eligible != 'true'
      shell: bash
      run: |
        echo "ℹ️ Release not eligible"
        echo "Reason: ${{ steps.check-eligibility.outputs.reason }}"
        echo ""
        echo "💡 To create a release:"
        echo "   • Add feat: or fix: commits"
        echo "   • Use --force-release flag to override"

    - name: 📊 Generate Release Metrics
      if: steps.release.outputs.release_created == 'true'
      shell: bash
      run: |
        LAST_TAG="${{ steps.previous-release.outputs.last-tag }}"
        CURRENT_TAG="${{ steps.release.outputs.tag_name }}"
        
        if [ -n "$LAST_TAG" ] && [ "$LAST_TAG" != "$CURRENT_TAG" ]; then
          echo "📈 Release Metrics ($LAST_TAG → $CURRENT_TAG):"
          
          # Count commits
          COMMIT_COUNT=$(git rev-list --count $LAST_TAG..$CURRENT_TAG 2>/dev/null || echo "0")
          echo "   • Commits: $COMMIT_COUNT"
          
          # Count contributors
          CONTRIBUTOR_COUNT=$(git shortlog -sn $LAST_TAG..$CURRENT_TAG | wc -l 2>/dev/null || echo "0")
          echo "   • Contributors: $CONTRIBUTOR_COUNT"
          
          # Categorize commits
          FEAT_COUNT=$(git log $LAST_TAG..$CURRENT_TAG --oneline --grep="^feat" | wc -l 2>/dev/null || echo "0")
          FIX_COUNT=$(git log $LAST_TAG..$CURRENT_TAG --oneline --grep="^fix" | wc -l 2>/dev/null || echo "0")
          BREAKING_COUNT=$(git log $LAST_TAG..$CURRENT_TAG --oneline --grep="!" | wc -l 2>/dev/null || echo "0")
          
          echo "   • Features: $FEAT_COUNT"
          echo "   • Bug Fixes: $FIX_COUNT"
          echo "   • Breaking Changes: $BREAKING_COUNT"
          
          # Security and compliance metrics
          if [ "${{ inputs.security-scan-enabled }}" == "true" ]; then
            echo "   • Security Score: ${{ steps.security-scan.outputs.security-score || 'N/A' }}/100"
          fi
          
          if [ "${{ inputs.license-check-enabled }}" == "true" ]; then
            echo "   • License Status: ${{ steps.license-check.outputs.compliance-status || 'N/A' }}"
          fi
        else
          echo "📈 First release - no comparison available"
        fi

    - name: 📋 Generate Comprehensive Summary
      if: always()
      shell: bash
      run: |
        echo "📋 Enhanced Release Process Summary"
        echo "=================================="
        echo ""
        echo "🔧 Configuration:"
        echo "  • Release Type: ${{ inputs.release-type }}"
        echo "  • Security Scan: ${{ inputs.security-scan-enabled }}"
        echo "  • License Check: ${{ inputs.license-check-enabled }}"
        echo "  • Artifact Generation: ${{ inputs.artifact-generation-enabled }}"
        echo "  • Auto Merge: ${{ inputs.auto-merge-enabled }}"
        echo "  • Force Release: ${{ inputs.force-release }}"
        echo ""
        echo "📊 Results:"
        echo "  • Eligible: ${{ steps.check-eligibility.outputs.eligible || 'force' }}"
        echo "  • Release Created: ${{ steps.release.outputs.release_created || 'false' }}"
        echo "  • PR Number: ${{ steps.release.outputs.pr_number || 'none' }}"
        echo "  • PR Merged: ${{ steps.auto-merge.outputs.merged || 'false' }}"
        
        if [ "${{ inputs.security-scan-enabled }}" == "true" ]; then
          echo "  • Security Score: ${{ steps.security-scan.outputs.security-score || 'N/A' }}/100"
        fi
        
        if [ "${{ inputs.license-check-enabled }}" == "true" ]; then
          echo "  • License Compliance: ${{ steps.license-check.outputs.compliance-status || 'N/A' }}"
        fi
        
        if [ "${{ inputs.artifact-generation-enabled }}" == "true" ]; then
          echo "  • Artifacts Generated: ${{ steps.artifacts.outputs.artifacts-generated || 'none' }}"
        fi
        
        echo ""
        if [ "${{ steps.release.outputs.release_created }}" == "true" ]; then
          echo "✅ Release completed successfully!"
          echo "🔗 Release: ${{ steps.release.outputs.html_url }}"
        elif [ "${{ steps.release.outputs.pr_number }}" != "" ]; then
          echo "📝 Release PR created: #${{ steps.release.outputs.pr_number }}"
        else
          echo "ℹ️ No release action taken"
        fi

branding:
  icon: 'package'
  color: 'green'
