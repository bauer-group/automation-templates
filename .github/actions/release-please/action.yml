name: 'Enhanced Release Please'
description: 'Advanced release management with semantic versioning, security checks, and artifact generation'
author: 'BAUER GROUP'

inputs:
  release-type:
    description: 'Release-Type (simple, node, python, etc.)'
    required: false
    default: 'simple'
  package-name:
    description: 'Package Name f√ºr Release'
    required: false
    default: ''
  bump-minor-pre-major:
    description: 'Bump minor pre-major'
    required: false
    default: 'true'
  bump-patch-for-minor-pre-major:
    description: 'Bump patch for minor pre-major'
    required: false
    default: 'true'
  include-component-in-tag:
    description: 'Include component in tag'
    required: false
    default: 'false'
  draft:
    description: 'Create draft release'
    required: false
    default: 'false'
  prerelease:
    description: 'Mark as prerelease'
    required: false
    default: 'false'
  security-scan-enabled:
    description: 'Enable security scanning before release'
    required: false
    default: 'true'
  license-check-enabled:
    description: 'Enable license compliance checking'
    required: false
    default: 'true'
  artifact-generation-enabled:
    description: 'Enable artifact generation'
    required: false
    default: 'true'
  auto-merge-enabled:
    description: 'Enable auto-merge of release PR'
    required: false
    default: 'false'
  force-release:
    description: 'Force create release (skip conventional commit check)'
    required: false
    default: 'false'
  security-scan-engine:
    description: 'Security scanning engine (gitleaks, gitguardian, both)'
    required: false
    default: 'both'
  gitleaks-license:
    description: 'Gitleaks Pro license key for Organizations'
    required: false
    default: ''
  gitguardian-api-key:
    description: 'GitGuardian API key for enhanced scanning'
    required: false
    default: ''
  cleanup-release-branch:
    description: 'Delete release branch after successful merge'
    required: false
    default: 'true'
  config-file:
    description: 'Path to release-please config file'
    required: false
    default: '.github/config/release-please-config.json'
  manifest-file:
    description: 'Path to release-please manifest file'
    required: false
    default: '.github/config/.release-please-manifest.json'
  token:
    description: 'GitHub Token'
    required: true

outputs:
  release_created:
    description: 'Whether a release was created'
    value: ${{ steps.release.outputs.release_created || steps.release-retry.outputs.release_created }}
  tag_name:
    description: 'The tag name of the release'
    value: ${{ steps.release.outputs.tag_name || steps.release-retry.outputs.tag_name }}
  version:
    description: 'The version of the release'
    value: ${{ steps.release.outputs.version || steps.release-retry.outputs.version }}
  upload_url:
    description: 'Upload URL for release assets'
    value: ${{ steps.release.outputs.upload_url || steps.release-retry.outputs.upload_url }}
  html_url:
    description: 'HTML URL of the release'
    value: ${{ steps.release.outputs.html_url || steps.release-retry.outputs.html_url }}
  pr_number:
    description: 'Release PR number (if created or found)'
    value: ${{ steps.release.outputs.pr_number || steps.release-retry.outputs.pr_number || steps.find-pr.outputs.existing-pr }}
  pr_merged:
    description: 'Whether release PR was merged'
    value: ${{ steps.auto-merge.outputs.merged }}
  error_recovered:
    description: 'Whether errors were automatically recovered'
    value: ${{ steps.handle-errors.outputs.missing-release-created }}
  recovery_version:
    description: 'Version created during error recovery'
    value: ${{ steps.handle-errors.outputs.created-version }}
  security_score:
    description: 'Security scan score'
    value: ${{ steps.security-scan.outputs.security-score }}
  license_compliance:
    description: 'License compliance status'
    value: ${{ steps.license-check.outputs.compliance-status }}
  artifacts_generated:
    description: 'Generated artifacts list'
    value: ${{ steps.artifacts.outputs.artifacts-generated }}

runs:
  using: 'composite'
  steps:
    - name: üöÄ Setup Enhanced Release Process
      shell: bash
      run: |
        echo "üöÄ Initializing Enhanced Release Process"
        echo "Release Type: ${{ inputs.release-type }}"
        echo "Security Scan: ${{ inputs.security-scan-enabled }}"
        echo "License Check: ${{ inputs.license-check-enabled }}"
        echo "Artifact Generation: ${{ inputs.artifact-generation-enabled }}"
        echo "Auto Merge: ${{ inputs.auto-merge-enabled }}"
        echo "Force Release: ${{ inputs.force-release }}"

    - name: üîç Check Release Eligibility
      id: check-eligibility
      if: inputs.force-release != 'true'
      shell: bash
      run: |
        echo "üîç Checking release eligibility..."
        
        # Check if there are any feat: or fix: commits since last release
        LAST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
        
        if [ -z "$LAST_TAG" ]; then
          echo "No previous tags found, proceeding with release"
          echo "eligible=true" >> $GITHUB_OUTPUT
          echo "reason=first-release" >> $GITHUB_OUTPUT
        else
          # Get commits since last tag
          COMMITS=$(git log ${LAST_TAG}..HEAD --oneline --grep="^feat" --grep="^fix" --grep="^feat!" || true)
          
          if [ -n "$COMMITS" ]; then
            echo "Found releasable commits since $LAST_TAG"
            echo "eligible=true" >> $GITHUB_OUTPUT
            echo "reason=releasable-commits" >> $GITHUB_OUTPUT
            echo "commits<<EOF" >> $GITHUB_OUTPUT
            echo "$COMMITS" >> $GITHUB_OUTPUT
            echo "EOF" >> $GITHUB_OUTPUT
          else
            echo "No releasable commits found since $LAST_TAG"
            echo "eligible=false" >> $GITHUB_OUTPUT
            echo "reason=no-releasable-commits" >> $GITHUB_OUTPUT
          fi
        fi

    - name: üõ°Ô∏è Security Scan
      id: security-scan
      if: |
        inputs.security-scan-enabled == 'true' && 
        (inputs.force-release == 'true' || steps.check-eligibility.outputs.eligible == 'true')
      uses: ./.github/actions/security-scan
      with:
        scan-engine: ${{ inputs.security-scan-engine }}
        scan-type: 'all'
        fail-on-findings: 'false'
        gitleaks-license: ${{ inputs.gitleaks-license }}
        gitguardian-api-key: ${{ inputs.gitguardian-api-key }}
        token: ${{ inputs.token }}

    - name: üìã License Compliance Check
      id: license-check
      if: |
        inputs.license-check-enabled == 'true' && 
        (inputs.force-release == 'true' || steps.check-eligibility.outputs.eligible == 'true')
      uses: ./.github/actions/license-compliance
      with:
        fail-on-forbidden: 'true'
        fail-on-unknown: 'false'
        scan-dependencies: 'true'
        generate-sbom: 'true'
        token: ${{ inputs.token }}

    - name: üè∑Ô∏è Get Previous Release Info
      id: previous-release
      if: inputs.force-release == 'true' || steps.check-eligibility.outputs.eligible == 'true'
      shell: bash
      run: |
        LAST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
        if [ -n "$LAST_TAG" ]; then
          echo "last-tag=$LAST_TAG" >> $GITHUB_OUTPUT
          echo "Previous release: $LAST_TAG"
        else
          echo "last-tag=" >> $GITHUB_OUTPUT
          echo "No previous release found"
        fi

    - name: üì¶ Release Please
      id: release
      if: inputs.force-release == 'true' || steps.check-eligibility.outputs.eligible == 'true'
      uses: googleapis/release-please-action@v4
      with:
        config-file: ${{ inputs.config-file }}
        manifest-file: ${{ inputs.manifest-file }}
        token: ${{ inputs.token }}
      continue-on-error: true

    - name: üîç Handle Release Please Errors
      id: handle-errors
      if: steps.release.outcome == 'failure'
      shell: bash
      run: |
        echo "‚ö†Ô∏è Release-Please failed, attempting error recovery..."
        
        # Check for merged release PRs without corresponding releases
        MERGED_PRS=$(curl -s -H "Authorization: token ${{ inputs.token }}" \
          "https://api.github.com/repos/${{ github.repository }}/pulls?state=closed" | \
          jq -r '.[] | select(.merged_at != null and (.title | test("chore: release"))) | "\(.number)|\(.title)|\(.merge_commit_sha)"' | head -5)
        
        if [ -n "$MERGED_PRS" ]; then
          echo "üîç Found merged release PRs, checking for missing releases..."
          
          while IFS='|' read -r pr_number pr_title merge_sha; do
            # Extract version from PR title
            VERSION=$(echo "$pr_title" | grep -oE '[0-9]+\.[0-9]+\.[0-9]+' | head -1)
            
            if [ -n "$VERSION" ]; then
              # Check if release exists
              RELEASE_EXISTS=$(curl -s -H "Authorization: token ${{ inputs.token }}" \
                "https://api.github.com/repos/${{ github.repository }}/releases/tags/v$VERSION" | \
                jq -r '.tag_name // empty')
              
              if [ -z "$RELEASE_EXISTS" ]; then
                echo "üöÄ Creating missing release v$VERSION for merged PR #$pr_number"
                
                # Create the missing release
                curl -s -X POST \
                  -H "Authorization: token ${{ inputs.token }}" \
                  -H "Content-Type: application/json" \
                  "https://api.github.com/repos/${{ github.repository }}/releases" \
                  -d "{
                    \"tag_name\": \"v$VERSION\",
                    \"name\": \"v$VERSION\",
                    \"body\": \"Release $VERSION\\n\\nAutomatically created for merged PR #$pr_number\\n\\nFull Changelog: https://github.com/${{ github.repository }}/compare/v$(echo $VERSION | awk -F. '{print $1\".\"$2\".\"$3-1}')...v$VERSION\",
                    \"draft\": false,
                    \"prerelease\": false
                  }"
                
                echo "‚úÖ Created release v$VERSION"
                echo "missing-release-created=true" >> $GITHUB_OUTPUT
                echo "created-version=$VERSION" >> $GITHUB_OUTPUT
                break
              else
                echo "‚ÑπÔ∏è Release v$VERSION already exists"
              fi
            fi
          done <<< "$MERGED_PRS"
        fi
        
        # Retry release-please after cleanup
        echo "üîÑ Retrying release-please after error recovery..."
        echo "retry-needed=true" >> $GITHUB_OUTPUT

    - name: üîÑ Retry Release Please
      id: release-retry
      if: steps.handle-errors.outputs.retry-needed == 'true'
      uses: googleapis/release-please-action@v4
      with:
        config-file: ${{ inputs.config-file }}
        manifest-file: ${{ inputs.manifest-file }}
        token: ${{ inputs.token }}
      continue-on-error: true

    - name: ÔøΩ Find Existing Release PR
      id: find-pr
      if: |
        steps.release.outputs.pr_number == '' &&
        steps.release.outputs.release_created != 'true'
      shell: bash
      run: |
        # Search for existing release PRs
        PR_LIST=$(curl -s -H "Authorization: token ${{ inputs.token }}" \
          "https://api.github.com/repos/${{ github.repository }}/pulls?state=open" | \
          jq -r '.[] | select(.title | test("chore: release")) | .number')
        
        if [ -n "$PR_LIST" ]; then
          PR_NUMBER=$(echo "$PR_LIST" | head -1)
          echo "existing-pr=$PR_NUMBER" >> $GITHUB_OUTPUT
          echo "üìã Found existing release PR: #$PR_NUMBER"
        else
          echo "existing-pr=" >> $GITHUB_OUTPUT
          echo "üìã No existing release PR found"
        fi

    - name: üì¶ Generate Release Artifacts
      id: artifacts
      if: |
        inputs.artifact-generation-enabled == 'true' && 
        steps.release.outputs.release_created == 'true'
      uses: ./.github/actions/artifact-generator
      with:
        artifact-types: 'source'
        tag-name: ${{ steps.release.outputs.tag_name }}
        version: ${{ steps.release.outputs.version }}
        upload-url: ${{ steps.release.outputs.upload_url }}
        source-formats: 'zip,tar.gz'
        token: ${{ inputs.token }}

    - name: üéâ Release Success Notification
      if: steps.release.outputs.release_created == 'true'
      shell: bash
      run: |
        echo "üéâ Release created successfully!"
        echo "üìã Release Details:"
        echo "   ‚Ä¢ Tag: ${{ steps.release.outputs.tag_name }}"
        echo "   ‚Ä¢ Version: ${{ steps.release.outputs.version }}"
        echo "   ‚Ä¢ Type: ${{ inputs.release-type }}"
        echo "   ‚Ä¢ Package: ${{ inputs.package-name }}"
        
        if [ "${{ inputs.draft }}" == "true" ]; then
          echo "   ‚Ä¢ Status: Draft Release"
        elif [ "${{ inputs.prerelease }}" == "true" ]; then
          echo "   ‚Ä¢ Status: Pre-release"
        else
          echo "   ‚Ä¢ Status: Full Release"
        fi
        
        # Security and compliance info
        if [ "${{ inputs.security-scan-enabled }}" == "true" ]; then
          echo "   ‚Ä¢ Security Score: ${{ steps.security-scan.outputs.security-score || 'N/A' }}/100"
        fi
        
        if [ "${{ inputs.license-check-enabled }}" == "true" ]; then
          echo "   ‚Ä¢ License Compliance: ${{ steps.license-check.outputs.compliance-status || 'N/A' }}"
        fi
        
        if [ "${{ inputs.artifact-generation-enabled }}" == "true" ]; then
          echo "   ‚Ä¢ Artifacts: ${{ steps.artifacts.outputs.artifacts-generated || 'None' }}"
        fi
        
        echo ""
        echo "üîó Release URL: ${{ steps.release.outputs.html_url }}"

    - name: ‚ÑπÔ∏è No Release Info
      if: |
        steps.release.outputs.release_created != 'true' && 
        (inputs.force-release == 'true' || steps.check-eligibility.outputs.eligible == 'true')
      shell: bash
      run: |
        if [ "${{ steps.release.outputs.pr_number }}" != "" ]; then
          echo "üìù Release PR created: #${{ steps.release.outputs.pr_number }}"
          
          if [ "${{ inputs.auto-merge-enabled }}" == "true" ]; then
            if [ "${{ steps.auto-merge.outputs.merged }}" == "true" ]; then
              echo "‚úÖ Release PR auto-merged successfully"
            else
              echo "‚è≥ Release PR created but not auto-merged"
              echo "   Check PR requirements and merge manually if needed"
            fi
          else
            echo "   Auto-merge disabled - manual review and merge required"
          fi
        else
          echo "‚ÑπÔ∏è No new release or PR created"
          echo "üìã Possible reasons:"
          echo "   ‚Ä¢ No conventional commits since last release"
          echo "   ‚Ä¢ Only non-releasable changes (docs, chore, etc.)"
          echo "   ‚Ä¢ Release-Please PR already exists"
        fi
        
        echo ""
        echo "üí° To trigger a release, ensure commits follow conventional format:"
        echo "   ‚Ä¢ feat: for new features"
        echo "   ‚Ä¢ fix: for bug fixes"
        echo "   ‚Ä¢ feat!: for breaking changes"

    - name: ‚ö†Ô∏è Release Not Eligible
      if: inputs.force-release != 'true' && steps.check-eligibility.outputs.eligible != 'true'
      shell: bash
      run: |
        echo "‚ÑπÔ∏è Release not eligible"
        echo "Reason: ${{ steps.check-eligibility.outputs.reason }}"
        echo ""
        echo "üí° To create a release:"
        echo "   ‚Ä¢ Add feat: or fix: commits"
        echo "   ‚Ä¢ Use --force-release flag to override"

    - name: üìä Generate Release Metrics
      if: steps.release.outputs.release_created == 'true'
      shell: bash
      run: |
        LAST_TAG="${{ steps.previous-release.outputs.last-tag }}"
        CURRENT_TAG="${{ steps.release.outputs.tag_name }}"
        
        if [ -n "$LAST_TAG" ] && [ "$LAST_TAG" != "$CURRENT_TAG" ]; then
          echo "üìà Release Metrics ($LAST_TAG ‚Üí $CURRENT_TAG):"
          
          # Count commits
          COMMIT_COUNT=$(git rev-list --count $LAST_TAG..$CURRENT_TAG 2>/dev/null || echo "0")
          echo "   ‚Ä¢ Commits: $COMMIT_COUNT"
          
          # Count contributors
          CONTRIBUTOR_COUNT=$(git shortlog -sn $LAST_TAG..$CURRENT_TAG | wc -l 2>/dev/null || echo "0")
          echo "   ‚Ä¢ Contributors: $CONTRIBUTOR_COUNT"
          
          # Categorize commits
          FEAT_COUNT=$(git log $LAST_TAG..$CURRENT_TAG --oneline --grep="^feat" | wc -l 2>/dev/null || echo "0")
          FIX_COUNT=$(git log $LAST_TAG..$CURRENT_TAG --oneline --grep="^fix" | wc -l 2>/dev/null || echo "0")
          BREAKING_COUNT=$(git log $LAST_TAG..$CURRENT_TAG --oneline --grep="!" | wc -l 2>/dev/null || echo "0")
          
          echo "   ‚Ä¢ Features: $FEAT_COUNT"
          echo "   ‚Ä¢ Bug Fixes: $FIX_COUNT"
          echo "   ‚Ä¢ Breaking Changes: $BREAKING_COUNT"
          
          # Security and compliance metrics
          if [ "${{ inputs.security-scan-enabled }}" == "true" ]; then
            echo "   ‚Ä¢ Security Score: ${{ steps.security-scan.outputs.security-score || 'N/A' }}/100"
          fi
          
          if [ "${{ inputs.license-check-enabled }}" == "true" ]; then
            echo "   ‚Ä¢ License Status: ${{ steps.license-check.outputs.compliance-status || 'N/A' }}"
          fi
        else
          echo "üìà First release - no comparison available"
        fi

    - name: üìã Generate Comprehensive Summary
      if: always()
      shell: bash
      run: |
        echo "üìã Enhanced Release Process Summary"
        echo "=================================="
        echo ""
        echo "üîß Configuration:"
        echo "  ‚Ä¢ Release Type: ${{ inputs.release-type }}"
        echo "  ‚Ä¢ Security Scan: ${{ inputs.security-scan-enabled }}"
        echo "  ‚Ä¢ License Check: ${{ inputs.license-check-enabled }}"
        echo "  ‚Ä¢ Artifact Generation: ${{ inputs.artifact-generation-enabled }}"
        echo "  ‚Ä¢ Auto Merge: ${{ inputs.auto-merge-enabled }}"
        echo "  ‚Ä¢ Force Release: ${{ inputs.force-release }}"
        echo ""
        echo "üìä Results:"
        echo "  ‚Ä¢ Eligible: ${{ steps.check-eligibility.outputs.eligible || 'force' }}"
        echo "  ‚Ä¢ Release Created: ${{ steps.release.outputs.release_created || 'false' }}"
        echo "  ‚Ä¢ PR Number: ${{ steps.release.outputs.pr_number || steps.find-pr.outputs.existing-pr || 'none' }}"
        echo "  ‚Ä¢ PR Merged: ${{ steps.auto-merge.outputs.merged || 'false' }}"
        
        if [ "${{ inputs.security-scan-enabled }}" == "true" ]; then
          echo "  ‚Ä¢ Security Score: ${{ steps.security-scan.outputs.security-score || 'N/A' }}/100"
        fi
        
        if [ "${{ inputs.license-check-enabled }}" == "true" ]; then
          echo "  ‚Ä¢ License Compliance: ${{ steps.license-check.outputs.compliance-status || 'N/A' }}"
        fi
        
        if [ "${{ inputs.artifact-generation-enabled }}" == "true" ]; then
          echo "  ‚Ä¢ Artifacts Generated: ${{ steps.artifacts.outputs.artifacts-generated || 'none' }}"
        fi
        
        echo ""
        if [ "${{ steps.release.outputs.release_created }}" == "true" ]; then
          echo "‚úÖ Release completed successfully!"
          echo "üîó Release: ${{ steps.release.outputs.html_url }}"
        elif [ "${{ steps.release.outputs.pr_number || steps.find-pr.outputs.existing-pr }}" != "" ]; then
          echo "üìù Release PR: #${{ steps.release.outputs.pr_number || steps.find-pr.outputs.existing-pr }}"
        else
          echo "‚ÑπÔ∏è No release action taken"
        fi

branding:
  icon: 'package'
  color: 'green'
