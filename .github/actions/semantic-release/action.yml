name: 'Semantic Release'
description: 'Automated semantic versioning and release creation with changelog generation'
author: 'BAUER GROUP'

inputs:
  dry-run:
    description: 'Run in dry-run mode without creating release'
    required: false
    default: 'false'
  branches:
    description: 'Branches to release from (JSON array or single branch)'
    required: false
    default: 'main'
  extra-plugins:
    description: 'Extra semantic-release plugins to install'
    required: false
    default: ''
  node-version:
    description: 'Node.js version to use'
    required: false
    default: '20'
  token:
    description: 'GitHub token for authentication'
    required: true

outputs:
  release-created:
    description: 'Whether a release was created'
    value: ${{ steps.release.outputs.new_release_published }}
  version:
    description: 'The new version'
    value: ${{ steps.release.outputs.new_release_version }}
  tag:
    description: 'The git tag'
    value: ${{ steps.tag.outputs.tag }}
  changelog:
    description: 'The changelog for this release'
    value: ${{ steps.release.outputs.new_release_notes }}

runs:
  using: 'composite'
  steps:
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ inputs.node-version }}

    - name: Copy Config
      shell: bash
      run: |
        # Use repository config if exists, otherwise use default
        if [ -f ".github/config/release/semantic-release.json" ]; then
          echo "Using repository semantic-release config"
          cp .github/config/release/semantic-release.json .releaserc.json
        else
          echo "Creating default semantic-release config"
          cat > .releaserc.json << 'EOF'
        {
          "branches": ["${{ inputs.branches }}"],
          "plugins": [
            ["@semantic-release/commit-analyzer", {
              "preset": "conventionalcommits",
              "releaseRules": [
                {"breaking": true, "release": "major"},
                {"type": "feat", "release": "minor"},
                {"type": "fix", "release": "patch"},
                {"type": "perf", "release": "patch"},
                {"type": "revert", "release": "patch"}
              ]
            }],
            ["@semantic-release/release-notes-generator", {
              "preset": "conventionalcommits",
              "presetConfig": {
                "types": [
                  {"type": "feat", "section": "🚀 Features"},
                  {"type": "fix", "section": "🐛 Bug Fixes"},
                  {"type": "perf", "section": "⚡ Performance"},
                  {"type": "revert", "section": "⏪ Reverts"},
                  {"type": "refactor", "section": "♻️ Refactoring"},
                  {"type": "docs", "section": "📚 Documentation", "hidden": true},
                  {"type": "style", "section": "💄 Styles", "hidden": true},
                  {"type": "chore", "section": "🔧 Chores", "hidden": true},
                  {"type": "test", "section": "🧪 Tests", "hidden": true},
                  {"type": "build", "section": "🔨 Build", "hidden": true},
                  {"type": "ci", "section": "👷 CI", "hidden": true}
                ]
              }
            }],
            ["@semantic-release/changelog", {
              "changelogFile": "CHANGELOG.MD"
            }],
            ["@semantic-release/git", {
              "assets": ["CHANGELOG.MD"],
              "message": "chore(release): ${nextRelease.version} [skip ci]\n\n${nextRelease.notes}"
            }],
            "@semantic-release/github"
          ]
        }
        EOF
        fi

    - name: Semantic Release
      id: release
      uses: cycjimmy/semantic-release-action@v4
      env:
        GITHUB_TOKEN: ${{ inputs.token }}
      with:
        dry_run: ${{ inputs.dry-run }}
        branches: ${{ inputs.branches }}
        extra_plugins: |
          @semantic-release/changelog
          @semantic-release/git
          conventional-changelog-conventionalcommits
          ${{ inputs.extra-plugins }}

    - name: Set Tag Output
      id: tag
      shell: bash
      if: steps.release.outputs.new_release_published == 'true'
      run: |
        echo "tag=v${{ steps.release.outputs.new_release_version }}" >> $GITHUB_OUTPUT

branding:
  icon: 'package'
  color: 'green'