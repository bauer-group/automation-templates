name: 'License Compliance Check'
description: 'SPDX license compliance checking with FOSSA integration and incompatible license detection'
author: 'BAUER GROUP'

inputs:
  allowed-licenses:
    description: 'Comma-separated list of allowed SPDX license identifiers'
    required: false
    default: 'MIT,Apache-2.0,BSD-2-Clause,BSD-3-Clause,ISC,0BSD,CC0-1.0'
  forbidden-licenses:
    description: 'Comma-separated list of forbidden SPDX license identifiers'
    required: false
    default: 'GPL-2.0,GPL-3.0,AGPL-1.0,AGPL-3.0,LGPL-2.1,LGPL-3.0,SSPL-1.0'
  fail-on-forbidden:
    description: 'Fail the workflow if forbidden licenses are found'
    required: false
    default: 'true'
  fail-on-unknown:
    description: 'Fail the workflow if unknown licenses are found'
    required: false
    default: 'false'
  fossa-api-key:
    description: 'FOSSA API key for deep license analysis'
    required: false
    default: ''
  scan-dependencies:
    description: 'Scan project dependencies for licenses'
    required: false
    default: 'true'
  generate-sbom:
    description: 'Generate Software Bill of Materials (SBOM)'
    required: false
    default: 'true'
  token:
    description: 'GitHub Token for API access'
    required: true

outputs:
  compliance-status:
    description: 'Overall compliance status (pass, warning, fail)'
    value: ${{ steps.compliance-check.outputs.compliance-status }}
  forbidden-found:
    description: 'Whether forbidden licenses were found'
    value: ${{ steps.license-scan.outputs.forbidden-found }}
  unknown-found:
    description: 'Whether unknown licenses were found'
    value: ${{ steps.license-scan.outputs.unknown-found }}
  license-summary:
    description: 'Summary of license findings'
    value: ${{ steps.compliance-check.outputs.license-summary }}
  sbom-generated:
    description: 'Whether SBOM was generated'
    value: ${{ steps.sbom-generation.outputs.sbom-generated }}

runs:
  using: 'composite'
  steps:
    - name: 📋 Setup License Compliance Check
      shell: bash
      run: |
        echo "📋 Initializing License Compliance Check"
        echo "Allowed Licenses: ${{ inputs.allowed-licenses }}"
        echo "Forbidden Licenses: ${{ inputs.forbidden-licenses }}"
        echo "Scan Dependencies: ${{ inputs.scan-dependencies }}"
        echo "Generate SBOM: ${{ inputs.generate-sbom }}"
        
        mkdir -p license-reports

    - name: 🔍 Install License Scanning Tools
      shell: bash
      run: |
        echo "🔧 Installing license scanning tools..."
        
        # Install licensee for license detection
        if ! command -v licensee &> /dev/null; then
          echo "Installing licensee..."
          if command -v gem &> /dev/null; then
            # Try installing with sudo first, fallback to user install
            if sudo gem install licensee 2>/dev/null; then
              echo "✅ Licensee installed system-wide"
            elif gem install --user-install licensee 2>/dev/null; then
              echo "✅ Licensee installed for user"
              # Add user gem bin to PATH
              export PATH="$(ruby -e 'puts Gem.user_dir')/bin:$PATH"
              echo "$(ruby -e 'puts Gem.user_dir')/bin" >> $GITHUB_PATH
            else
              echo "⚠️ Failed to install licensee, license detection may be limited"
            fi
          else
            echo "⚠️ Ruby/gem not available, skipping licensee installation"
          fi
        else
          echo "✅ Licensee already available"
        fi
        
        # Install SPDX tools
        if ! command -v pip3 &> /dev/null && command -v python3 &> /dev/null; then
          echo "Installing pip..."
          curl https://bootstrap.pypa.io/get-pip.py | python3 --user
        fi
        
        if command -v pip3 &> /dev/null; then
          echo "Installing SPDX tools..."
          if pip3 install --user spdx-tools reuse 2>/dev/null; then
            echo "✅ SPDX tools installed successfully"
            # Add user bin to PATH
            export PATH="$HOME/.local/bin:$PATH"
            echo "$HOME/.local/bin" >> $GITHUB_PATH
          else
            echo "⚠️ Failed to install SPDX tools, some features may be limited"
          fi
        else
          echo "⚠️ Python3/pip3 not available, skipping SPDX tools installation"
        fi
        
        # Install syft for SBOM generation
        if ! command -v syft &> /dev/null; then
          echo "Installing syft for SBOM generation..."
          # Download and install syft binary
          if curl -sSfL https://raw.githubusercontent.com/anchore/syft/main/install.sh | sudo sh -s -- -b /usr/local/bin 2>/dev/null; then
            echo "✅ Syft installed successfully"
          else
            echo "⚠️ Failed to install syft, trying alternative method..."
            # Fallback: install to user directory
            mkdir -p "$HOME/.local/bin"
            if curl -sSfL https://raw.githubusercontent.com/anchore/syft/main/install.sh | sh -s -- -b "$HOME/.local/bin" 2>/dev/null; then
              echo "✅ Syft installed to user directory"
              export PATH="$HOME/.local/bin:$PATH"
              echo "$HOME/.local/bin" >> $GITHUB_PATH
            else
              echo "⚠️ Syft installation failed, SBOM generation may be limited"
            fi
          fi
        else
          echo "✅ Syft already available"
        fi

    - name: 📄 Scan Project Licenses
      id: license-scan
      shell: bash
      run: |
        echo "📄 Scanning project licenses..."
        
        # Initialize variables
        FORBIDDEN_FOUND=false
        UNKNOWN_FOUND=false
        
        # Create license findings file
        echo "# License Scan Results" > license-reports/findings.md
        echo "" >> license-reports/findings.md
        echo "## Project License Files" >> license-reports/findings.md
        echo "" >> license-reports/findings.md
        
        # Scan for license files
        LICENSE_FILES=$(find . -maxdepth 2 -type f \( -iname "license*" -o -iname "licence*" -o -iname "copying*" \) -not -path "./.git/*")
        
        if [ -n "$LICENSE_FILES" ]; then
          echo "📋 Found license files:"
          # Use a different approach to avoid subshell issues
          OLD_IFS="$IFS"
          IFS=$'\n'
          for file in $LICENSE_FILES; do
            echo "  • $file"
            echo "- \`$file\`" >> license-reports/findings.md
            
            # Try to identify license
            if command -v licensee &> /dev/null; then
              # Get licensee output and clean it up
              LICENSEE_OUTPUT=$(licensee detect "$file" 2>/dev/null)
              if [ $? -eq 0 ] && [ -n "$LICENSEE_OUTPUT" ]; then
                # Extract license ID and clean duplicates
                LICENSE_ID=$(echo "$LICENSEE_OUTPUT" | grep "License:" | cut -d: -f2 | xargs | awk '{print $1}' || echo "Unknown")
                # Fallback if still empty
                if [ -z "$LICENSE_ID" ] || [ "$LICENSE_ID" = "" ]; then
                  LICENSE_ID="Unknown"
                fi
              else
                LICENSE_ID="Unknown"
              fi
              echo "    License: $LICENSE_ID"
              echo "  - License: $LICENSE_ID" >> license-reports/findings.md
            else
              # Fallback: basic pattern matching
              LICENSE_ID="Unknown"
              if grep -i "MIT License" "$file" >/dev/null 2>&1; then
                LICENSE_ID="MIT"
              elif grep -i "Apache License" "$file" >/dev/null 2>&1; then
                LICENSE_ID="Apache-2.0"
              elif grep -i "BSD" "$file" >/dev/null 2>&1; then
                LICENSE_ID="BSD"
              elif grep -i "GPL" "$file" >/dev/null 2>&1; then
                LICENSE_ID="GPL"
              fi
              echo "    License: $LICENSE_ID (basic detection)"
              echo "  - License: $LICENSE_ID (basic detection)" >> license-reports/findings.md
            fi
          done
          IFS="$OLD_IFS"
        else
          echo "⚠️ No license files found in project root"
          echo "- ⚠️ No license files found" >> license-reports/findings.md
        fi
        
        echo "" >> license-reports/findings.md
        echo "## SPDX License Headers" >> license-reports/findings.md
        echo "" >> license-reports/findings.md
        
        # Check for SPDX license identifiers in source files
        SOURCE_FILES=$(find . -type f \( -name "*.py" -o -name "*.js" -o -name "*.ts" -o -name "*.java" -o -name "*.cs" -o -name "*.cpp" -o -name "*.c" -o -name "*.go" -o -name "*.rs" \) -not -path "./.git/*" -not -path "./node_modules/*" -not -path "./vendor/*" 2>/dev/null | head -50 || echo "")
        
        SPDX_COUNT=0
        if [ -n "$SOURCE_FILES" ]; then
          echo "🔍 Checking SPDX headers in source files..."
          # Use for loop instead of while read to avoid subshell issues
          OLD_IFS="$IFS"
          IFS=$'\n'
          for file in $SOURCE_FILES; do
            # Skip if file doesn't exist or isn't readable
            if [ ! -f "$file" ] || [ ! -r "$file" ]; then
              continue
            fi
            
            # Look for SPDX-License-Identifier
            SPDX_LICENSE=$(grep -i "SPDX-License-Identifier:" "$file" 2>/dev/null | head -1 | sed 's/.*SPDX-License-Identifier: *//i' | sed 's/[[:space:]]*$//' | tr -d '\r' || echo "")
            
            if [ -n "$SPDX_LICENSE" ]; then
              echo "  • $file: $SPDX_LICENSE"
              echo "- \`$file\`: $SPDX_LICENSE" >> license-reports/findings.md
              SPDX_COUNT=$((SPDX_COUNT + 1))
              
              # Check against forbidden licenses
              IFS_BACKUP="$IFS"
              IFS=',' read -ra FORBIDDEN <<< "${{ inputs.forbidden-licenses }}"
              IFS="$IFS_BACKUP"
              for forbidden in "${FORBIDDEN[@]}"; do
                forbidden_clean=$(echo "$forbidden" | xargs)  # trim whitespace
                if [[ "$SPDX_LICENSE" == *"$forbidden_clean"* ]]; then
                  echo "❌ Forbidden license found: $SPDX_LICENSE in $file"
                  FORBIDDEN_FOUND=true
                fi
              done
              
              # Check against allowed licenses
              IFS_BACKUP2="$IFS"
              IFS=',' read -ra ALLOWED <<< "${{ inputs.allowed-licenses }}"
              IFS="$IFS_BACKUP2"
              LICENSE_ALLOWED=false
              for allowed in "${ALLOWED[@]}"; do
                allowed_clean=$(echo "$allowed" | xargs)  # trim whitespace
                if [[ "$SPDX_LICENSE" == *"$allowed_clean"* ]]; then
                  LICENSE_ALLOWED=true
                  break
                fi
              done
              
              if [ "$LICENSE_ALLOWED" == "false" ]; then
                echo "⚠️ Unknown/unverified license: $SPDX_LICENSE in $file"
                UNKNOWN_FOUND=true
              fi
            fi
          done
          IFS="$OLD_IFS"
        else
          echo "ℹ️ No source files found for SPDX header check"
        fi
        
        echo "📊 SPDX headers found in $SPDX_COUNT files"
        echo "" >> license-reports/findings.md
        echo "**SPDX Headers Found:** $SPDX_COUNT files" >> license-reports/findings.md
        
        echo "forbidden-found=$FORBIDDEN_FOUND" >> $GITHUB_OUTPUT
        echo "unknown-found=$UNKNOWN_FOUND" >> $GITHUB_OUTPUT
        
        # Ensure license scan step always succeeds
        echo "✅ License scan completed successfully"
        exit 0

    - name: 📦 Scan Dependencies
      id: dependency-scan
      if: inputs.scan-dependencies == 'true'
      shell: bash
      run: |
        echo "📦 Scanning dependencies for licenses..."
        
        echo "" >> license-reports/findings.md
        echo "## Dependency Licenses" >> license-reports/findings.md
        echo "" >> license-reports/findings.md
        
        # Scan different package manager files
        if [ -f "package.json" ]; then
          echo "📄 Found package.json - scanning npm dependencies"
          echo "### NPM Dependencies" >> license-reports/findings.md
          echo "" >> license-reports/findings.md
          
          # Use npm to list licenses if available
          if command -v npm &> /dev/null && [ -f "package-lock.json" ]; then
            npm install --package-lock-only 2>/dev/null || true
            npx license-checker --summary 2>/dev/null | tee license-reports/npm-licenses.txt || echo "Could not scan npm licenses"
          fi
        fi
        
        if [ -f "requirements.txt" ] || [ -f "pyproject.toml" ]; then
          echo "📄 Found Python dependencies"
          echo "### Python Dependencies" >> license-reports/findings.md
          echo "" >> license-reports/findings.md
          
          if command -v pip3 &> /dev/null; then
            pip3 install pip-licenses 2>/dev/null || echo "Could not install pip-licenses"
            pip-licenses --format=markdown 2>/dev/null >> license-reports/findings.md || echo "Could not scan Python licenses"
          fi
        fi
        
        if [ -f "go.mod" ]; then
          echo "📄 Found go.mod - scanning Go dependencies"
          echo "### Go Dependencies" >> license-reports/findings.md
          echo "" >> license-reports/findings.md
          
          if command -v go &> /dev/null; then
            # Use for loop instead of while read
            GO_DEPS=$(go list -m all 2>/dev/null | head -20)
            if [ -n "$GO_DEPS" ]; then
              OLD_IFS="$IFS"
              IFS=$'\n'
              for dep in $GO_DEPS; do
                echo "- $dep" >> license-reports/findings.md
              done
              IFS="$OLD_IFS"
            fi
          fi
        fi
        
        # Ensure dependency scan step always succeeds
        echo "✅ Dependency scan completed successfully"
        exit 0

    - name: 🔬 FOSSA Integration
      id: fossa-scan
      if: inputs.fossa-api-key != ''
      shell: bash
      env:
        FOSSA_API_KEY: ${{ inputs.fossa-api-key }}
      run: |
        echo "🔬 Running FOSSA license analysis..."
        
        # Install FOSSA CLI
        curl -H 'Cache-Control: no-cache' https://raw.githubusercontent.com/fossas/fossa-cli/master/install-latest.sh | bash
        
        # Run FOSSA analysis
        if command -v fossa &> /dev/null; then
          echo "Running FOSSA scan..."
          fossa analyze 2>&1 | tee license-reports/fossa-analysis.log || echo "FOSSA analysis failed"
          
          # Get FOSSA report
          fossa report attribution --format json > license-reports/fossa-report.json 2>/dev/null || echo "Could not generate FOSSA report"
          
          echo "✅ FOSSA analysis complete"
        else
          echo "❌ FOSSA CLI installation failed"
        fi

    - name: 📋 Generate SBOM
      id: sbom-generation
      if: inputs.generate-sbom == 'true'
      shell: bash
      run: |
        echo "📋 Generating Software Bill of Materials (SBOM)..."
        
        SBOM_GENERATED=false
        
        # Generate SBOM with syft
        if command -v syft &> /dev/null; then
          echo "Generating SBOM with syft..."
          
          # Generate SPDX format SBOM
          syft . -o spdx-json=license-reports/sbom-spdx.json 2>/dev/null || echo "SPDX SBOM generation failed"
          
          # Generate CycloneDX format SBOM
          syft . -o cyclonedx-json=license-reports/sbom-cyclonedx.json 2>/dev/null || echo "CycloneDX SBOM generation failed"
          
          # Generate table format for human reading
          syft . -o table=license-reports/sbom-summary.txt 2>/dev/null || echo "Table SBOM generation failed"
          
          if [ -f "license-reports/sbom-spdx.json" ] || [ -f "license-reports/sbom-cyclonedx.json" ]; then
            SBOM_GENERATED=true
            echo "✅ SBOM generated successfully"
          else
            echo "❌ SBOM generation failed"
          fi
        else
          echo "⚠️ syft not available for SBOM generation"
        fi
        
        echo "sbom-generated=$SBOM_GENERATED" >> $GITHUB_OUTPUT
        
        # Ensure SBOM generation step always succeeds
        echo "✅ SBOM generation completed"
        exit 0

    - name: ✅ Compliance Check
      id: compliance-check
      shell: bash
      run: |
        echo "✅ Performing compliance check..."
        
        FORBIDDEN_FOUND="${{ steps.license-scan.outputs.forbidden-found }}"
        UNKNOWN_FOUND="${{ steps.license-scan.outputs.unknown-found }}"
        
        # Determine compliance status
        COMPLIANCE_STATUS="pass"
        if [ "$FORBIDDEN_FOUND" == "true" ]; then
          COMPLIANCE_STATUS="fail"
        elif [ "$UNKNOWN_FOUND" == "true" ]; then
          COMPLIANCE_STATUS="warning"
        fi
        
        # Generate summary
        LICENSE_SUMMARY="License compliance check completed"
        case $COMPLIANCE_STATUS in
          "pass")
            LICENSE_SUMMARY="✅ All licenses are compliant"
            ;;
          "warning")
            LICENSE_SUMMARY="⚠️ Unknown licenses found - review required"
            ;;
          "fail")
            LICENSE_SUMMARY="❌ Forbidden licenses detected"
            ;;
        esac
        
        echo "compliance-status=$COMPLIANCE_STATUS" >> $GITHUB_OUTPUT
        echo "license-summary=$LICENSE_SUMMARY" >> $GITHUB_OUTPUT
        
        # Create comprehensive report
        cat > license-reports/compliance-summary.md << EOF
        # 📋 License Compliance Report
        
        **Status:** $COMPLIANCE_STATUS
        **Summary:** $LICENSE_SUMMARY
        
        ## 📊 Compliance Results
        
        | Check | Result | Status |
        |-------|--------|--------|
        | Forbidden Licenses | $FORBIDDEN_FOUND | $( [ "$FORBIDDEN_FOUND" == "true" ] && echo "❌ FAIL" || echo "✅ PASS" ) |
        | Unknown Licenses | $UNKNOWN_FOUND | $( [ "$UNKNOWN_FOUND" == "true" ] && echo "⚠️ WARNING" || echo "✅ PASS" ) |
        | SBOM Generated | ${{ steps.sbom-generation.outputs.sbom-generated }} | $( [ "${{ steps.sbom-generation.outputs.sbom-generated }}" == "true" ] && echo "✅ SUCCESS" || echo "⏭️ SKIPPED" ) |
        | FOSSA Analysis | ${{ inputs.fossa-api-key != '' && 'true' || 'false' }} | $( [ "${{ inputs.fossa-api-key }}" != "" ] && echo "✅ COMPLETED" || echo "⏭️ SKIPPED" ) |
        
        ## 🔧 Allowed Licenses
        
        \`\`\`
        ${{ inputs.allowed-licenses }}
        \`\`\`
        
        ## 🚫 Forbidden Licenses
        
        \`\`\`
        ${{ inputs.forbidden-licenses }}
        \`\`\`
        
        ## 📝 Recommendations
        
        EOF
        
        if [ "$FORBIDDEN_FOUND" == "true" ]; then
          cat >> license-reports/compliance-summary.md << EOF
        - **❌ Critical**: Remove or replace dependencies with forbidden licenses
        - Review legal implications of current license usage
        - Consider alternative dependencies with compatible licenses
        
        EOF
        fi
        
        if [ "$UNKNOWN_FOUND" == "true" ]; then
          cat >> license-reports/compliance-summary.md << EOF
        - **⚠️ Warning**: Review unknown licenses for compatibility
        - Add unknown licenses to allowed list if compliant
        - Seek legal review for unclear license terms
        
        EOF
        fi
        
        cat >> license-reports/compliance-summary.md << EOF
        ## 📋 Next Steps
        
        1. Review detailed findings in license-reports artifacts
        2. Address any forbidden license usage
        3. Update project documentation with license information
        4. Consider implementing automated license checks in CI/CD
        EOF
        
        echo ""
        echo "📋 License Compliance Summary:"
        echo "  • Status: $COMPLIANCE_STATUS"
        echo "  • Forbidden Found: $FORBIDDEN_FOUND"
        echo "  • Unknown Found: $UNKNOWN_FOUND"
        echo "  • Summary: $LICENSE_SUMMARY"

    - name: 📤 Upload License Reports
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: license-compliance-reports
        path: license-reports/
        retention-days: 90

    - name: 🚨 Fail on Forbidden Licenses
      if: inputs.fail-on-forbidden == 'true' && steps.license-scan.outputs.forbidden-found == 'true'
      shell: bash
      run: |
        echo "❌ License compliance check failed due to forbidden licenses"
        echo ""
        echo "Forbidden licenses were detected in the project."
        echo "Review the license reports and remove or replace dependencies with forbidden licenses."
        exit 1

    - name: 🚨 Fail on Unknown Licenses
      if: inputs.fail-on-unknown == 'true' && steps.license-scan.outputs.unknown-found == 'true'
      shell: bash
      run: |
        echo "❌ License compliance check failed due to unknown licenses"
        echo ""
        echo "Unknown licenses were detected in the project."
        echo "Review the license reports and verify compatibility of unknown licenses."
        exit 1

branding:
  icon: 'file-text'
  color: 'blue'
