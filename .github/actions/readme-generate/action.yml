name: 'README Generator'
description: 'Generiert README aus Template mit erweiterten Platzhaltern'
author: 'Bauer Group'

inputs:
  template-path:
    description: 'Pfad zum README Template'
    required: false
    default: 'docs/README.template.md'
  output-path:
    description: 'Pfad fÃ¼r generierte README'
    required: false
    default: 'README.md'
  project-name:
    description: 'Name des Projekts'
    required: false
    default: ''
  company-name:
    description: 'Name der Firma'
    required: false
    default: 'Bauer Group'
  project-description:
    description: 'Projektbeschreibung'
    required: false
    default: ''
  contact-email:
    description: 'Kontakt E-Mail'
    required: false
    default: ''
  documentation-url:
    description: 'Dokumentations-URL'
    required: false
    default: ''
  support-url:
    description: 'Support-URL'
    required: false
    default: ''

runs:
  using: 'composite'
  steps:
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'

    - name: Install dependencies
      shell: bash
      run: |
        python -m pip install --upgrade pip
        pip install requests gitpython

    - name: Download latest README generator
      shell: bash
      run: |
        curl -fsSL https://raw.githubusercontent.com/bauer-group/automation-templates/main/scripts/generate_readme.py -o generate_readme.py || echo "Download failed, using fallback"

    - name: Create fallback generator if download failed
      shell: bash
      run: |
        if [ ! -f generate_readme.py ]; then
          cat > generate_readme.py << 'EOF'
        #!/usr/bin/env python3
        import os
        import re
        from datetime import datetime
        
        def main():
            template_path = os.getenv('TEMPLATE_PATH', 'docs/README.template.md')
            output_path = os.getenv('OUTPUT_PATH', 'README.md')
            
            if not os.path.exists(template_path):
                print(f"Template {template_path} not found")
                return
                
            with open(template_path, 'r', encoding='utf-8') as f:
                content = f.read()
            
            # Basis-Ersetzungen
            replacements = {
                '{{VERSION}}': os.getenv('GITHUB_REF_NAME', '0.1.0').lstrip('v'),
                '{{DATE}}': datetime.now().strftime('%Y-%m-%d'),
                '{{DATETIME}}': datetime.now().strftime('%Y-%m-%d %H:%M:%S UTC'),
                '{{YEAR}}': str(datetime.now().year),
                '{{REPOSITORY}}': os.getenv('GITHUB_REPOSITORY', ''),
                '{{REPOSITORY_URL}}': f"https://github.com/{os.getenv('GITHUB_REPOSITORY', '')}",
                '{{REPOSITORY_OWNER}}': os.getenv('GITHUB_REPOSITORY_OWNER', ''),
                '{{REPOSITORY_NAME}}': os.getenv('GITHUB_REPOSITORY', '').split('/')[-1],
                '{{CURRENT_BRANCH}}': os.getenv('GITHUB_REF_NAME', 'main'),
                '{{PROJECT_NAME}}': os.getenv('PROJECT_NAME', ''),
                '{{COMPANY_NAME}}': os.getenv('COMPANY_NAME', 'Bauer Group'),
                '{{PROJECT_DESCRIPTION}}': os.getenv('PROJECT_DESCRIPTION', ''),
                '{{CONTACT_EMAIL}}': os.getenv('CONTACT_EMAIL', ''),
                '{{DOCUMENTATION_URL}}': os.getenv('DOCUMENTATION_URL', ''),
                '{{SUPPORT_URL}}': os.getenv('SUPPORT_URL', ''),
            }
            
            for placeholder, value in replacements.items():
                content = content.replace(placeholder, value)
            
            with open(output_path, 'w', encoding='utf-8') as f:
                f.write(content)
            
            print(f"README generated: {output_path}")
        
        if __name__ == '__main__':
            main()
        EOF
        fi

    - name: Generate README
      shell: bash
      env:
        TEMPLATE_PATH: ${{ inputs.template-path }}
        OUTPUT_PATH: ${{ inputs.output-path }}
        PROJECT_NAME: ${{ inputs.project-name }}
        COMPANY_NAME: ${{ inputs.company-name }}
        PROJECT_DESCRIPTION: ${{ inputs.project-description }}
        CONTACT_EMAIL: ${{ inputs.contact-email }}
        DOCUMENTATION_URL: ${{ inputs.documentation-url }}
        SUPPORT_URL: ${{ inputs.support-url }}
      run: python generate_readme.py

    - name: Check for changes
      id: changes
      shell: bash
      run: |
        if git diff --quiet ${{ inputs.output-path }}; then
          echo "changed=false" >> $GITHUB_OUTPUT
        else
          echo "changed=true" >> $GITHUB_OUTPUT
        fi

    - name: Commit changes
      if: steps.changes.outputs.changed == 'true'
      shell: bash
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git add ${{ inputs.output-path }}
        git commit -m "docs: update README.md [skip ci]" || echo "No changes to commit"

branding:
  icon: 'file-text'
  color: 'blue'
