name: 📄 README Generator
description: Generate README.MD from template with dynamic version and repository information

inputs:
  template-path:
    description: 'Path to the README template file'
    required: false
    default: 'docs/README.template.MD'
  output-path:
    description: 'Path where the generated README.MD should be saved'
    required: false
    default: 'README.MD'
  project-name:
    description: 'Name of the project'
    required: false
    default: ''
  company-name:
    description: 'Name of the company'
    required: false
    default: 'BAUER GROUP'
  project-description:
    description: 'Description of the project'
    required: false
    default: ''
  contact-email:
    description: 'Contact email address'
    required: false
    default: ''
  documentation-url:
    description: 'URL to documentation'
    required: false
    default: ''
  support-url:
    description: 'URL for support/issues'
    required: false
    default: ''
  force-update:
    description: 'Force update even if no changes detected'
    required: false
    default: 'false'
  custom-version:
    description: 'Custom version to use instead of auto-detected'
    required: false
    default: ''

outputs:
  readme_updated:
    description: 'Whether the README.MD file was updated'
    value: ${{ steps.generate.outputs.readme_updated }}
  changes_detected:
    description: 'Whether changes were detected in the template'
    value: ${{ steps.generate.outputs.changes_detected }}
  validation_passed:
    description: 'Whether validation checks passed'
    value: ${{ steps.generate.outputs.validation_passed }}
  current_version:
    description: 'The current version that was used'
    value: ${{ steps.generate.outputs.current_version }}
  unresolved_placeholders:
    description: 'Number of unresolved placeholders found'
    value: ${{ steps.generate.outputs.unresolved_placeholders }}

runs:
  using: composite
  steps:
    - name: 🔍 Validate Template
      shell: bash
      run: |
        TEMPLATE_PATH="${{ inputs.template-path }}"
        
        if [ ! -f "$TEMPLATE_PATH" ]; then
          echo "❌ Template file not found: $TEMPLATE_PATH"
          exit 1
        fi
        
        echo "✅ Template file found: $TEMPLATE_PATH"
        
        # Check for required placeholders
        REQUIRED_PLACEHOLDERS=(
          "{{VERSION}}"
          "{{DATE}}"
          "{{REPO_FULL_NAME}}"
          "{{REPO_URL}}"
          "{{CURRENT_BRANCH}}"
        )
        
        MISSING_PLACEHOLDERS=()
        for placeholder in "${REQUIRED_PLACEHOLDERS[@]}"; do
          if ! grep -q "$placeholder" "$TEMPLATE_PATH"; then
            MISSING_PLACEHOLDERS+=("$placeholder")
          fi
        done
        
        if [ ${#MISSING_PLACEHOLDERS[@]} -gt 0 ]; then
          echo "⚠️ Missing recommended placeholders:"
          for placeholder in "${MISSING_PLACEHOLDERS[@]}"; do
            echo "  - $placeholder"
          done
          echo "📝 Template will still be processed"
        fi
        
        echo "✅ Template validation completed"

    - name: 📊 Get Version Information
      id: version-info
      shell: bash
      run: |
        # Get current version
        if [ -n "${{ inputs.custom-version }}" ]; then
          CURRENT_VERSION="${{ inputs.custom-version }}"
          echo "Using custom version: $CURRENT_VERSION"
        else
          # Try to get latest tag (search all tags, not just reachable ones)
          LATEST_TAG=$(git tag --sort=-version:refname | head -1 2>/dev/null || echo "")
          if [ -n "$LATEST_TAG" ]; then
            CURRENT_VERSION="${LATEST_TAG#v}"
            echo "Using latest tag: $CURRENT_VERSION (from tag: $LATEST_TAG)"
          else
            CURRENT_VERSION="0.1.0"
            echo "No tags found, using: $CURRENT_VERSION"
          fi
        fi
        
        echo "current_version=$CURRENT_VERSION" >> $GITHUB_OUTPUT

    - name: 📊 Get Repository Information
      id: repo-info
      shell: bash
      run: |
        # Get repository information
        if [ -n "$GITHUB_REPOSITORY" ]; then
          REPO_FULL_NAME="$GITHUB_REPOSITORY"
          REPO_URL="https://github.com/$GITHUB_REPOSITORY"
          IFS='/' read -r REPO_OWNER REPO_NAME <<< "$GITHUB_REPOSITORY"
          echo "Using GitHub repository info: $REPO_FULL_NAME"
        else
          # Try to extract from git remote
          REMOTE_URL=$(git config --get remote.origin.url 2>/dev/null || echo "")
          if [[ "$REMOTE_URL" == *"github.com"* ]]; then
            if [[ "$REMOTE_URL" == git@* ]]; then
              REPO_PATH=$(echo "$REMOTE_URL" | sed 's/git@github.com://' | sed 's/\.git$//')
            else
              REPO_PATH=$(echo "$REMOTE_URL" | sed 's|https://github.com/||' | sed 's/\.git$//')
            fi
            REPO_FULL_NAME="$REPO_PATH"
            REPO_URL="https://github.com/$REPO_PATH"
            IFS='/' read -r REPO_OWNER REPO_NAME <<< "$REPO_PATH"
            echo "Extracted from git remote: $REPO_FULL_NAME"
          else
            REPO_FULL_NAME="unknown/unknown"
            REPO_URL="unknown"
            REPO_OWNER="unknown"
            REPO_NAME="unknown"
            echo "Could not determine repository info"
          fi
        fi
        
        # Get current branch
        if [ -n "$GITHUB_REF_NAME" ]; then
          CURRENT_BRANCH="$GITHUB_REF_NAME"
        else
          CURRENT_BRANCH=$(git rev-parse --abbrev-ref HEAD 2>/dev/null || echo "main")
        fi
        
        echo "repo_full_name=$REPO_FULL_NAME" >> $GITHUB_OUTPUT
        echo "repo_url=$REPO_URL" >> $GITHUB_OUTPUT
        echo "repo_owner=$REPO_OWNER" >> $GITHUB_OUTPUT
        echo "repo_name=$REPO_NAME" >> $GITHUB_OUTPUT
        echo "current_branch=$CURRENT_BRANCH" >> $GITHUB_OUTPUT
        
        echo "Repository: $REPO_FULL_NAME"
        echo "URL: $REPO_URL"
        echo "Branch: $CURRENT_BRANCH"

    - name: 📅 Calculate Dates
      id: dates
      shell: bash
      run: |
        # Current date and time
        CURRENT_DATE=$(date -u '+%Y-%m-%d')
        CURRENT_DATETIME=$(date -u '+%Y-%m-%d %H:%M:%S UTC')
        CURRENT_YEAR=$(date -u '+%Y')
        
        echo "date=$CURRENT_DATE" >> $GITHUB_OUTPUT
        echo "datetime=$CURRENT_DATETIME" >> $GITHUB_OUTPUT
        echo "year=$CURRENT_YEAR" >> $GITHUB_OUTPUT
        
        echo "📅 Date: $CURRENT_DATE"
        echo "📅 DateTime: $CURRENT_DATETIME"
        echo "📅 Year: $CURRENT_YEAR"

    - name: 📝 Generate README
      id: generate
      shell: bash
      run: |
        TEMPLATE_PATH="${{ inputs.template-path }}"
        OUTPUT_PATH="${{ inputs.output-path }}"
        FORCE_UPDATE="${{ inputs.force-update }}"
        
        CURRENT_VERSION="${{ steps.version-info.outputs.current_version }}"
        CURRENT_DATE="${{ steps.dates.outputs.date }}"
        CURRENT_DATETIME="${{ steps.dates.outputs.datetime }}"
        CURRENT_YEAR="${{ steps.dates.outputs.year }}"
        REPO_FULL_NAME="${{ steps.repo-info.outputs.repo_full_name }}"
        REPO_URL="${{ steps.repo-info.outputs.repo_url }}"
        REPO_OWNER="${{ steps.repo-info.outputs.repo_owner }}"
        REPO_NAME="${{ steps.repo-info.outputs.repo_name }}"
        CURRENT_BRANCH="${{ steps.repo-info.outputs.current_branch }}"
        
        echo "📝 Generating README..."
        echo "Template: $TEMPLATE_PATH"
        echo "Output: $OUTPUT_PATH"
        echo "Version: $CURRENT_VERSION"
        echo "Repository: $REPO_FULL_NAME"
        
        # Create temporary file for processing
        TEMP_FILE="${OUTPUT_PATH}.tmp"
        
        # Start with template content and replace placeholders in chain
        cat "$TEMPLATE_PATH" | \
        sed "s|{{VERSION}}|$CURRENT_VERSION|g" | \
        sed "s|{{DATE}}|$CURRENT_DATE|g" | \
        sed "s|{{DATETIME}}|$CURRENT_DATETIME|g" | \
        sed "s|{{YEAR}}|$CURRENT_YEAR|g" | \
        sed "s|{{REPO_FULL_NAME}}|$REPO_FULL_NAME|g" | \
        sed "s|{{REPO_URL}}|$REPO_URL|g" | \
        sed "s|{{REPO_OWNER}}|$REPO_OWNER|g" | \
        sed "s|{{REPO_NAME}}|$REPO_NAME|g" | \
        sed "s|{{CURRENT_BRANCH}}|$CURRENT_BRANCH|g" > "$TEMP_FILE"
        
        # Replace input placeholders (only if provided)
        if [ -n "${{ inputs.project-name }}" ]; then
          sed "s|{{PROJECT_NAME}}|${{ inputs.project-name }}|g" "$TEMP_FILE" > "${TEMP_FILE}.new" && mv "${TEMP_FILE}.new" "$TEMP_FILE"
        fi
        if [ -n "${{ inputs.company-name }}" ]; then
          sed "s|{{COMPANY_NAME}}|${{ inputs.company-name }}|g" "$TEMP_FILE" > "${TEMP_FILE}.new" && mv "${TEMP_FILE}.new" "$TEMP_FILE"
        fi
        if [ -n "${{ inputs.project-description }}" ]; then
          sed "s|{{PROJECT_DESCRIPTION}}|${{ inputs.project-description }}|g" "$TEMP_FILE" > "${TEMP_FILE}.new" && mv "${TEMP_FILE}.new" "$TEMP_FILE"
        fi
        if [ -n "${{ inputs.contact-email }}" ]; then
          sed "s|{{CONTACT_EMAIL}}|${{ inputs.contact-email }}|g" "$TEMP_FILE" > "${TEMP_FILE}.new" && mv "${TEMP_FILE}.new" "$TEMP_FILE"
        fi
        if [ -n "${{ inputs.documentation-url }}" ]; then
          sed "s|{{DOCUMENTATION_URL}}|${{ inputs.documentation-url }}|g" "$TEMP_FILE" > "${TEMP_FILE}.new" && mv "${TEMP_FILE}.new" "$TEMP_FILE"
        fi
        if [ -n "${{ inputs.support-url }}" ]; then
          sed "s|{{SUPPORT_URL}}|${{ inputs.support-url }}|g" "$TEMP_FILE" > "${TEMP_FILE}.new" && mv "${TEMP_FILE}.new" "$TEMP_FILE"
        fi
        
        # Check if output file exists and compare
        CHANGES_DETECTED="true"
        if [ -f "$OUTPUT_PATH" ] && [ "$FORCE_UPDATE" != "true" ]; then
          # Create a temporary comparison file with header
          TEMP_COMPARE=$(mktemp)
          {
            echo "<!-- AUTO-GENERATED FILE. DO NOT EDIT. Edit $TEMPLATE_PATH instead. -->"
            echo "<!-- Generated on $CURRENT_DATETIME -->"
            echo ""
            cat "$TEMP_FILE"
          } > "$TEMP_COMPARE"
          
          if cmp -s "$TEMP_COMPARE" "$OUTPUT_PATH"; then
            CHANGES_DETECTED="false"
            echo "ℹ️ No changes detected in README"
          else
            echo "📝 Changes detected in README"
          fi
          rm -f "$TEMP_COMPARE"
        else
          echo "📝 Creating new README or force update requested"
        fi
        
        # Update output file if changes detected or force update
        if [ "$CHANGES_DETECTED" = "true" ] || [ "$FORCE_UPDATE" = "true" ]; then
          # Add generation comment at the top
          {
            echo "<!-- AUTO-GENERATED FILE. DO NOT EDIT. Edit $TEMPLATE_PATH instead. -->"
            echo "<!-- Generated on $CURRENT_DATETIME -->"
            echo ""
            cat "$TEMP_FILE"
          } > "$OUTPUT_PATH"
          
          echo "✅ README updated: $OUTPUT_PATH"
          echo "readme_updated=true" >> $GITHUB_OUTPUT
        else
          echo "⏭️ README unchanged: $OUTPUT_PATH"
          echo "readme_updated=false" >> $GITHUB_OUTPUT
        fi
        
        # Check for unresolved placeholders (optional warning)
        if grep -q "{{[^}]*}}" "$OUTPUT_PATH" 2>/dev/null; then
          echo "⚠️ Found unresolved placeholders:"
          grep -o "{{[^}]*}}" "$OUTPUT_PATH" | sort | uniq | head -5
        fi
        
        # Set outputs
        echo "changes_detected=$CHANGES_DETECTED" >> $GITHUB_OUTPUT
        echo "validation_passed=true" >> $GITHUB_OUTPUT
        echo "current_version=$CURRENT_VERSION" >> $GITHUB_OUTPUT
        
        # Cleanup
        rm -f "$TEMP_FILE"
        
        echo "📝 README generation completed"

branding:
  icon: 'file-text'
  color: 'blue'
