name: 'README Generator'
description: 'Generate README from template with comprehensive placeholder support'
inputs:
  template-path:
    description: 'Path to README template file'
    required: false
    default: 'docs/README.template.MD'
  output-path:
    description: 'Path to output README file'
    required: false
    default: 'README.MD'
  project-name:
    description: 'Project name (overrides auto-detection)'
    required: false
    default: ''
  company-name:
    description: 'Company name'
    required: false
    default: 'BAUER GROUP'
  project-description:
    description: 'Project description'
    required: false
    default: ''
  auto-commit:
    description: 'Auto-commit changes on workflow_dispatch'
    required: false
    default: 'true'
  fail-on-pr:
    description: 'Fail PR if README is out of date'
    required: false
    default: 'true'

outputs:
  readme-updated:
    description: 'Whether README was updated'
    value: ${{ steps.check-changes.outputs.readme-updated }}
  version-used:
    description: 'Version used in README generation'
    value: ${{ steps.determine-version.outputs.version }}

runs:
  using: 'composite'
  steps:
    - name: Setup Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.12'

    - name: Set environment variables
      shell: bash
      run: |
        echo "PROJECT_NAME=${{ inputs.project-name }}" >> "$GITHUB_ENV"
        echo "PROJECT_DESCRIPTION=${{ inputs.project-description }}" >> "$GITHUB_ENV"
        echo "COMPANY_NAME=${{ inputs.company-name }}" >> "$GITHUB_ENV"

    - name: Determine version (latest tag or fallback)
      id: determine-version
      shell: bash
      run: |
        TAG=$(git describe --tags --abbrev=0 2>/dev/null || true)
        if [[ -n "$TAG" ]]; then
          TAG="${TAG#v}"
          echo "RELEASE_VERSION=$TAG" >> "$GITHUB_ENV"
          echo "version=$TAG" >> "$GITHUB_OUTPUT"
        else
          VERSION="0.1.0"
          echo "RELEASE_VERSION=$VERSION" >> "$GITHUB_ENV"
          echo "version=$VERSION" >> "$GITHUB_OUTPUT"
        fi

    - name: Validate template file exists
      shell: bash
      run: |
        if [[ ! -f "${{ inputs.template-path }}" ]]; then
          echo "Error: Template file ${{ inputs.template-path }} not found"
          exit 1
        fi

    - name: Download README generator script
      shell: bash
      run: |
        mkdir -p scripts
        if ! curl -fsSL https://raw.githubusercontent.com/bauer-group/automation-templates/main/scripts/generate_readme.py -o scripts/generate_readme.py; then
          echo "Warning: Could not download script from repository, checking for local version"
          if [[ ! -f "scripts/generate_readme.py" ]]; then
            echo "Error: No README generator script found"
            exit 1
          fi
        fi
        chmod +x scripts/generate_readme.py

    - name: Generate README
      shell: bash
      run: python scripts/generate_readme.py

    - name: Check for README changes
      id: check-changes
      shell: bash
      run: |
        if [[ -n "$(git status --porcelain ${{ inputs.output-path }})" ]]; then
          echo "readme-updated=true" >> "$GITHUB_OUTPUT"
          echo "README changes detected"
        else
          echo "readme-updated=false" >> "$GITHUB_OUTPUT"
          echo "No README changes"
        fi

    - name: Commit README changes (manual runs only)
      if: |
        steps.check-changes.outputs.readme-updated == 'true' &&
        github.event_name == 'workflow_dispatch' &&
        inputs.auto-commit == 'true'
      shell: bash
      run: |
        git config user.name "github-actions[bot]"
        git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
        git add ${{ inputs.output-path }}
        git commit -m "docs(readme): auto-generate README [skip ci]"
        git push

    - name: Fail if README is out-of-date (PRs)
      if: |
        steps.check-changes.outputs.readme-updated == 'true' &&
        github.event_name == 'pull_request' &&
        inputs.fail-on-pr == 'true'
      shell: bash
      run: |
        echo "❌ README ist nicht aktuell!"
        echo ""
        echo "Der ${{ inputs.output-path }} muss aktualisiert werden."
        echo "Führen Sie den README-Generierungs-Workflow manuell aus."
        exit 1
