name: 'Python Code Quality'
description: 'Comprehensive Python code quality checks including linting, formatting, type checking, and security'
author: 'BAUER GROUP'

inputs:
  working-directory:
    description: 'Working directory for all commands'
    required: false
    default: '.'
  # Linting Configuration
  run-lint:
    description: 'Run code linting'
    required: false
    default: 'true'
  linter:
    description: 'Linter to use (flake8, ruff, pylint, pycodestyle)'
    required: false
    default: 'flake8'
  lint-config:
    description: 'Path to linter configuration file'
    required: false
    default: ''
  max-line-length:
    description: 'Maximum line length'
    required: false
    default: '88'
  lint-exclude:
    description: 'Paths to exclude from linting'
    required: false
    default: '.git,__pycache__,venv,node_modules'
  lint-ignore:
    description: 'Error codes to ignore'
    required: false
    default: 'E203,W503'
  # Code Formatting
  run-format-check:
    description: 'Check code formatting'
    required: false
    default: 'true'
  formatter:
    description: 'Code formatter (black, autopep8, yapf)'
    required: false
    default: 'black'
  format-check-only:
    description: 'Only check formatting, dont auto-fix'
    required: false
    default: 'true'
  format-target-version:
    description: 'Python target version for formatting'
    required: false
    default: 'py312'
  # Import Sorting
  run-import-sort:
    description: 'Check/fix import sorting'
    required: false
    default: 'true'
  import-sorter:
    description: 'Import sorter (isort, reorder-python-imports)'
    required: false
    default: 'isort'
  import-sort-check-only:
    description: 'Only check import sorting, dont auto-fix'
    required: false
    default: 'true'
  # Type Checking
  run-type-check:
    description: 'Run static type checking'
    required: false
    default: 'false'
  type-checker:
    description: 'Type checker (mypy, pyright, pyre)'
    required: false
    default: 'mypy'
  type-check-strict:
    description: 'Use strict type checking'
    required: false
    default: 'false'
  type-check-args:
    description: 'Additional type checker arguments'
    required: false
    default: '--ignore-missing-imports'
  # Security Scanning
  run-security-scan:
    description: 'Run security vulnerability scanning'
    required: false
    default: 'true'
  security-tools:
    description: 'Security tools (bandit, safety, semgrep)'
    required: false
    default: 'bandit,safety'
  security-confidence:
    description: 'Bandit confidence level (low, medium, high)'
    required: false
    default: 'medium'
  security-severity:
    description: 'Bandit severity level (low, medium, high)'
    required: false
    default: 'medium'
  # Documentation
  run-doc-check:
    description: 'Check documentation style'
    required: false
    default: 'false'
  doc-checker:
    description: 'Documentation checker (pydocstyle, darglint)'
    required: false
    default: 'pydocstyle'
  # Complexity Analysis
  run-complexity-check:
    description: 'Check code complexity'
    required: false
    default: 'false'
  complexity-tool:
    description: 'Complexity checker (radon, mccabe)'
    required: false
    default: 'radon'
  max-complexity:
    description: 'Maximum cyclomatic complexity'
    required: false
    default: '10'
  # Dead Code Detection
  run-dead-code-check:
    description: 'Check for dead/unused code'
    required: false
    default: 'false'
  dead-code-tool:
    description: 'Dead code checker (vulture, unimport)'
    required: false
    default: 'vulture'
  # Error Handling
  fail-on-error:
    description: 'Fail the action on any quality issues'
    required: false
    default: 'false'
  # Output Configuration
  generate-report:
    description: 'Generate quality report'
    required: false
    default: 'true'
  report-format:
    description: 'Report format (json, html, markdown)'
    required: false
    default: 'json,html'

outputs:
  lint-result:
    description: 'Linting result (pass/fail/skipped)'
    value: ${{ steps.lint.outputs.result }}
  lint-issues:
    description: 'Number of linting issues found'
    value: ${{ steps.lint.outputs.issues }}
  format-result:
    description: 'Formatting check result (pass/fail/skipped)'
    value: ${{ steps.format.outputs.result }}
  format-issues:
    description: 'Number of formatting issues found'
    value: ${{ steps.format.outputs.issues }}
  type-check-result:
    description: 'Type checking result (pass/fail/skipped)'
    value: ${{ steps.type-check.outputs.result }}
  type-check-issues:
    description: 'Number of type checking issues found'
    value: ${{ steps.type-check.outputs.issues }}
  security-result:
    description: 'Security scan result (pass/fail/skipped)'
    value: ${{ steps.security.outputs.result }}
  security-issues:
    description: 'Number of security issues found'
    value: ${{ steps.security.outputs.issues }}
  overall-result:
    description: 'Overall quality check result (pass/fail)'
    value: ${{ steps.summary.outputs.result }}
  quality-score:
    description: 'Overall quality score (0-100)'
    value: ${{ steps.summary.outputs.score }}
  report-path:
    description: 'Path to generated quality report'
    value: ${{ steps.summary.outputs.report-path }}

runs:
  using: 'composite'
  steps:
    - name: üîß Setup Quality Tools
      shell: bash
      working-directory: ${{ inputs.working-directory }}
      run: |
        echo "üîß Setting up Python code quality tools..."
        mkdir -p quality-reports
        
        # Install tools based on configuration
        TOOLS_TO_INSTALL=""
        
        if [ "${{ inputs.run-lint }}" = "true" ]; then
          case "${{ inputs.linter }}" in
            flake8) TOOLS_TO_INSTALL="$TOOLS_TO_INSTALL flake8" ;;
            ruff) TOOLS_TO_INSTALL="$TOOLS_TO_INSTALL ruff" ;;
            pylint) TOOLS_TO_INSTALL="$TOOLS_TO_INSTALL pylint" ;;
            pycodestyle) TOOLS_TO_INSTALL="$TOOLS_TO_INSTALL pycodestyle" ;;
          esac
        fi
        
        if [ "${{ inputs.run-format-check }}" = "true" ]; then
          case "${{ inputs.formatter }}" in
            black) TOOLS_TO_INSTALL="$TOOLS_TO_INSTALL black" ;;
            autopep8) TOOLS_TO_INSTALL="$TOOLS_TO_INSTALL autopep8" ;;
            yapf) TOOLS_TO_INSTALL="$TOOLS_TO_INSTALL yapf" ;;
          esac
        fi
        
        if [ "${{ inputs.run-import-sort }}" = "true" ]; then
          case "${{ inputs.import-sorter }}" in
            isort) TOOLS_TO_INSTALL="$TOOLS_TO_INSTALL isort" ;;
            reorder-python-imports) TOOLS_TO_INSTALL="$TOOLS_TO_INSTALL reorder-python-imports" ;;
          esac
        fi
        
        if [ "${{ inputs.run-type-check }}" = "true" ]; then
          case "${{ inputs.type-checker }}" in
            mypy) TOOLS_TO_INSTALL="$TOOLS_TO_INSTALL mypy" ;;
            pyright) echo "Installing pyright via npm..." && npm install -g pyright ;;
            pyre) TOOLS_TO_INSTALL="$TOOLS_TO_INSTALL pyre-check" ;;
          esac
        fi
        
        if [ "${{ inputs.run-security-scan }}" = "true" ]; then
          IFS=',' read -ra SECURITY_TOOLS <<< "${{ inputs.security-tools }}"
          for tool in "${SECURITY_TOOLS[@]}"; do
            case "$tool" in
              bandit) TOOLS_TO_INSTALL="$TOOLS_TO_INSTALL bandit" ;;
              safety) TOOLS_TO_INSTALL="$TOOLS_TO_INSTALL safety" ;;
              semgrep) TOOLS_TO_INSTALL="$TOOLS_TO_INSTALL semgrep" ;;
            esac
          done
        fi
        
        if [ "${{ inputs.run-doc-check }}" = "true" ]; then
          case "${{ inputs.doc-checker }}" in
            pydocstyle) TOOLS_TO_INSTALL="$TOOLS_TO_INSTALL pydocstyle" ;;
            darglint) TOOLS_TO_INSTALL="$TOOLS_TO_INSTALL darglint" ;;
          esac
        fi
        
        if [ "${{ inputs.run-complexity-check }}" = "true" ]; then
          case "${{ inputs.complexity-tool }}" in
            radon) TOOLS_TO_INSTALL="$TOOLS_TO_INSTALL radon" ;;
            mccabe) TOOLS_TO_INSTALL="$TOOLS_TO_INSTALL mccabe" ;;
          esac
        fi
        
        if [ "${{ inputs.run-dead-code-check }}" = "true" ]; then
          case "${{ inputs.dead-code-tool }}" in
            vulture) TOOLS_TO_INSTALL="$TOOLS_TO_INSTALL vulture" ;;
            unimport) TOOLS_TO_INSTALL="$TOOLS_TO_INSTALL unimport" ;;
          esac
        fi
        
        if [ -n "$TOOLS_TO_INSTALL" ]; then
          echo "Installing tools: $TOOLS_TO_INSTALL"
          pip install $TOOLS_TO_INSTALL
        fi

    - name: üßπ Run Linting
      id: lint
      if: inputs.run-lint == 'true'
      shell: bash
      working-directory: ${{ inputs.working-directory }}
      continue-on-error: true
      run: |
        echo "üßπ Running code linting with ${{ inputs.linter }}..."
        
        LINT_RESULT="pass"
        LINT_ISSUES=0
        
        case "${{ inputs.linter }}" in
          flake8)
            CONFIG_ARG=""
            if [ -n "${{ inputs.lint-config }}" ] && [ -f "${{ inputs.lint-config }}" ]; then
              CONFIG_ARG="--config=${{ inputs.lint-config }}"
            fi
            
            if flake8 . \
              --max-line-length=${{ inputs.max-line-length }} \
              --exclude=${{ inputs.lint-exclude }} \
              --ignore=${{ inputs.lint-ignore }} \
              --format=json \
              --output-file=quality-reports/flake8-report.json \
              $CONFIG_ARG; then
              echo "‚úÖ No linting issues found"
            else
              LINT_RESULT="fail"
              LINT_ISSUES=$(jq '. | length' quality-reports/flake8-report.json 2>/dev/null || echo "0")
              echo "‚ùå Found $LINT_ISSUES linting issues"
            fi
            ;;
            
          ruff)
            if ruff check . \
              --output-format=json \
              --output-file=quality-reports/ruff-report.json; then
              echo "‚úÖ No linting issues found"
            else
              LINT_RESULT="fail"
              LINT_ISSUES=$(jq '. | length' quality-reports/ruff-report.json 2>/dev/null || echo "0")
              echo "‚ùå Found $LINT_ISSUES linting issues"
            fi
            ;;
            
          pylint)
            if pylint --output-format=json --reports=no **/*.py > quality-reports/pylint-report.json 2>&1; then
              echo "‚úÖ No linting issues found"
            else
              LINT_RESULT="fail"
              LINT_ISSUES=$(jq '. | length' quality-reports/pylint-report.json 2>/dev/null || echo "0")
              echo "‚ùå Found $LINT_ISSUES linting issues"
            fi
            ;;
        esac
        
        echo "result=$LINT_RESULT" >> $GITHUB_OUTPUT
        echo "issues=$LINT_ISSUES" >> $GITHUB_OUTPUT

    - name: üé® Check Code Formatting
      id: format
      if: inputs.run-format-check == 'true'
      shell: bash
      working-directory: ${{ inputs.working-directory }}
      continue-on-error: true
      run: |
        echo "üé® Checking code formatting with ${{ inputs.formatter }}..."
        
        FORMAT_RESULT="pass"
        FORMAT_ISSUES=0
        
        case "${{ inputs.formatter }}" in
          black)
            if [ "${{ inputs.format-check-only }}" = "true" ]; then
              if black --check --diff \
                --target-version=${{ inputs.format-target-version }} \
                --line-length=${{ inputs.max-line-length }} \
                . > quality-reports/black-report.txt 2>&1; then
                echo "‚úÖ Code formatting is correct"
              else
                FORMAT_RESULT="fail"
                FORMAT_ISSUES=$(grep -c "would reformat" quality-reports/black-report.txt 2>/dev/null || echo "0")
                echo "‚ùå Found $FORMAT_ISSUES formatting issues"
              fi
            else
              black --target-version=${{ inputs.format-target-version }} \
                --line-length=${{ inputs.max-line-length }} .
              echo "‚úÖ Code formatted automatically"
            fi
            ;;
            
          autopep8)
            if [ "${{ inputs.format-check-only }}" = "true" ]; then
              if autopep8 --diff --recursive . > quality-reports/autopep8-report.txt; then
                if [ -s quality-reports/autopep8-report.txt ]; then
                  FORMAT_RESULT="fail"
                  FORMAT_ISSUES=$(grep -c "^--- " quality-reports/autopep8-report.txt 2>/dev/null || echo "0")
                  echo "‚ùå Found $FORMAT_ISSUES formatting issues"
                else
                  echo "‚úÖ Code formatting is correct"
                fi
              fi
            else
              autopep8 --in-place --recursive .
              echo "‚úÖ Code formatted automatically"
            fi
            ;;
            
          yapf)
            if [ "${{ inputs.format-check-only }}" = "true" ]; then
              if yapf --diff --recursive . > quality-reports/yapf-report.txt; then
                if [ -s quality-reports/yapf-report.txt ]; then
                  FORMAT_RESULT="fail"
                  FORMAT_ISSUES=$(grep -c "^--- " quality-reports/yapf-report.txt 2>/dev/null || echo "0")
                  echo "‚ùå Found $FORMAT_ISSUES formatting issues"
                else
                  echo "‚úÖ Code formatting is correct"
                fi
              fi
            else
              yapf --in-place --recursive .
              echo "‚úÖ Code formatted automatically"
            fi
            ;;
        esac
        
        echo "result=$FORMAT_RESULT" >> $GITHUB_OUTPUT
        echo "issues=$FORMAT_ISSUES" >> $GITHUB_OUTPUT

    - name: üì§ Check Import Sorting
      id: import-sort
      if: inputs.run-import-sort == 'true'
      shell: bash
      working-directory: ${{ inputs.working-directory }}
      continue-on-error: true
      run: |
        echo "üì§ Checking import sorting with ${{ inputs.import-sorter }}..."
        
        case "${{ inputs.import-sorter }}" in
          isort)
            if [ "${{ inputs.import-sort-check-only }}" = "true" ]; then
              isort --check-only --diff . > quality-reports/isort-report.txt 2>&1 || true
              if [ -s quality-reports/isort-report.txt ]; then
                echo "‚ùå Import sorting issues found"
              else
                echo "‚úÖ Import sorting is correct"
              fi
            else
              isort .
              echo "‚úÖ Imports sorted automatically"
            fi
            ;;
            
          reorder-python-imports)
            if [ "${{ inputs.import-sort-check-only }}" = "true" ]; then
              find . -name "*.py" -exec reorder-python-imports --diff {} \; > quality-reports/reorder-report.txt 2>&1 || true
              if [ -s quality-reports/reorder-report.txt ]; then
                echo "‚ùå Import sorting issues found"
              else
                echo "‚úÖ Import sorting is correct"
              fi
            else
              find . -name "*.py" -exec reorder-python-imports {} \;
              echo "‚úÖ Imports sorted automatically"
            fi
            ;;
        esac

    - name: üî§ Run Type Checking
      id: type-check
      if: inputs.run-type-check == 'true'
      shell: bash
      working-directory: ${{ inputs.working-directory }}
      continue-on-error: true
      run: |
        echo "üî§ Running type checking with ${{ inputs.type-checker }}..."
        
        TYPE_CHECK_RESULT="pass"
        TYPE_CHECK_ISSUES=0
        
        case "${{ inputs.type-checker }}" in
          mypy)
            MYPY_ARGS="${{ inputs.type-check-args }}"
            if [ "${{ inputs.type-check-strict }}" = "true" ]; then
              MYPY_ARGS="$MYPY_ARGS --strict"
            fi
            
            if mypy . $MYPY_ARGS --json-report quality-reports/mypy > quality-reports/mypy-report.txt 2>&1; then
              echo "‚úÖ No type checking issues found"
            else
              TYPE_CHECK_RESULT="fail"
              TYPE_CHECK_ISSUES=$(grep -c "error:" quality-reports/mypy-report.txt 2>/dev/null || echo "0")
              echo "‚ùå Found $TYPE_CHECK_ISSUES type checking issues"
            fi
            ;;
            
          pyright)
            if pyright --outputjson > quality-reports/pyright-report.json; then
              echo "‚úÖ No type checking issues found"
            else
              TYPE_CHECK_RESULT="fail"
              TYPE_CHECK_ISSUES=$(jq '.summary.errorCount // 0' quality-reports/pyright-report.json 2>/dev/null || echo "0")
              echo "‚ùå Found $TYPE_CHECK_ISSUES type checking issues"
            fi
            ;;
        esac
        
        echo "result=$TYPE_CHECK_RESULT" >> $GITHUB_OUTPUT
        echo "issues=$TYPE_CHECK_ISSUES" >> $GITHUB_OUTPUT

    - name: üõ°Ô∏è Run Security Scanning
      id: security
      if: inputs.run-security-scan == 'true'
      shell: bash
      working-directory: ${{ inputs.working-directory }}
      continue-on-error: true
      run: |
        echo "üõ°Ô∏è Running security scanning..."
        
        SECURITY_RESULT="pass"
        SECURITY_ISSUES=0
        
        IFS=',' read -ra SECURITY_TOOLS <<< "${{ inputs.security-tools }}"
        for tool in "${SECURITY_TOOLS[@]}"; do
          case "$tool" in
            bandit)
              echo "Running Bandit security scan..."
              if bandit -r . \
                -f json \
                -o quality-reports/bandit-report.json \
                -i \
                -ll \
                --confidence=${{ inputs.security-confidence }} \
                --severity=${{ inputs.security-severity }}; then
                echo "‚úÖ No security issues found by Bandit"
              else
                BANDIT_ISSUES=$(jq '.results | length' quality-reports/bandit-report.json 2>/dev/null || echo "0")
                SECURITY_ISSUES=$((SECURITY_ISSUES + BANDIT_ISSUES))
                SECURITY_RESULT="fail"
                echo "‚ùå Found $BANDIT_ISSUES security issues with Bandit"
              fi
              ;;
              
            safety)
              echo "Running Safety dependency scan..."
              if safety check --json --output quality-reports/safety-report.json; then
                echo "‚úÖ No vulnerable dependencies found"
              else
                SAFETY_ISSUES=$(jq '. | length' quality-reports/safety-report.json 2>/dev/null || echo "0")
                SECURITY_ISSUES=$((SECURITY_ISSUES + SAFETY_ISSUES))
                SECURITY_RESULT="fail"
                echo "‚ùå Found $SAFETY_ISSUES vulnerable dependencies"
              fi
              ;;
              
            semgrep)
              echo "Running Semgrep security scan..."
              if semgrep --config=auto --json --output=quality-reports/semgrep-report.json .; then
                SEMGREP_ISSUES=$(jq '.results | length' quality-reports/semgrep-report.json 2>/dev/null || echo "0")
                if [ "$SEMGREP_ISSUES" -gt 0 ]; then
                  SECURITY_ISSUES=$((SECURITY_ISSUES + SEMGREP_ISSUES))
                  SECURITY_RESULT="fail"
                  echo "‚ùå Found $SEMGREP_ISSUES security issues with Semgrep"
                else
                  echo "‚úÖ No security issues found by Semgrep"
                fi
              fi
              ;;
          esac
        done
        
        echo "result=$SECURITY_RESULT" >> $GITHUB_OUTPUT
        echo "issues=$SECURITY_ISSUES" >> $GITHUB_OUTPUT

    - name: üìö Check Documentation
      if: inputs.run-doc-check == 'true'
      shell: bash
      working-directory: ${{ inputs.working-directory }}
      continue-on-error: true
      run: |
        echo "üìö Checking documentation style..."
        
        case "${{ inputs.doc-checker }}" in
          pydocstyle)
            pydocstyle . > quality-reports/pydocstyle-report.txt 2>&1 || true
            if [ -s quality-reports/pydocstyle-report.txt ]; then
              echo "‚ùå Documentation style issues found"
            else
              echo "‚úÖ Documentation style is correct"
            fi
            ;;
            
          darglint)
            darglint **/*.py > quality-reports/darglint-report.txt 2>&1 || true
            if [ -s quality-reports/darglint-report.txt ]; then
              echo "‚ùå Documentation issues found"
            else
              echo "‚úÖ Documentation is correct"
            fi
            ;;
        esac

    - name: üîç Check Code Complexity
      if: inputs.run-complexity-check == 'true'
      shell: bash
      working-directory: ${{ inputs.working-directory }}
      continue-on-error: true
      run: |
        echo "üîç Checking code complexity..."
        
        case "${{ inputs.complexity-tool }}" in
          radon)
            radon cc . --json > quality-reports/complexity-report.json
            radon mi . --json > quality-reports/maintainability-report.json
            echo "‚úÖ Complexity analysis completed"
            ;;
            
          mccabe)
            find . -name "*.py" -exec python -m mccabe --min ${{ inputs.max-complexity }} {} \; > quality-reports/mccabe-report.txt 2>&1 || true
            if [ -s quality-reports/mccabe-report.txt ]; then
              echo "‚ùå High complexity code found"
            else
              echo "‚úÖ Code complexity is acceptable"
            fi
            ;;
        esac

    - name: üíÄ Check Dead Code
      if: inputs.run-dead-code-check == 'true'
      shell: bash
      working-directory: ${{ inputs.working-directory }}
      continue-on-error: true
      run: |
        echo "üíÄ Checking for dead code..."
        
        case "${{ inputs.dead-code-tool }}" in
          vulture)
            vulture . > quality-reports/vulture-report.txt 2>&1 || true
            if [ -s quality-reports/vulture-report.txt ]; then
              echo "‚ùå Dead code found"
            else
              echo "‚úÖ No dead code detected"
            fi
            ;;
            
          unimport)
            unimport --check --diff . > quality-reports/unimport-report.txt 2>&1 || true
            if [ -s quality-reports/unimport-report.txt ]; then
              echo "‚ùå Unused imports found"
            else
              echo "‚úÖ No unused imports detected"
            fi
            ;;
        esac

    - name: üìä Generate Quality Summary
      id: summary
      shell: bash
      working-directory: ${{ inputs.working-directory }}
      run: |
        echo "üìä Generating quality summary..."
        
        LINT_RESULT="${{ steps.lint.outputs.result || 'skipped' }}"
        FORMAT_RESULT="${{ steps.format.outputs.result || 'skipped' }}"
        TYPE_CHECK_RESULT="${{ steps.type-check.outputs.result || 'skipped' }}"
        SECURITY_RESULT="${{ steps.security.outputs.result || 'skipped' }}"
        
        LINT_ISSUES="${{ steps.lint.outputs.issues || '0' }}"
        FORMAT_ISSUES="${{ steps.format.outputs.issues || '0' }}"
        TYPE_CHECK_ISSUES="${{ steps.type-check.outputs.issues || '0' }}"
        SECURITY_ISSUES="${{ steps.security.outputs.issues || '0' }}"
        
        TOTAL_ISSUES=$((LINT_ISSUES + FORMAT_ISSUES + TYPE_CHECK_ISSUES + SECURITY_ISSUES))
        
        # Calculate quality score
        QUALITY_SCORE=100
        if [ "$LINT_RESULT" = "fail" ]; then
          QUALITY_SCORE=$((QUALITY_SCORE - 20))
        fi
        if [ "$FORMAT_RESULT" = "fail" ]; then
          QUALITY_SCORE=$((QUALITY_SCORE - 15))
        fi
        if [ "$TYPE_CHECK_RESULT" = "fail" ]; then
          QUALITY_SCORE=$((QUALITY_SCORE - 25))
        fi
        if [ "$SECURITY_RESULT" = "fail" ]; then
          QUALITY_SCORE=$((QUALITY_SCORE - 40))
        fi
        
        if [ $QUALITY_SCORE -lt 0 ]; then
          QUALITY_SCORE=0
        fi
        
        # Determine overall result
        OVERALL_RESULT="pass"
        if [ "$LINT_RESULT" = "fail" ] || [ "$FORMAT_RESULT" = "fail" ] || [ "$TYPE_CHECK_RESULT" = "fail" ] || [ "$SECURITY_RESULT" = "fail" ]; then
          OVERALL_RESULT="fail"
        fi
        
        # Generate reports
        if [ "${{ inputs.generate-report }}" = "true" ]; then
          # JSON Report
          cat > quality-reports/quality-summary.json << EOF
{
  "overall_result": "$OVERALL_RESULT",
  "quality_score": $QUALITY_SCORE,
  "total_issues": $TOTAL_ISSUES,
  "checks": {
    "linting": {
      "result": "$LINT_RESULT",
      "issues": $LINT_ISSUES,
      "tool": "${{ inputs.linter }}"
    },
    "formatting": {
      "result": "$FORMAT_RESULT",
      "issues": $FORMAT_ISSUES,
      "tool": "${{ inputs.formatter }}"
    },
    "type_checking": {
      "result": "$TYPE_CHECK_RESULT",
      "issues": $TYPE_CHECK_ISSUES,
      "tool": "${{ inputs.type-checker }}"
    },
    "security": {
      "result": "$SECURITY_RESULT",
      "issues": $SECURITY_ISSUES,
      "tools": "${{ inputs.security-tools }}"
    }
  }
}
EOF
          
          # Markdown Report
          cat > quality-reports/quality-summary.md << EOF
# üîç Python Code Quality Report

**Overall Result:** $([[ "$OVERALL_RESULT" == "pass" ]] && echo "‚úÖ PASS" || echo "‚ùå FAIL")
**Quality Score:** $QUALITY_SCORE/100
**Total Issues:** $TOTAL_ISSUES

## üìä Check Results

| Check | Result | Issues | Tool |
|-------|--------|--------|------|
| **Linting** | $([[ "$LINT_RESULT" == "pass" ]] && echo "‚úÖ" || [[ "$LINT_RESULT" == "fail" ]] && echo "‚ùå" || echo "‚è≠Ô∏è") $LINT_RESULT | $LINT_ISSUES | ${{ inputs.linter }} |
| **Formatting** | $([[ "$FORMAT_RESULT" == "pass" ]] && echo "‚úÖ" || [[ "$FORMAT_RESULT" == "fail" ]] && echo "‚ùå" || echo "‚è≠Ô∏è") $FORMAT_RESULT | $FORMAT_ISSUES | ${{ inputs.formatter }} |
| **Type Checking** | $([[ "$TYPE_CHECK_RESULT" == "pass" ]] && echo "‚úÖ" || [[ "$TYPE_CHECK_RESULT" == "fail" ]] && echo "‚ùå" || echo "‚è≠Ô∏è") $TYPE_CHECK_RESULT | $TYPE_CHECK_ISSUES | ${{ inputs.type-checker }} |
| **Security** | $([[ "$SECURITY_RESULT" == "pass" ]] && echo "‚úÖ" || [[ "$SECURITY_RESULT" == "fail" ]] && echo "‚ùå" || echo "‚è≠Ô∏è") $SECURITY_RESULT | $SECURITY_ISSUES | ${{ inputs.security-tools }} |

## üìã Recommendations

EOF

          if [ "$LINT_RESULT" = "fail" ]; then
            echo "- üßπ **Fix linting issues:** Review and fix the $LINT_ISSUES linting violations" >> quality-reports/quality-summary.md
          fi
          
          if [ "$FORMAT_RESULT" = "fail" ]; then
            echo "- üé® **Fix formatting:** Use \`${{ inputs.formatter }}\` to format your code" >> quality-reports/quality-summary.md
          fi
          
          if [ "$TYPE_CHECK_RESULT" = "fail" ]; then
            echo "- üî§ **Fix type issues:** Add type hints and fix $TYPE_CHECK_ISSUES type checking errors" >> quality-reports/quality-summary.md
          fi
          
          if [ "$SECURITY_RESULT" = "fail" ]; then
            echo "- üõ°Ô∏è **Address security issues:** Fix $SECURITY_ISSUES security vulnerabilities immediately" >> quality-reports/quality-summary.md
          fi
          
          echo "" >> quality-reports/quality-summary.md
          echo "*Generated by Python Code Quality Action*" >> quality-reports/quality-summary.md
        fi
        
        echo "result=$OVERALL_RESULT" >> $GITHUB_OUTPUT
        echo "score=$QUALITY_SCORE" >> $GITHUB_OUTPUT
        echo "report-path=quality-reports/quality-summary.json" >> $GITHUB_OUTPUT
        
        echo "üìä Quality Summary:"
        echo "  ‚Ä¢ Overall Result: $OVERALL_RESULT"
        echo "  ‚Ä¢ Quality Score: $QUALITY_SCORE/100"
        echo "  ‚Ä¢ Total Issues: $TOTAL_ISSUES"

    - name: üì§ Upload Quality Reports
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: python-quality-reports
        path: ${{ inputs.working-directory }}/quality-reports/
        retention-days: 30

    - name: ‚ùå Fail on Quality Issues
      if: inputs.fail-on-error == 'true' && steps.summary.outputs.result == 'fail'
      shell: bash
      run: |
        echo "‚ùå Code quality checks failed!"
        echo "Quality Score: ${{ steps.summary.outputs.score }}/100"
        echo "Review the quality reports and fix the issues."
        exit 1

branding:
  icon: 'award'
  color: 'purple'