name: 'Dual Security Scan'
description: 'Comprehensive security scanning with Gitleaks and GitGuardian ggshield options'
author: 'BAUER GROUP'

inputs:
  scan-engine:
    description: 'Security scan engine (gitleaks, gitguardian, both)'
    required: false
    default: 'both'
  scan-type:
    description: 'Type of security scan (secrets, vulnerabilities, all)'
    required: false
    default: 'all'
  fail-on-findings:
    description: 'Fail the workflow if security issues are found'
    required: false
    default: 'true'
  exclude-paths:
    description: 'Paths to exclude from scanning (comma-separated)'
    required: false
    default: '.git,node_modules,vendor'
  secrets-patterns:
    description: 'Additional custom patterns for secrets detection'
    required: false
    default: ''
  gitguardian-api-key:
    description: 'GitGuardian API key (required for GitGuardian scanning)'
    required: false
    default: ''
  gitleaks-license:
    description: 'Gitleaks Pro license key (required for Organizations)'
    required: false
    default: ''
  minimum-severity:
    description: 'Minimum severity level for GitGuardian (low, medium, high, critical)'
    required: false
    default: 'medium'
  token:
    description: 'GitHub Token for API access'
    required: true

outputs:
  gitleaks-secrets-found:
    description: 'Whether secrets were found by Gitleaks'
    value: ${{ steps.process-gitleaks.outputs.secrets-found }}
  gitguardian-secrets-found:
    description: 'Number of secrets found by GitGuardian'
    value: ${{ steps.gitguardian-scan.outputs.secrets-found }}
  gitguardian-policy-violations:
    description: 'Number of policy violations found by GitGuardian'
    value: ${{ steps.gitguardian-scan.outputs.policy-violations }}
  vulnerabilities-found:
    description: 'Whether vulnerabilities were found'
    value: ${{ steps.vulnerability-scan.outputs.vulnerabilities-found }}
  scan-results:
    description: 'Summary of scan results'
    value: ${{ steps.summary.outputs.scan-results }}
  security-score:
    description: 'Overall security score (0-100)'
    value: ${{ steps.summary.outputs.security-score }}
  best-engine-score:
    description: 'Best security score from available engines'
    value: ${{ steps.summary.outputs.best-engine-score }}
  engines-used:
    description: 'List of security engines used'
    value: ${{ steps.summary.outputs.engines-used }}

runs:
  using: 'composite'
  steps:
    - name: �️ Setup Dual Security Scanning
      shell: bash
      run: |
        echo "🛡️ Initializing Dual Security Scan"
        echo "Scan Engine: ${{ inputs.scan-engine }}"
        echo "Scan Type: ${{ inputs.scan-type }}"
        echo "Fail on Findings: ${{ inputs.fail-on-findings }}"
        echo "Excluded Paths: ${{ inputs.exclude-paths }}"
        echo "Minimum Severity: ${{ inputs.minimum-severity }}"
        
        mkdir -p security-reports
        
        # Validate GitGuardian API key if needed
        if [[ "${{ inputs.scan-engine }}" == "gitguardian" || "${{ inputs.scan-engine }}" == "both" ]]; then
          if [ -z "${{ inputs.gitguardian-api-key }}" ]; then
            echo "⚠️ GitGuardian API key not provided - skipping GitGuardian scan"
            echo "SKIP_GITGUARDIAN=true" >> $GITHUB_ENV
          else
            echo "✅ GitGuardian API key provided"
            echo "SKIP_GITGUARDIAN=false" >> $GITHUB_ENV
          fi
        else
          echo "SKIP_GITGUARDIAN=true" >> $GITHUB_ENV
        fi

    - name: 🔐 Gitleaks Secrets Detection
      id: gitleaks-scan
      if: (inputs.scan-type == 'all' || inputs.scan-type == 'secrets') && (inputs.scan-engine == 'gitleaks' || inputs.scan-engine == 'both')
      uses: gitleaks/gitleaks-action@v2
      env:
        GITHUB_TOKEN: ${{ inputs.token }}
        GITLEAKS_LICENSE: ${{ inputs.gitleaks-license }}
      continue-on-error: true

    - name: 📊 Process Gitleaks Results  
      id: process-gitleaks
      if: (inputs.scan-type == 'all' || inputs.scan-type == 'secrets') && (inputs.scan-engine == 'gitleaks' || inputs.scan-engine == 'both')
      shell: bash
      run: |
        echo "📊 Processing Gitleaks results..."
        
        # Check if gitleaks found any secrets
        if [ "${{ steps.gitleaks-scan.outcome }}" == "failure" ]; then
          echo "❌ Gitleaks detected secrets!"
          echo "secrets-found=true" >> $GITHUB_OUTPUT
        else
          echo "✅ No secrets detected by Gitleaks" 
          echo "secrets-found=false" >> $GITHUB_OUTPUT
        fi
        
        # Create security reports directory
        mkdir -p security-reports/gitleaks
        
        # Store gitleaks results if available
        if [ -f "results.sarif" ]; then
          cp results.sarif security-reports/gitleaks/gitleaks-results.sarif
          echo "📄 Gitleaks SARIF report saved"
        fi

    - name: 🛡️ GitGuardian Security Scan
      id: gitguardian-scan
      if: (inputs.scan-type == 'all' || inputs.scan-type == 'secrets') && (inputs.scan-engine == 'gitguardian' || inputs.scan-engine == 'both') && env.SKIP_GITGUARDIAN != 'true'
      uses: ./.github/actions/gitguardian-scan
      with:
        scan-mode: 'ci'
        fail-on-findings: 'false'
        minimum-severity: ${{ inputs.minimum-severity }}
        exclude-paths: ${{ inputs.exclude-paths }}
        gitguardian-api-key: ${{ inputs.gitguardian-api-key }}
        all-policies: 'true'
        verbose: 'false'
        output-format: 'json'
        token: ${{ inputs.token }}

    - name: 📋 Copy GitGuardian Reports
      if: steps.gitguardian-scan.outputs.report-path != ''
      shell: bash
      run: |
        echo "📋 Copying GitGuardian reports..."
        GITGUARDIAN_REPORT_PATH="${{ steps.gitguardian-scan.outputs.report-path }}"
        TARGET_PATH="security-reports/gitguardian"
        
        if [ -d "$GITGUARDIAN_REPORT_PATH" ] && [ "$GITGUARDIAN_REPORT_PATH" != "$TARGET_PATH" ]; then
          mkdir -p "$TARGET_PATH"
          # Only copy if source and target are different
          if [ "$(readlink -f "$GITGUARDIAN_REPORT_PATH")" != "$(readlink -f "$TARGET_PATH")" ]; then
            cp -r "$GITGUARDIAN_REPORT_PATH"/* "$TARGET_PATH/" 2>/dev/null || echo "No files to copy"
            echo "✅ GitGuardian reports copied from $GITGUARDIAN_REPORT_PATH to $TARGET_PATH"
          else
            echo "ℹ️ Source and target are the same, skipping copy"
          fi
        elif [ -d "$GITGUARDIAN_REPORT_PATH" ]; then
          echo "ℹ️ Reports already in target location: $GITGUARDIAN_REPORT_PATH"
        fi

    - name: 🛡️ Vulnerability Scanning
      id: vulnerability-scan
      if: inputs.scan-type == 'all' || inputs.scan-type == 'vulnerabilities'
      shell: bash
      run: |
        echo "🔍 Running vulnerability scan..."
        
        # Initialize vulnerability status
        VULNERABILITIES_FOUND=false
        
        # Scan for known vulnerable files/patterns
        echo "Checking for vulnerable patterns..."
        
        # Check for outdated dependencies (basic patterns)
        VULN_PATTERNS=(
          "jquery.*['\"]1\.[0-7]"
          "jquery.*['\"]2\.[01]"
          "lodash.*['\"][23]\."
          "express.*['\"][23]\."
          "minimist.*['\"]0\."
          "serialize-javascript.*['\"][12]\."
        )
        
        mkdir -p security-reports/vulnerabilities
        echo "[]" > security-reports/vulnerabilities/vulnerabilities.json
        
        # Check patterns and set flag if any found
        for pattern in "${VULN_PATTERNS[@]}"; do
          if grep -r -E "$pattern" . --exclude-dir=.git --exclude-dir=node_modules --exclude-dir=vendor 2>/dev/null | head -1 | grep -q .; then
            echo "❌ Potentially vulnerable dependency found: $pattern"
            VULNERABILITIES_FOUND=true
          fi
        done
        
        # Check for security-sensitive file permissions
        echo "Checking file permissions..."
        if find . -type f \( -name "*.key" -o -name "*.pem" -o -name "*.p12" -o -name "*.pfx" \) 2>/dev/null | head -5 | while read file; do
          if [ -f "$file" ]; then
            echo "ℹ️ Found security file: $file"
          fi
        done; then
          echo "ℹ️ File permission check completed"
        fi
        
        # Check for hardcoded IPs and sensitive URLs
        echo "Checking for hardcoded sensitive data..."
        if grep -r -E "([0-9]{1,3}\.){3}[0-9]{1,3}" . --exclude-dir=.git --exclude-dir=node_modules --include="*.js" --include="*.py" --include="*.java" --include="*.cs" 2>/dev/null | grep -v "0.0.0.0\|127.0.0.1\|localhost" | head -5 > /tmp/ip_check.txt; then
          if [ -s /tmp/ip_check.txt ]; then
            echo "⚠️ Hardcoded IP addresses found - review for sensitive data"
            cat /tmp/ip_check.txt
          fi
          rm -f /tmp/ip_check.txt
        fi
        
        # Output final status
        if [ "$VULNERABILITIES_FOUND" == "false" ]; then
          echo "✅ No obvious vulnerabilities detected"
        else
          echo "⚠️ Potential vulnerabilities detected - review required"
        fi
        
        echo "vulnerabilities-found=$VULNERABILITIES_FOUND" >> $GITHUB_OUTPUT
        
        # Always exit successfully for vulnerability scan
        exit 0

    - name: 📊 Generate Dual Security Summary
      id: summary
      shell: bash
      run: |
        echo "📊 Generating dual security summary..."
        
        GITLEAKS_SECRETS="${{ steps.gitleaks-scan.outputs.secrets-found || 'false' }}"
        GITGUARDIAN_SECRETS="${{ steps.gitguardian-scan.outputs.secrets-found || '0' }}"
        GITGUARDIAN_POLICIES="${{ steps.gitguardian-scan.outputs.policy-violations || '0' }}"
        VULNS_FOUND="${{ steps.vulnerability-scan.outputs.vulnerabilities-found || 'false' }}"
        
        # Determine which engines were used
        ENGINES_USED=""
        if [[ "${{ inputs.scan-engine }}" == "gitleaks" || "${{ inputs.scan-engine }}" == "both" ]]; then
          ENGINES_USED="gitleaks"
        fi
        if [[ "${{ inputs.scan-engine }}" == "gitguardian" || "${{ inputs.scan-engine }}" == "both" ]] && [ "${{ env.SKIP_GITGUARDIAN }}" != "true" ]; then
          if [ -n "$ENGINES_USED" ]; then
            ENGINES_USED="$ENGINES_USED,gitguardian"
          else
            ENGINES_USED="gitguardian"
          fi
        fi
        
        # Calculate overall security score
        GITLEAKS_SCORE=100
        GITGUARDIAN_SCORE=100
        
        # Gitleaks scoring
        if [ "$GITLEAKS_SECRETS" == "true" ]; then
          GITLEAKS_SCORE=50
        fi
        
        # GitGuardian scoring (from action output or calculate)
        if [ -n "${{ steps.gitguardian-scan.outputs.security-score }}" ]; then
          GITGUARDIAN_SCORE="${{ steps.gitguardian-scan.outputs.security-score }}"
        else
          # Calculate based on findings
          if [ "$GITGUARDIAN_SECRETS" != "0" ]; then
            SECRETS_PENALTY=$((GITGUARDIAN_SECRETS * 20))
            if [ $SECRETS_PENALTY -gt 60 ]; then
              SECRETS_PENALTY=60
            fi
            GITGUARDIAN_SCORE=$((GITGUARDIAN_SCORE - SECRETS_PENALTY))
          fi
          
          if [ "$GITGUARDIAN_POLICIES" != "0" ]; then
            POLICY_PENALTY=$((GITGUARDIAN_POLICIES * 10))
            if [ $POLICY_PENALTY -gt 30 ]; then
              POLICY_PENALTY=30
            fi
            GITGUARDIAN_SCORE=$((GITGUARDIAN_SCORE - POLICY_PENALTY))
          fi
        fi
        
        # Vulnerability penalty
        if [ "$VULNS_FOUND" == "true" ]; then
          GITLEAKS_SCORE=$((GITLEAKS_SCORE - 20))
          GITGUARDIAN_SCORE=$((GITGUARDIAN_SCORE - 20))
        fi
        
        # Ensure scores don't go below 0
        if [ $GITLEAKS_SCORE -lt 0 ]; then
          GITLEAKS_SCORE=0
        fi
        if [ $GITGUARDIAN_SCORE -lt 0 ]; then
          GITGUARDIAN_SCORE=0
        fi
        
        # Calculate combined score (average of available engines)
        COMBINED_SCORE=0
        ENGINE_COUNT=0
        
        if [[ "$ENGINES_USED" == *"gitleaks"* ]]; then
          COMBINED_SCORE=$((COMBINED_SCORE + GITLEAKS_SCORE))
          ENGINE_COUNT=$((ENGINE_COUNT + 1))
        fi
        
        if [[ "$ENGINES_USED" == *"gitguardian"* ]]; then
          COMBINED_SCORE=$((COMBINED_SCORE + GITGUARDIAN_SCORE))
          ENGINE_COUNT=$((ENGINE_COUNT + 1))
        fi
        
        if [ $ENGINE_COUNT -gt 0 ]; then
          COMBINED_SCORE=$((COMBINED_SCORE / ENGINE_COUNT))
        else
          COMBINED_SCORE=100
        fi
        
        # Determine best engine score
        BEST_SCORE=$COMBINED_SCORE
        if [[ "$ENGINES_USED" == *"gitleaks"* ]] && [[ "$ENGINES_USED" == *"gitguardian"* ]]; then
          if [ $GITLEAKS_SCORE -gt $GITGUARDIAN_SCORE ]; then
            BEST_SCORE=$GITLEAKS_SCORE
          else
            BEST_SCORE=$GITGUARDIAN_SCORE
          fi
        fi
        
        # Generate summary
        SUMMARY="Dual Security Scan Complete"
        if [[ "$GITLEAKS_SECRETS" == "true" || "$GITGUARDIAN_SECRETS" != "0" || "$GITGUARDIAN_POLICIES" != "0" || "$VULNS_FOUND" == "true" ]]; then
          SUMMARY="Security Issues Found"
        fi
        
        echo "security-score=$COMBINED_SCORE" >> $GITHUB_OUTPUT
        echo "best-engine-score=$BEST_SCORE" >> $GITHUB_OUTPUT
        echo "scan-results=$SUMMARY" >> $GITHUB_OUTPUT
        echo "engines-used=$ENGINES_USED" >> $GITHUB_OUTPUT
        
        # Create comprehensive summary report
        cat > security-reports/dual-security-summary.md << EOF
        # 🛡️ Dual Security Scan Summary
        
        **Scan Date:** $(date -u +"%Y-%m-%d %H:%M:%S UTC")
        **Engines Used:** $ENGINES_USED
        **Combined Score:** $COMBINED_SCORE/100
        **Best Engine Score:** $BEST_SCORE/100
        
        ## 🔍 Engine Results
        
        | Engine | Enabled | Score | Secrets Found | Policy Violations |
        |--------|---------|-------|---------------|-------------------|
        | **Gitleaks** | $([[ "$ENGINES_USED" == *"gitleaks"* ]] && echo "✅" || echo "❌") | $GITLEAKS_SCORE/100 | $GITLEAKS_SECRETS | N/A |
        | **GitGuardian** | $([[ "$ENGINES_USED" == *"gitguardian"* ]] && echo "✅" || echo "❌") | $GITGUARDIAN_SCORE/100 | $GITGUARDIAN_SECRETS | $GITGUARDIAN_POLICIES |
        
        ## 📊 Findings Summary
        
        ### � Secrets Detection
        
        EOF
        
        if [ "$GITLEAKS_SECRETS" == "true" ] || [ "$GITGUARDIAN_SECRETS" != "0" ]; then
          cat >> security-reports/dual-security-summary.md << EOF
        **Secrets detected in codebase:**
        
        - **Gitleaks:** $([[ "$GITLEAKS_SECRETS" == "true" ]] && echo "Found secrets" || echo "No secrets found")
        - **GitGuardian:** $GITGUARDIAN_SECRETS secret(s) found
        
        **🚨 Immediate Actions Required:**
        1. Review detailed scan reports in artifacts
        2. Rotate any exposed credentials immediately
        3. Remove secrets from code and use secure storage
        4. Implement secret scanning in CI/CD pipeline
        
        EOF
        else
          cat >> security-reports/dual-security-summary.md << EOF
        ✅ **No secrets detected by any engine**
        
        EOF
        fi
        
        if [ "$GITGUARDIAN_POLICIES" != "0" ]; then
          cat >> security-reports/dual-security-summary.md << EOF
        ### ⚖️ Policy Violations
        
        **$GITGUARDIAN_POLICIES policy violation(s) detected by GitGuardian:**
        
        **🔧 Recommended Actions:**
        1. Review GitGuardian policy reports
        2. Update configurations to comply with security policies
        3. Implement Infrastructure as Code security scanning
        
        EOF
        fi
        
        if [ "$VULNS_FOUND" == "true" ]; then
          cat >> security-reports/dual-security-summary.md << EOF
        ### 🛡️ Vulnerabilities
        
        **Vulnerabilities detected in dependencies or configurations:**
        
        **🔧 Recommended Actions:**
        1. Update vulnerable dependencies
        2. Review security configurations
        3. Apply security patches
        
        EOF
        fi
        
        cat >> security-reports/dual-security-summary.md << EOF
        ## 🔧 Engine Comparison
        
        | Aspect | Gitleaks | GitGuardian |
        |--------|----------|-------------|
        | **Type** | Open Source | Commercial |
        | **Secrets Detection** | ✅ Pattern-based | ✅ ML-enhanced |
        | **Policy Enforcement** | ❌ Limited | ✅ Comprehensive |
        | **IaC Scanning** | ❌ No | ✅ Yes |
        | **API Integration** | ❌ Local only | ✅ Cloud-based |
        | **Custom Rules** | ✅ Yes | ✅ Yes |
        
        ## 📋 Recommendations
        
        EOF
        
        if [[ "$ENGINES_USED" == *"gitleaks"* ]] && [[ "$ENGINES_USED" == *"gitguardian"* ]]; then
          cat >> security-reports/dual-security-summary.md << EOF
        **Dual Engine Setup (Recommended):**
        - Use both engines for comprehensive coverage
        - Gitleaks for fast local scanning
        - GitGuardian for advanced policy enforcement
        - Compare results to eliminate false positives
        
        EOF
        elif [[ "$ENGINES_USED" == *"gitguardian"* ]]; then
          cat >> security-reports/dual-security-summary.md << EOF
        **GitGuardian Only:**
        - Consider adding Gitleaks for additional coverage
        - Excellent for enterprise policy enforcement
        - Best for Infrastructure as Code security
        
        EOF
        else
          cat >> security-reports/dual-security-summary.md << EOF
        **Gitleaks Only:**
        - Consider adding GitGuardian for advanced features
        - Great for basic secrets detection
        - Perfect for open source projects
        
        EOF
        fi
        
        cat >> security-reports/dual-security-summary.md << EOF
        ## 🔗 Resources
        
        - [Gitleaks Documentation](https://github.com/gitleaks/gitleaks)
        - [GitGuardian Documentation](https://docs.gitguardian.com/)
        - [Security Best Practices](https://docs.gitguardian.com/secrets-detection/introduction)
        
        ---
        
        *Generated by Dual Security Scan Action*
        EOF
        
        echo ""
        echo "🛡️ Dual Security Scan Summary:"
        echo "  • Engines Used: $ENGINES_USED"
        echo "  • Combined Score: $COMBINED_SCORE/100"
        echo "  • Best Engine Score: $BEST_SCORE/100"
        echo "  • Gitleaks Secrets: $GITLEAKS_SECRETS"
        echo "  • GitGuardian Secrets: $GITGUARDIAN_SECRETS"
        echo "  • GitGuardian Policies: $GITGUARDIAN_POLICIES"
        echo "  • Vulnerabilities: $VULNS_FOUND"
        echo "  • Status: $SUMMARY"

    - name: 📤 Upload Security Reports
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: security-scan-reports
        path: security-reports/
        retention-days: 30

    - name: 🚨 Fail on Security Issues
      if: inputs.fail-on-findings == 'true' && (steps.secrets-scan.outputs.secrets-found == 'true' || steps.vulnerability-scan.outputs.vulnerabilities-found == 'true')
      shell: bash
      run: |
        echo "❌ Security scan failed due to findings"
        echo "Secrets found: ${{ steps.secrets-scan.outputs.secrets-found }}"
        echo "Vulnerabilities found: ${{ steps.vulnerability-scan.outputs.vulnerabilities-found }}"
        echo ""
        echo "Review the security reports and address the issues before proceeding."
        exit 1

branding:
  icon: 'shield'
  color: 'red'
