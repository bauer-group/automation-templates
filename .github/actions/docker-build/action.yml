name: 'Docker Build & Push'
description: 'Comprehensive Docker image building, security scanning, and multi-registry publishing'
author: 'BAUER GROUP'

inputs:
  working-directory:
    description: 'Working directory for all commands'
    required: false
    default: '.'
  # Build Configuration
  dockerfile-path:
    description: 'Path to Dockerfile'
    required: false
    default: './Dockerfile'
  docker-context:
    description: 'Docker build context'
    required: false
    default: '.'
  build-args:
    description: 'Build arguments as JSON object or multiline string'
    required: false
    default: '{}'
  build-secrets:
    description: 'Build secrets as JSON object'
    required: false
    default: '{}'
  target:
    description: 'Docker build target stage'
    required: false
    default: ''
  # Platform Configuration
  platforms:
    description: 'Target platforms (comma-separated)'
    required: false
    default: 'linux/amd64'
  multi-platform:
    description: 'Enable multi-platform builds'
    required: false
    default: 'false'
  # Registry Configuration
  registry:
    description: 'Docker registry URL'
    required: false
    default: 'ghcr.io'
  registry-username:
    description: 'Registry username'
    required: false
    default: ''
  registry-password:
    description: 'Registry password/token'
    required: false
    default: ''
  # Image Configuration
  image-name:
    description: 'Docker image name (without registry)'
    required: false
    default: ''
  image-tags:
    description: 'Image tags (comma-separated or JSON array)'
    required: false
    default: ''
  auto-tags:
    description: 'Generate automatic tags based on Git refs'
    required: false
    default: 'true'
  latest-tag:
    description: 'Tag image as latest on main branch'
    required: false
    default: 'true'
  # Push Configuration
  push:
    description: 'Push image to registry'
    required: false
    default: 'true'
  push-on-pr:
    description: 'Push images on pull requests'
    required: false
    default: 'false'
  # Caching
  cache-enabled:
    description: 'Enable build caching'
    required: false
    default: 'true'
  cache-mode:
    description: 'Cache mode (min, max, inline)'
    required: false
    default: 'max'
  cache-registry:
    description: 'Registry for cache'
    required: false
    default: ''
  # Security Configuration
  security-scan:
    description: 'Run security vulnerability scan'
    required: false
    default: 'true'
  security-scanner:
    description: 'Security scanner (trivy, snyk, grype)'
    required: false
    default: 'trivy'
  security-fail-on:
    description: 'Fail on security issues (CRITICAL, HIGH, MEDIUM, LOW)'
    required: false
    default: 'CRITICAL'
  security-ignore-unfixed:
    description: 'Ignore unfixed vulnerabilities'
    required: false
    default: 'false'
  # Image Signing
  sign-image:
    description: 'Sign image with cosign'
    required: false
    default: 'false'
  cosign-key:
    description: 'Cosign private key'
    required: false
    default: ''
  cosign-password:
    description: 'Cosign key password'
    required: false
    default: ''
  # SBOM Generation
  generate-sbom:
    description: 'Generate Software Bill of Materials'
    required: false
    default: 'false'
  sbom-format:
    description: 'SBOM format (cyclonedx, spdx)'
    required: false
    default: 'cyclonedx'
  # Metadata & Labels
  add-git-labels:
    description: 'Add Git metadata as labels'
    required: false
    default: 'true'
  custom-labels:
    description: 'Custom labels as JSON object'
    required: false
    default: '{}'
  # Performance
  builder-driver:
    description: 'Builder driver (docker, docker-container, kubernetes)'
    required: false
    default: 'docker-container'
  build-timeout:
    description: 'Build timeout in minutes'
    required: false
    default: '30'

outputs:
  image-digest:
    description: 'Image digest'
    value: ${{ steps.build.outputs.digest }}
  image-tags:
    description: 'Generated image tags'
    value: ${{ steps.meta.outputs.tags }}
  image-url:
    description: 'Full image URL with tag'
    value: ${{ steps.build-info.outputs.image-url }}
  image-size:
    description: 'Image size in bytes'
    value: ${{ steps.build-info.outputs.image-size }}
  security-report:
    description: 'Path to security scan report'
    value: ${{ steps.security.outputs.report-path }}
  sbom-path:
    description: 'Path to generated SBOM'
    value: ${{ steps.sbom.outputs.path }}
  build-duration:
    description: 'Build duration in seconds'
    value: ${{ steps.build-info.outputs.duration }}

runs:
  using: 'composite'
  steps:
    - name: 🔧 Setup Build Environment
      shell: bash
      working-directory: ${{ inputs.working-directory }}
      run: |
        echo "🔧 Setting up Docker build environment..."
        
        # Validate Dockerfile
        if [ ! -f "${{ inputs.dockerfile-path }}" ]; then
          echo "❌ Dockerfile not found: ${{ inputs.dockerfile-path }}"
          exit 1
        fi
        
        # Create build directory
        mkdir -p docker-build-reports
        
        # Record build start time
        echo "BUILD_START_TIME=$(date +%s)" >> $GITHUB_ENV
        
        echo "✅ Docker build environment ready"

    - name: 🏗️ Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      with:
        driver: ${{ inputs.builder-driver }}
        platforms: ${{ inputs.platforms }}

    - name: 🔐 Log in to Registry
      if: inputs.push == 'true' && (github.event_name != 'pull_request' || inputs.push-on-pr == 'true')
      uses: docker/login-action@v3
      with:
        registry: ${{ inputs.registry }}
        username: ${{ inputs.registry-username || github.actor }}
        password: ${{ inputs.registry-password }}

    - name: 🏷️ Extract Metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ inputs.registry }}/${{ inputs.image-name || github.repository }}
        tags: |
          ${{ inputs.auto-tags == 'true' && 'type=ref,event=branch' || '' }}
          ${{ inputs.auto-tags == 'true' && 'type=ref,event=pr' || '' }}
          ${{ inputs.auto-tags == 'true' && 'type=semver,pattern={{version}}' || '' }}
          ${{ inputs.auto-tags == 'true' && 'type=semver,pattern={{major}}.{{minor}}' || '' }}
          ${{ inputs.auto-tags == 'true' && 'type=semver,pattern={{major}}' || '' }}
          ${{ inputs.auto-tags == 'true' && inputs.latest-tag == 'true' && 'type=raw,value=latest,enable={{is_default_branch}}' || '' }}
          ${{ inputs.auto-tags == 'true' && 'type=sha,prefix={{branch}}-' || '' }}
          ${{ inputs.image-tags }}
        labels: |
          ${{ inputs.add-git-labels == 'true' && 'org.opencontainers.image.source={{context}}' || '' }}
          ${{ inputs.add-git-labels == 'true' && 'org.opencontainers.image.revision={{sha}}' || '' }}
          ${{ inputs.add-git-labels == 'true' && 'org.opencontainers.image.created={{date "2006-01-02T15:04:05Z07:00"}}' || '' }}
          ${{ inputs.custom-labels }}

    - name: 🐳 Build and Push Docker Image
      id: build
      uses: docker/build-push-action@v5
      with:
        context: ${{ inputs.docker-context }}
        file: ${{ inputs.dockerfile-path }}
        platforms: ${{ inputs.multi-platform == 'true' && inputs.platforms || 'linux/amd64' }}
        push: ${{ inputs.push == 'true' && (github.event_name != 'pull_request' || inputs.push-on-pr == 'true') }}
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        build-args: ${{ inputs.build-args }}
        secrets: ${{ inputs.build-secrets }}
        target: ${{ inputs.target }}
        cache-from: ${{ inputs.cache-enabled == 'true' && 'type=gha' || '' }}
        cache-to: ${{ inputs.cache-enabled == 'true' && format('type=gha,mode={0}', inputs.cache-mode) || '' }}
        provenance: false
        sbom: false

    - name: 📊 Collect Build Information
      id: build-info
      shell: bash
      run: |
        BUILD_END_TIME=$(date +%s)
        BUILD_DURATION=$((BUILD_END_TIME - BUILD_START_TIME))
        
        # Get primary image tag
        PRIMARY_TAG=$(echo "${{ steps.meta.outputs.tags }}" | head -1)
        
        # Try to get image size (if image was pushed)
        IMAGE_SIZE="unknown"
        if [ "${{ inputs.push }}" = "true" ] && [ "${{ github.event_name }}" != "pull_request" ]; then
          if command -v skopeo >/dev/null 2>&1; then
            IMAGE_SIZE=$(skopeo inspect docker://"$PRIMARY_TAG" 2>/dev/null | jq -r '.Size // "unknown"' || echo "unknown")
          fi
        fi
        
        echo "image-url=$PRIMARY_TAG" >> $GITHUB_OUTPUT
        echo "image-size=$IMAGE_SIZE" >> $GITHUB_OUTPUT
        echo "duration=$BUILD_DURATION" >> $GITHUB_OUTPUT
        
        echo "📊 Build Information:"
        echo "  • Duration: ${BUILD_DURATION}s"
        echo "  • Primary Tag: $PRIMARY_TAG"
        echo "  • Image Size: $IMAGE_SIZE bytes"

    - name: 🛡️ Security Vulnerability Scan
      id: security
      if: inputs.security-scan == 'true'
      shell: bash
      working-directory: ${{ inputs.working-directory }}
      continue-on-error: ${{ inputs.security-fail-on == 'LOW' && 'false' || 'true' }}
      run: |
        echo "🛡️ Running security scan with ${{ inputs.security-scanner }}..."
        
        PRIMARY_TAG=$(echo "${{ steps.meta.outputs.tags }}" | head -1)
        REPORT_PATH="docker-build-reports/security-report.json"
        SARIF_PATH="docker-build-reports/security-report.sarif"
        
        case "${{ inputs.security-scanner }}" in
          trivy)
            # Install Trivy if not available
            if ! command -v trivy >/dev/null 2>&1; then
              echo "Installing Trivy..."
              curl -sfL https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/install.sh | sh -s -- -b /usr/local/bin
            fi
            
            # Run Trivy scan
            trivy image \
              --format json \
              --output "$REPORT_PATH" \
              --severity ${{ inputs.security-fail-on }},HIGH,CRITICAL \
              ${{ inputs.security-ignore-unfixed == 'true' && '--ignore-unfixed' || '' }} \
              "$PRIMARY_TAG" || echo "Trivy scan completed with issues"
            
            # Convert to SARIF if needed
            trivy image \
              --format sarif \
              --output "$SARIF_PATH" \
              --severity ${{ inputs.security-fail-on }},HIGH,CRITICAL \
              "$PRIMARY_TAG" || echo "SARIF generation completed"
            ;;
            
          grype)
            # Install Grype if not available
            if ! command -v grype >/dev/null 2>&1; then
              echo "Installing Grype..."
              curl -sSfL https://raw.githubusercontent.com/anchore/grype/main/install.sh | sh -s -- -b /usr/local/bin
            fi
            
            grype "$PRIMARY_TAG" -o json --file "$REPORT_PATH" || echo "Grype scan completed"
            ;;
        esac
        
        echo "report-path=$REPORT_PATH" >> $GITHUB_OUTPUT
        echo "sarif-path=$SARIF_PATH" >> $GITHUB_OUTPUT
        
        # Check for critical vulnerabilities
        if [ -f "$REPORT_PATH" ]; then
          CRITICAL_COUNT=0
          if [ "${{ inputs.security-scanner }}" = "trivy" ]; then
            CRITICAL_COUNT=$(jq '[.Results[]?.Vulnerabilities[]? | select(.Severity == "CRITICAL")] | length' "$REPORT_PATH" 2>/dev/null || echo "0")
          fi
          
          echo "🛡️ Security scan completed:"
          echo "  • Critical vulnerabilities: $CRITICAL_COUNT"
          
          if [ "$CRITICAL_COUNT" -gt 0 ] && [ "${{ inputs.security-fail-on }}" = "CRITICAL" ]; then
            echo "❌ Critical vulnerabilities found - failing build"
            exit 1
          fi
        fi

    - name: 🔐 Sign Image with Cosign
      if: inputs.sign-image == 'true' && inputs.push == 'true' && github.event_name != 'pull_request'
      shell: bash
      env:
        COSIGN_PRIVATE_KEY: ${{ inputs.cosign-key }}
        COSIGN_PASSWORD: ${{ inputs.cosign-password }}
      run: |
        echo "🔐 Signing image with Cosign..."
        
        # Install Cosign if not available
        if ! command -v cosign >/dev/null 2>&1; then
          echo "Installing Cosign..."
          go install github.com/sigstore/cosign/v2/cmd/cosign@latest
        fi
        
        # Sign all tags
        echo "${{ steps.meta.outputs.tags }}" | while read -r tag; do
          if [ -n "$tag" ]; then
            echo "Signing: $tag@${{ steps.build.outputs.digest }}"
            if [ -n "$COSIGN_PRIVATE_KEY" ]; then
              echo "$COSIGN_PRIVATE_KEY" | cosign sign --key env://COSIGN_PRIVATE_KEY --yes "$tag@${{ steps.build.outputs.digest }}"
            else
              cosign sign --yes "$tag@${{ steps.build.outputs.digest }}"
            fi
          fi
        done

    - name: 📋 Generate SBOM
      id: sbom
      if: inputs.generate-sbom == 'true'
      shell: bash
      working-directory: ${{ inputs.working-directory }}
      run: |
        echo "📋 Generating Software Bill of Materials..."
        
        PRIMARY_TAG=$(echo "${{ steps.meta.outputs.tags }}" | head -1)
        SBOM_PATH="docker-build-reports/sbom.${{ inputs.sbom-format }}.json"
        
        # Install Syft for SBOM generation
        if ! command -v syft >/dev/null 2>&1; then
          echo "Installing Syft..."
          curl -sSfL https://raw.githubusercontent.com/anchore/syft/main/install.sh | sh -s -- -b /usr/local/bin
        fi
        
        # Generate SBOM
        syft "$PRIMARY_TAG" -o "${{ inputs.sbom-format }}-json" --file "$SBOM_PATH"
        
        echo "path=$SBOM_PATH" >> $GITHUB_OUTPUT
        echo "📋 SBOM generated: $SBOM_PATH"

    - name: 📤 Upload Security Reports
      if: always() && inputs.security-scan == 'true'
      uses: actions/upload-artifact@v4
      with:
        name: docker-security-reports
        path: ${{ inputs.working-directory }}/docker-build-reports/
        retention-days: 30

    - name: 📊 Upload Security Scan to GitHub Security
      if: inputs.security-scan == 'true' && steps.security.outputs.sarif-path != ''
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: ${{ inputs.working-directory }}/${{ steps.security.outputs.sarif-path }}
        category: docker-security-scan

    - name: 📋 Build Summary
      shell: bash
      run: |
        echo "## 🐳 Docker Build Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        echo "### 🏗️ Build Details" >> $GITHUB_STEP_SUMMARY
        echo "| Property | Value |" >> $GITHUB_STEP_SUMMARY
        echo "|----------|-------|" >> $GITHUB_STEP_SUMMARY
        echo "| **Dockerfile** | \`${{ inputs.dockerfile-path }}\` |" >> $GITHUB_STEP_SUMMARY
        echo "| **Context** | \`${{ inputs.docker-context }}\` |" >> $GITHUB_STEP_SUMMARY
        echo "| **Platforms** | \`${{ inputs.multi-platform == 'true' && inputs.platforms || 'linux/amd64' }}\` |" >> $GITHUB_STEP_SUMMARY
        echo "| **Registry** | \`${{ inputs.registry }}\` |" >> $GITHUB_STEP_SUMMARY
        echo "| **Duration** | ${{ steps.build-info.outputs.duration }}s |" >> $GITHUB_STEP_SUMMARY
        echo "| **Image Size** | ${{ steps.build-info.outputs.image-size }} bytes |" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        echo "### 🏷️ Generated Tags" >> $GITHUB_STEP_SUMMARY
        echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
        echo "${{ steps.meta.outputs.tags }}" >> $GITHUB_STEP_SUMMARY
        echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        if [ "${{ inputs.security-scan }}" = "true" ]; then
          echo "### 🛡️ Security Scan" >> $GITHUB_STEP_SUMMARY
          echo "- **Scanner:** ${{ inputs.security-scanner }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Report:** Available in artifacts" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
        fi
        
        if [ "${{ inputs.sign-image }}" = "true" ]; then
          echo "### 🔐 Image Signing" >> $GITHUB_STEP_SUMMARY
          echo "- **Tool:** Cosign" >> $GITHUB_STEP_SUMMARY
          echo "- **Status:** ${{ github.event_name != 'pull_request' && 'Signed' || 'Skipped (PR)' }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
        fi

branding:
  icon: 'box'
  color: 'blue'