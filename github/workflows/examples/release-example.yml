name: üöÄ Release Management

on:
  push:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      force-release:
        description: "Release auch ohne Conventional Commits erstellen"
        type: boolean
        default: false

permissions:
  contents: write
  pull-requests: write

jobs:
  # Verwende den zentralen Release-Workflow
  release:
    uses: bauer-group/automation-templates/.github/workflows/release.yml@main
    with:
      release-type: "simple"  # oder "node", "python", etc.
      package-name: "mein-projekt"
      force-release: ${{ inputs.force-release || false }}

  # Optional: weitere Jobs nach Release
  post-release:
    if: needs.release.outputs.release_created == 'true'
    needs: release
    runs-on: ubuntu-latest
    steps:
      - name: üöÄ Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: üéâ Post-Release Actions
        run: |
          echo "### üéâ Release erfolgreich erstellt!" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "üìã **Details:**" >> $GITHUB_STEP_SUMMARY
          echo "- Version: ${{ needs.release.outputs.version }}" >> $GITHUB_STEP_SUMMARY
          echo "- Tag: ${{ needs.release.outputs.tag_name }}" >> $GITHUB_STEP_SUMMARY
          echo "- Release URL: ${{ needs.release.outputs.html_url }}" >> $GITHUB_STEP_SUMMARY
          
          # Hier k√∂nnten weitere Aktionen folgen:
          # - Deployment zu Production
          # - Notifications an Teams
          # - Update von Dokumentation
          # - etc.

      - name: üì® Notification (Beispiel)
        run: |
          echo "Sende Benachrichtigung f√ºr Release ${{ needs.release.outputs.version }}"
          # Hier w√ºrde z.B. eine Teams/Slack-Benachrichtigung gesendet
