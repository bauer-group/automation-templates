name: Python Package CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

permissions:
  contents: read
  pull-requests: read
  checks: write

jobs:
  build:
    runs-on: ${{ matrix.os }}
    timeout-minutes: 45
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ["3.9", "3.10", "3.11", "3.12"]
        exclude:
          # Reduce matrix for faster builds on non-main branches
          - os: windows-latest
            python-version: "3.9"
          - os: macos-latest
            python-version: "3.9"

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
        cache: 'pip'

    - name: Install dependencies
      shell: bash
      run: |
        python -m pip install --upgrade pip
        pip install build twine flake8 pytest pytest-cov pytest-xdist mypy black isort
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
        if [ -f requirements-dev.txt ]; then pip install -r requirements-dev.txt; fi

    - name: Install package in development mode
      run: |
        pip install -e .

    - name: Code formatting check - Black
      if: matrix.python-version == '3.11' && matrix.os == 'ubuntu-latest'
      run: |
        black --check --diff .

    - name: Import sorting check - isort
      if: matrix.python-version == '3.11' && matrix.os == 'ubuntu-latest'
      run: |
        isort --check-only --diff .

    - name: Type checking - mypy
      if: matrix.python-version == '3.11' && matrix.os == 'ubuntu-latest'
      run: |
        mypy . --ignore-missing-imports || true
      continue-on-error: true

    - name: Lint with flake8
      run: |
        # stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

    - name: Test with pytest
      run: |
        pytest --cov=. --cov-report=xml --cov-report=term-missing --junitxml=pytest-report-${{ matrix.os }}-${{ matrix.python-version }}.xml -n auto

    - name: Build package
      if: matrix.python-version == '3.11' && matrix.os == 'ubuntu-latest'
      run: |
        python -m build

    - name: Check package
      if: matrix.python-version == '3.11' && matrix.os == 'ubuntu-latest'
      run: |
        twine check dist/*

    - name: Upload coverage to Codecov
      if: matrix.python-version == '3.11' && matrix.os == 'ubuntu-latest'
      uses: codecov/codecov-action@v4
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-${{ matrix.os }}-${{ matrix.python-version }}
        fail_ci_if_error: false

    - name: Archive test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results-${{ matrix.os }}-${{ matrix.python-version }}
        path: |
          pytest-report-${{ matrix.os }}-${{ matrix.python-version }}.xml
          coverage.xml

    - name: Archive build artifacts
      uses: actions/upload-artifact@v4
      if: matrix.python-version == '3.11' && matrix.os == 'ubuntu-latest'
      with:
        name: python-package-distributions
        path: dist/

  test-summary:
    needs: build
    runs-on: ubuntu-latest
    if: always()
    steps:
    - name: Download all test results
      uses: actions/download-artifact@v4
      with:
        pattern: test-results-*
        merge-multiple: true

    - name: Publish test results
      uses: dorny/test-reporter@v1
      if: success() || failure()
      with:
        name: Python Package Tests
        path: 'pytest-report-*.xml'
        reporter: java-junit