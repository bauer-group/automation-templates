# Example: Using the Python Semantic Release Pipeline
# Place this file in your repository as .github/workflows/release.yml

name: üêç Python Package Release

on:
  # Trigger on push to main branch
  push:
    branches: [main]
    paths-ignore:
      - '*.md'
      - 'docs/**'
      - '.github/**'
      
  # Trigger on pull requests to main  
  pull_request:
    branches: [main]
    paths-ignore:
      - '*.md'
      - 'docs/**'
      
  # Manual trigger
  workflow_dispatch:
    inputs:
      skip-pypi:
        description: 'Skip PyPI publishing (GitHub release only)'
        type: boolean
        default: false

jobs:
  python-release:
    name: üêç Python Semantic Release
    uses: bauer-group/automation-templates/.github/workflows/python-semantic-release.yml@main
    with:
      # Python Configuration
      python-version: '3.12'  # or ['3.10', '3.11', '3.12'] for matrix
      
      # Testing Configuration
      run-tests: true
      run-security-scan: true
      
      # Security Configuration
      security-engine: 'both'  # gitleaks, gitguardian, both
      
      # Build Configuration
      build-local-wheel: true
      
      # Release Configuration
      skip-pypi: ${{ inputs.skip-pypi || false }}
      
      # Documentation & Security Updates
      update-documentation: true
      update-security-policy: true
      
    secrets: inherit

# ============================================================================
# SETUP INSTRUCTIONS
# ============================================================================

# 1. PYPROJECT.TOML CONFIGURATION
# Add this to your pyproject.toml:
#
# [tool.semantic_release]
# version_toml = ["pyproject.toml:project.version"]
# branch = "main" 
# build_command = "python -m build"
# changelog_file = "CHANGELOG.md"
# upload_to_vcs_release = true

# 2. TRUSTED PUBLISHING SETUP (Recommended)
# Instead of PYPI_API_TOKEN, configure Trusted Publishing:
# 1. Go to https://pypi.org/manage/account/publishing/
# 2. Add a new "pending publisher":
#    - PyPI project name: your-package-name
#    - Owner: your-github-username  
#    - Repository name: your-repo-name
#    - Workflow name: release.yml (or whatever you name this file)
#    - Environment name: (leave empty)

# 3. CONVENTIONAL COMMITS
# Use conventional commit messages for automatic versioning:
# - feat: new feature (minor version bump)
# - fix: bug fix (patch version bump) 
# - BREAKING CHANGE: or feat!: (major version bump)
# - docs: documentation changes (no version bump)
# - chore: maintenance tasks (no version bump)

# 4. REQUIRED PROJECT STRUCTURE
# your-repo/
# ‚îú‚îÄ‚îÄ src/your_package/
# ‚îÇ   ‚îî‚îÄ‚îÄ __init__.py
# ‚îú‚îÄ‚îÄ tests/
# ‚îÇ   ‚îî‚îÄ‚îÄ test_*.py
# ‚îú‚îÄ‚îÄ pyproject.toml
# ‚îú‚îÄ‚îÄ README.md
# ‚îî‚îÄ‚îÄ .github/workflows/release.yml (this file)

# 5. OPTIONAL SECRETS
# Configure these in your repository settings if needed:
# - PYPI_API_TOKEN: PyPI API token (if not using Trusted Publishing)
# - GITGUARDIAN_API_KEY: For enhanced security scanning
# - GITLEAKS_LICENSE: For Gitleaks Pro features