name: 🛡️ Security-Focused Pipeline Example

# This example prioritizes security scanning and compliance
# Perfect for security-critical projects that need comprehensive scanning

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
  schedule:
    # Run security scans daily at 2 AM UTC
    - cron: '0 2 * * *'
  workflow_dispatch:
    inputs:
      scan-engine:
        description: 'Security scan engine'
        type: choice
        default: 'both'
        options: ['gitleaks', 'gitguardian', 'both']
      deep-scan:
        description: 'Enable deep security scan'
        type: boolean
        default: true

jobs:
  # Comprehensive security scanning
  security-analysis:
    name: Deep Security Analysis
    uses: bauer-group/automation-templates/.github/workflows/modules/security-scan.yml@main
    with:
      scan-engine: ${{ inputs.scan-engine || 'both' }}
      scan-type: 'all'
      fail-on-findings: ${{ github.event_name == 'pull_request' }}  # Strict for PRs, informative for scheduled runs
      minimum-severity: ${{ inputs.deep-scan == true && 'low' || 'medium' }}
      exclude-paths: '.git,node_modules,vendor,test/fixtures'
    secrets:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      GITGUARDIAN_API_KEY: ${{ secrets.GITGUARDIAN_API_KEY }}
      GITLEAKS_LICENSE: ${{ secrets.GITLEAKS_LICENSE }}

  # License compliance with strict rules
  compliance-check:
    name: Compliance Analysis
    uses: bauer-group/automation-templates/.github/workflows/modules/license-compliance.yml@main
    with:
      fail-on-forbidden: true  # Strict license compliance
      fail-on-unknown: true
      scan-dependencies: true
      generate-sbom: true
      allowed-licenses: 'MIT,Apache-2.0,BSD-2-Clause,BSD-3-Clause,ISC,CC0-1.0'
      forbidden-licenses: 'GPL-*,AGPL-*,SSPL-*,WTFPL,Unlicense'
    secrets:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      FOSSA_API_KEY: ${{ secrets.FOSSA_API_KEY }}

  # Enhanced PR validation for security
  pr-security-gate:
    name: Security Gate
    if: github.event_name == 'pull_request'
    uses: bauer-group/automation-templates/.github/workflows/modules/pr-validation.yml@main
    with:
      enable-security-scan: true
      enable-license-check: true
      enable-commit-lint: true
      security-scan-engine: 'both'  # Use both engines for maximum coverage
      fail-on-security-issues: true
      fail-on-license-issues: true  # Strict compliance for security projects
    secrets:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      GITGUARDIAN_API_KEY: ${{ secrets.GITGUARDIAN_API_KEY }}
      GITLEAKS_LICENSE: ${{ secrets.GITLEAKS_LICENSE }}

  # Security-aware release management
  secure-release:
    name: Secure Release
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    needs: [security-analysis, compliance-check]
    # Only proceed if security and compliance checks pass
    uses: bauer-group/automation-templates/.github/workflows/modules/release-management.yml@main
    with:
      release-type: 'simple'
      auto-merge-enabled: false  # Manual review required for security projects
      cleanup-release-branch: true
    secrets:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      GITGUARDIAN_API_KEY: ${{ secrets.GITGUARDIAN_API_KEY }}
      GITLEAKS_LICENSE: ${{ secrets.GITLEAKS_LICENSE }}

  # Secure artifact generation with signing
  secure-artifacts:
    name: Secure Artifacts
    if: needs.secure-release.outputs.release-created == 'true'
    needs: secure-release
    uses: bauer-group/automation-templates/.github/workflows/modules/artifact-generation.yml@main
    with:
      artifact-types: 'all'  # Generate all artifact types
      tag-name: ${{ needs.secure-release.outputs.tag-name }}
      version: ${{ needs.secure-release.outputs.version }}
      release-url: ${{ needs.secure-release.outputs.release-url }}
      docker-registry: 'ghcr.io'
    secrets:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      DOCKER_USERNAME: ${{ github.actor }}
      DOCKER_PASSWORD: ${{ secrets.GITHUB_TOKEN }}

  # Security monitoring and alerting
  security-monitoring:
    name: Security Monitoring
    if: always()
    needs: [security-analysis, compliance-check]
    runs-on: ubuntu-latest
    
    steps:
      - name: 🚨 Security Alert Analysis
        run: |
          SECURITY_SCORE="${{ needs.security-analysis.outputs.security-score }}"
          COMPLIANCE_STATUS="${{ needs.compliance-check.outputs.compliance-status }}"
          
          echo "### 🛡️ Security Monitoring Report" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Scan Date:** $(date -u)" >> $GITHUB_STEP_SUMMARY
          echo "**Trigger:** ${{ github.event_name }}" >> $GITHUB_STEP_SUMMARY
          echo "**Branch:** ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          echo "| Security Metric | Value | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|----------------|--------|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| **Security Score** | $SECURITY_SCORE/100 | $([[ $SECURITY_SCORE -ge 95 ]] && echo "🟢 Excellent" || [[ $SECURITY_SCORE -ge 80 ]] && echo "🟡 Good" || echo "🔴 Needs Attention") |" >> $GITHUB_STEP_SUMMARY
          echo "| **License Compliance** | $COMPLIANCE_STATUS | $([[ '$COMPLIANCE_STATUS' == 'pass' ]] && echo "🟢 Compliant" || echo "🔴 Issues Found") |" >> $GITHUB_STEP_SUMMARY
          echo "| **Secrets Found** | ${{ needs.security-analysis.outputs.secrets-found }} | $([[ '${{ needs.security-analysis.outputs.secrets-found }}' == 'false' ]] && echo "🟢 Clean" || echo "🔴 Found") |" >> $GITHUB_STEP_SUMMARY
          echo "| **Vulnerabilities** | ${{ needs.security-analysis.outputs.vulnerabilities-found }} | $([[ '${{ needs.security-analysis.outputs.vulnerabilities-found }}' == 'false' ]] && echo "🟢 Clean" || echo "🔴 Found") |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Generate security recommendations
          echo "### 🔧 Security Recommendations" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [[ $SECURITY_SCORE -lt 95 ]]; then
            echo "- 🔍 **Review security scan results** and address findings" >> $GITHUB_STEP_SUMMARY
          fi
          
          if [[ '${{ needs.security-analysis.outputs.secrets-found }}' == 'true' ]]; then
            echo "- 🚨 **Immediate Action:** Secrets detected - rotate credentials immediately" >> $GITHUB_STEP_SUMMARY
          fi
          
          if [[ '$COMPLIANCE_STATUS' != 'pass' ]]; then
            echo "- 📋 **License Review:** Address license compliance issues" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "- 🔄 **Regular Scans:** Security scans run daily at 2 AM UTC" >> $GITHUB_STEP_SUMMARY
          echo "- 📊 **Monitoring:** Review security trends in GitHub Security tab" >> $GITHUB_STEP_SUMMARY

      - name: 📢 Security Alert Notification
        if: needs.security-analysis.outputs.secrets-found == 'true' || needs.security-analysis.outputs.security-score < 80
        run: |
          echo "🚨 SECURITY ALERT: Critical security issues detected!"
          echo "Security Score: ${{ needs.security-analysis.outputs.security-score }}/100"
          echo "Secrets Found: ${{ needs.security-analysis.outputs.secrets-found }}"
          echo "Immediate review and action required."
          
          # In a real environment, you might want to:
          # - Send notifications to Slack/Teams
          # - Create GitHub issues for tracking
          # - Trigger additional security workflows
          # - Notify security team