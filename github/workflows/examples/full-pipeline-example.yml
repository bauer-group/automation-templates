# 🔄 Vollständige CI/CD Pipeline mit README und Release
# Dieses Beispiel zeigt professionelle Automatisierung für Projekte

name: 🔄 Complete CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  schedule:
    # Täglich um 02:00 UTC für README-Updates
    - cron: '0 2 * * *'
  workflow_dispatch:
    inputs:
      force-readme-update:
        description: "README auch ohne Änderungen aktualisieren"
        type: boolean
        default: false
      force-release:
        description: "Release auch ohne Conventional Commits erstellen"
        type: boolean
        default: false

permissions:
  contents: write
  pull-requests: write
  issues: write

jobs:
  # README-Management
  readme-management:
    name: 📄 Documentation
    if: |
      github.event_name == 'schedule' ||
      contains(github.event.head_commit.modified, 'docs/README.template.MD') ||
      github.event_name == 'workflow_dispatch' ||
      github.event_name == 'pull_request'
    uses: bauer-group/automation-templates/github/workflows/readme.yml@main
    with:
      template-path: "docs/README.template.MD"
      output-path: "README.MD"
      project-name: "Mein Vollständiges Projekt"
      company-name: "Meine Firma"
      project-description: "Ein professionelles Projekt mit vollständiger CI/CD Pipeline"
      contact-email: "support@example.com"
      documentation-url: "https://docs.example.com"
      support-url: "https://support.example.com"
      force-update: ${{ inputs.force-readme-update || false }}
      validate-output: true
      auto-commit: ${{ github.event_name != 'pull_request' }}

  # Release-Management
  release-management:
    name: 🚀 Release
    if: |
      (github.event_name == 'push' && github.ref == 'refs/heads/main') ||
      (github.event_name == 'workflow_dispatch' && inputs.force-release)
    needs: readme-management
    runs-on: ubuntu-latest
    outputs:
      release_created: ${{ steps.release.outputs.release_created }}
      tag_name: ${{ steps.release.outputs.tag_name }}
      version: ${{ steps.release.outputs.version }}
    
    steps:
      - name: 🚀 Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 📦 Release Please
        id: release
        uses: bauer-group/automation-templates/.github/actions/release-please@main
        with:
          release-type: "simple"
          package-name: "mein-vollstaendiges-projekt"
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: 📊 Release Summary
        if: steps.release.outputs.release_created == 'true'
        run: |
          echo "🎉 New release created!"
          echo "📋 Details:"
          echo "  • Version: ${{ steps.release.outputs.version }}"
          echo "  • Tag: ${{ steps.release.outputs.tag_name }}"
          echo "  • Release URL: ${{ steps.release.outputs.html_url }}"

  # Test-Suite (Beispiel)
  test-suite:
    name: 🧪 Tests
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request' || github.event_name == 'push'
    
    steps:
      - name: 🚀 Checkout Repository
        uses: actions/checkout@v4

      - name: 🧪 Run Tests
        run: |
          echo "🧪 Running test suite..."
          # Hier würden echte Tests laufen
          echo "✅ All tests passed"

      - name: 📊 Test Summary
        run: |
          echo "### 🧪 Test Results" >> $GITHUB_STEP_SUMMARY
          echo "✅ All tests passed" >> $GITHUB_STEP_SUMMARY

  # Deployment (nur nach erfolgreichem Release)
  deployment:
    name: 🚀 Deploy
    if: needs.release-management.outputs.release_created == 'true'
    needs: [release-management, test-suite]
    runs-on: ubuntu-latest
    environment: production
    
    steps:
      - name: 🚀 Deploy Application
        run: |
          echo "🚀 Deploying version ${{ needs.release-management.outputs.version }}..."
          # Hier würde das echte Deployment stattfinden
          echo "✅ Deployment completed successfully"

      - name: 📊 Deployment Summary
        run: |
          echo "### 🚀 Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "✅ Successfully deployed version ${{ needs.release-management.outputs.version }}" >> $GITHUB_STEP_SUMMARY
          echo "🏷️ Git Tag: ${{ needs.release-management.outputs.tag_name }}" >> $GITHUB_STEP_SUMMARY

  # Notification (finale Zusammenfassung)
  notification:
    name: 📢 Notification
    if: always()
    needs: [readme-management, release-management, test-suite, deployment]
    runs-on: ubuntu-latest
    
    steps:
      - name: 📊 Pipeline Summary
        run: |
          echo "### 🔄 Pipeline Execution Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Job | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|-----|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| 📄 Documentation | ${{ needs.readme-management.result || 'skipped' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| 🚀 Release | ${{ needs.release-management.result || 'skipped' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| 🧪 Tests | ${{ needs.test-suite.result || 'skipped' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| 🚀 Deployment | ${{ needs.deployment.result || 'skipped' }} |" >> $GITHUB_STEP_SUMMARY
          
          if [ "${{ needs.release-management.outputs.release_created }}" = "true" ]; then
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "🎉 **New release created: ${{ needs.release-management.outputs.version }}**" >> $GITHUB_STEP_SUMMARY
          fi

# 📋 Pipeline-Features:
# ✅ Automatische README-Generierung und -Updates
# ✅ Intelligentes Release-Management mit Conventional Commits
# ✅ Automatisierte Tests vor Deployment
# ✅ Umgebungsbasierte Deployments
# ✅ Umfassende Benachrichtigungen und Summaries
# ✅ Cron-basierte regelmäßige Updates
# ✅ Manuelle Trigger mit Optionen
