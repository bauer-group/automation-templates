name: Docker Multi-Platform Build Example
# Example: Multi-platform Docker build for ARM64 and AMD64 architectures
# This example demonstrates cross-platform builds for cloud and edge deployment

on:
  push:
    branches: [ main, develop ]
    tags: [ 'v*' ]
    paths:
      - 'Dockerfile'
      - 'src/**'
      - '.dockerignore'
  pull_request:
    branches: [ main ]
    paths:
      - 'Dockerfile'
      - 'src/**'
      - '.dockerignore'

env:
  APP_NAME: 'multi-platform-app'
  REGISTRY: 'ghcr.io'

jobs:
  docker-build:
    name: Multi-Platform Docker Build
    uses: bauer-group/automation-templates/.github/workflows/docker-build.yml@main
    with:
      # Default configuration with multi-platform enabled
      config-file: 'default'
      
      # Multi-platform image configuration
      image-name: ${{ env.APP_NAME }}
      image-tag: ${{ github.ref_type == 'tag' && github.ref_name || format('{0}-{1}', github.ref_name, github.sha) }}
      registry: ${{ env.REGISTRY }}
      
      # Multi-platform build configuration
      dockerfile: './Dockerfile'
      context: '.'
      platforms: 'linux/amd64,linux/arm64,linux/arm/v7'
      multi-platform: true
      
      # Cross-compilation build arguments
      build-args: |
        TARGETPLATFORM
        TARGETOS
        TARGETARCH
        TARGETVARIANT
        BUILDPLATFORM
        VERSION=${{ github.ref_type == 'tag' && github.ref_name || github.sha }}
        BUILDTIME=${{ github.event.head_commit.timestamp }}
      
      # Security scanning for all platforms
      security-scan: true
      fail-on-severity: 'CRITICAL'
      generate-sbom: true
      
      # Testing across platforms
      run-tests: true
      test-command: 'docker run --rm --platform=$PLATFORM $IMAGE_TAG test'
      
      # Performance optimization for multi-platform
      cache-enabled: true
      cache-mode: 'max'
      parallel-builds: true
      build-timeout: 45
      
      # Deploy only on tags
      deploy: ${{ github.ref_type == 'tag' }}
      deployment-environment: 'production'
      
    secrets:
      REGISTRY_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      
  # Manifest creation for multi-arch images
  create-manifest:
    name: Create Multi-Arch Manifest
    needs: docker-build
    runs-on: ubuntu-latest
    if: github.ref_type == 'tag'
    steps:
      - name: Create and Push Manifest
        run: |
          echo "Multi-arch manifest created for tag: ${{ github.ref_name }}"
          # Additional manifest operations if needed