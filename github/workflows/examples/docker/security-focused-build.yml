name: Docker Security-Focused Build Example
# Example: Security-first Docker build with comprehensive vulnerability scanning
# This example demonstrates advanced security scanning and image hardening

on:
  push:
    branches: [ main, security/* ]
    paths:
      - 'Dockerfile'
      - 'Dockerfile.security'
      - 'src/**'
      - 'security/**'
      - '.dockerignore'
  pull_request:
    branches: [ main ]
    paths:
      - 'Dockerfile'
      - 'Dockerfile.security'
      - 'src/**'
      - 'security/**'
      - '.dockerignore'
  schedule:
    # Daily security scan
    - cron: '0 6 * * *'

env:
  APP_NAME: 'secure-app'
  SECURITY_SCANNER: 'trivy'

jobs:
  security-scan-pre-build:
    name: Pre-Build Security Analysis
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        
      - name: Dockerfile Security Scan
        run: |
          echo "Scanning Dockerfile for security issues"
          # dockerfile-json or hadolint scanning
          
      - name: Source Code Security Scan
        run: |
          echo "Scanning source code for vulnerabilities"
          # semgrep, bandit, or other SAST tools

  docker-build:
    name: Secure Docker Build
    needs: security-scan-pre-build
    uses: bauer-group/automation-templates/.github/workflows/docker-build.yml@main
    with:
      # Security-focused configuration
      config-file: 'web-application'  # Using web-app config as base
      
      # Secure image configuration
      image-name: ${{ env.APP_NAME }}
      image-tag: 'secure-${{ github.sha }}'
      registry: 'ghcr.io'
      
      # Security-hardened build
      dockerfile: './Dockerfile.security'
      context: '.'
      target: 'production-secure'
      
      # Security-focused build arguments
      build-args: |
        SECURITY_MODE=strict
        NONROOT_USER=appuser
        REMOVE_PACKAGE_MANAGERS=true
        DISABLE_SHELL=true
        VERSION=${{ github.sha }}
        BUILDTIME=${{ github.event.head_commit.timestamp }}
      
      # Comprehensive security scanning
      security-scan: true
      scanner: ${{ env.SECURITY_SCANNER }}
      fail-on-severity: 'LOW'  # Very strict security
      ignore-unfixed: false
      generate-sbom: true
      sbom-format: 'cyclonedx'
      sign-image: true
      
      # Additional security validations
      secret-scanning: true
      license-scanning: true
      malware-scanning: true
      
      # Security testing
      run-tests: true
      test-command: 'docker run --rm --read-only --tmpfs /tmp $IMAGE_TAG security-test'
      security-tests: true
      
      # No deployment for security builds
      deploy: false
      
    secrets:
      REGISTRY_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      COSIGN_PRIVATE_KEY: ${{ secrets.COSIGN_PRIVATE_KEY }}
      COSIGN_PASSWORD: ${{ secrets.COSIGN_PASSWORD }}
      
  security-report:
    name: Security Assessment Report
    needs: docker-build
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: Generate Security Report
        run: |
          echo "=== SECURITY SCAN RESULTS ==="
          echo "Build Status: ${{ needs.docker-build.result }}"
          echo "Timestamp: $(date)"
          echo "Commit: ${{ github.sha }}"
          echo "Branch: ${{ github.ref_name }}"
          
      - name: Archive Security Results
        uses: actions/upload-artifact@v4
        with:
          name: security-scan-results
          path: |
            security-report.json
            vulnerability-report.sarif
            sbom.json
          retention-days: 90
          
      - name: Create Security Issue
        if: failure()
        run: |
          echo "Security vulnerabilities found - creating issue"
          # Create GitHub issue for security team
          
      - name: Notify Security Team
        if: failure()
        run: |
          echo "Critical security issues detected"
          # Send notification to security team via webhook/email